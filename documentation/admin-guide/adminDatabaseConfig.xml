<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="./docbook.css" type="text/css"?>
<chapter xml:id="adm_database_config" xml:lang="en" version="5.0"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd">
    <title>Database Configuration</title>

    <section>
        <title>JNDI Lookup</title>
        <para>
            For application to be versatile with multiple environments, i.e. WebLogic and Tomcat,
            it is required to perform a *jndi lookup* instead of - which is by default - using
            classic **.properties** file connection configuration.
        </para>
        <para>
            Following entry in *.yaml* configuration file allows jndi-lookup.
        </para>
        <programlisting>
            <![CDATA[
spring:
  (...)
  datasource:
    (...)
    jndi-name: jdbc/vrm
  (...)
                ]]>
        </programlisting>
        <para>
            Spring performs jndi-lookup when the *jndi-name* parameter is set,
            otherwise it tries to use standard configuration properties provided in the file.
        </para>
    </section>
    <section>
        <title>web.xml Descriptor</title>
        <para>
            Another important thing to set up before any data source is the *web.xml*
            descriptor content. The file should have been placed in the **src/main/webapp/WEB-INF** directory.
        </para>
        <programlisting>
            <![CDATA[
<?xml version="1.0" encoding="ISO-8859-1"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
              http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0"
         metadata-complete="true">
    <resource-ref>
        <description>DB Connection</description>
        <res-ref-name>jdbc/vrm</res-ref-name>
        <res-type>javax.sql.DataSource</res-type>
        <res-auth>Container</res-auth>
    </resource-ref>
</web-app>
                ]]>
        </programlisting>
        <para>
            We specify resource reference for the web application, where *res-ref-name* references
            our *jndi* name acknowledged in the previous section.
        </para>
    </section>
    <section>
        <title>SQL Dialect</title>
        <para>
            By default SQL dialect variable
            <computeroutput>spring.jpa.properties.hibernate.dialect</computeroutput>
            is configured for Oracle database (<emphasis>org.hibernate.dialect.Oracle12cDialect</emphasis>).
            Please set the variable for the right database dialect used if necessary. Value for MySQL is
            <emphasis>org.hibernate.dialect.MySQL8Dialect</emphasis>.
        </para>
    </section>
    <section>
        <title>Tomcat Server</title>
        <section>
            <title>JDBC connectors</title>
            <para>
                Before we start any deployment it is very important to make sure that the Tomcat standalone
                server contains all the necessary JDBC Connector libraries required for
                making a connection to the database.
            </para>
            <para>
                For MySQL see&#xa0;
                <link xlink:href="https://mvnrepository.com/artifact/mysql/mysql-connector-java/8.0.19">this Maven
                    repository page</link>.
            </para>
            <para>
                For Oracle see&#xa0;
                <link xlink:href="https://mvnrepository.com/artifact/com.oracle.jdbc/ojdbc8/12.2.0.1">this Maven
                    repository page</link>.
            </para>
            <para>
                Verify that <computeroutput>/lib</computeroutput> directory contains these <emphasis>jar</emphasis> files.
            </para>
        </section>
        <section>
            <title>server.xml</title>
            <para>
                The connection resource is, by out assumption, configured in the Tomcat standalone
                <computeroutput>server.xml</computeroutput>
                file. Moving configuration from application's context to
                server's context allows us to make application completely independent to
                the way connection is made, and of course - which database configuration is used.
                In the configuration file <computeroutput>conf/server.xml</computeroutput> - adding following entry in
                the <emphasis role="bold">GlobalNamingResources</emphasis> enables the resource:
            </para>
            <programlisting>
                <![CDATA[
<!-- Driver has to be provided to the Tomcat standalone -->
<Resource name="jdbc/vrm"
          auth="Container"
          type="javax.sql.DataSource"
          username="vrm"
          password="vrm"
          driverClassName="com.mysql.cj.jdbc.Driver"
          factory="org.apache.tomcat.jdbc.pool.DataSourceFactory"
          url="jdbc:mysql://localhost:3306/vrm"
          removeAbandonedTimeout="60"
          testWhileIdle="true"
          timeBetweenEvictionRunsMillis="300000"
          connectionProperties="useUnicode=true;useJDBCCompliantTimezoneShift=true;
                                useLegacyDatetimeCode=false;serverTimezone=UTC;useSSL=false;"
          initialSize="8"
          maxActive="8"
          minIdle="8"
          maxIdle="8"/>
                ]]>
            </programlisting>
            <para>
                Note that configuration above is specific for Tomcat + MySQL.
            </para>
            <para>
                The resource configuration alone doesn't make it accessible throughout the
                application though.
            </para>
        </section>
        <section>
            <title>context.xml</title>
            <para>
                To share the resource in the application it has to be explicitly mapped in the <computeroutput>
                context.xml
            </computeroutput> file, so the application can find the right object during the jndi lookup.
            </para>
            <para>
                During the deployment the <computeroutput>context.xml</computeroutput> file under <computeroutput>
                src/main/webapp/META-INF
            </computeroutput> directory is loaded by Tomcat standalone server.
            </para>
            <para>
                Following content:
                <programlisting>
                    <![CDATA[
<?xml version='1.0' encoding='utf-8'?>
<Context reloadable="true" privileged="true">
    <WatchedResource>WEB-INF/web.xml</WatchedResource>
    <ResourceLink name="jdbc/vrm"
                  global="jdbc/vrm"
                  auth="Container"
                  type="javax.sql.DataSource"/>
</Context>
                    ]]>
                </programlisting>
                maps the global resource we've configured in the previous step to a local resource in the
                application.
            </para>
        </section>
    </section>
    <section>
        <title>WebLogic Server</title>
        <para>
            Please note that following walk-through follows WebLogic + Oracle database pairing.
        </para>
        <para>
            Go to **Services** (in the context menu, on the left) and select **Data sources**.
            Then on the toolbar of data sources table select the **New** dropdown menu and then
            click on **Generic Data Source**.
        </para>
        <section>
            <title>First Page</title>
            <para>
                In the first configuration screen we only have to specify four fields:
                <itemizedlist>
                    <listitem>
                        <para>
                            **Name** doesn't really matter, but it is a good practice to use a
                            distinguishable name for future ease of use, e.g. *VRM_Oracle_DataSource*.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            For **Scope** we may select *Global*.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            For **JNDI Name** type *jdbc/vrm*, as specified previously, and
                            the **database type** (in this case) *Oracle*.
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Second Page</title>
            <para>
                Please select the driver used for the specific database, for Oracle:
                <emphasis role="bold">Database Driver: Oracle's Driver (Thin) for Service connections; Versions: Any
                </emphasis>
            </para>
        </section>
        <section>
            <title>Third Page</title>
            <para>
                Following options must be selected: <emphasis role="bold">Support Global Transactions
            </emphasis> and <emphasis role="bold">One-Phase Commit</emphasis>.
            </para>
        </section>
        <section>
            <title>Fourth Page</title>
            <para>
                The database connection configuration screen - there you can set the
                properties required for actual database connection.
                Please bear in mind that the properties may vary depending on the use case.
            </para>
            <para>
                Sample configuration:
                <programlisting>
                    <![CDATA[
Database Name: 'vrm'
Host Name: '127.0.0.1'
Port: '1521'
Database User Name: 'vrm'
Password: 'vrm'
                    ]]>
                </programlisting>
            </para>
        </section>
        <section>
            <title>Fifth Page</title>
            <para>
                It is very important to make the connection available to the server.
                To do so - mark the checkbox next to <emphasis role="bold">AdminServer</emphasis> to make it as an
                active target.
            </para>
        </section>
    </section>
</chapter>