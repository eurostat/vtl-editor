// Generated from Vtl.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');
var VtlListener = require('./VtlListener').VtlListener;
var grammarFileName = "Vtl.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u00fd\u0730\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
    "x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004",
    "\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0003\u0002\u0005",
    "\u0002\u0104\n\u0002\u0003\u0002\u0007\u0002\u0107\n\u0002\f\u0002\u000e",
    "\u0002\u010a\u000b\u0002\u0003\u0002\u0007\u0002\u010d\n\u0002\f\u0002",
    "\u000e\u0002\u0110\u000b\u0002\u0003\u0002\u0007\u0002\u0113\n\u0002",
    "\f\u0002\u000e\u0002\u0116\u000b\u0002\u0003\u0002\u0005\u0002\u0119",
    "\n\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0005\u0002\u011e\n\u0002",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u0123\n\u0003\u0003",
    "\u0003\u0003\u0003\u0005\u0003\u0127\n\u0003\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005\u0005\u0005\u012f\n",
    "\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u0139\n\u0006\u0003\u0006",
    "\u0003\u0006\u0007\u0006\u013d\n\u0006\f\u0006\u000e\u0006\u0140\u000b",
    "\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u0144\n\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0005\u0006\u014f\n\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005",
    "\u0006\u015e\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u0179\n\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u017f\n\u0006",
    "\u0007\u0006\u0181\n\u0006\f\u0006\u000e\u0006\u0184\u000b\u0006\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u0190\n\u0007",
    "\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u0196\n\b\u0003\b\u0003\b\u0003",
    "\b\u0005\b\u019b\n\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0007\n\u01a9\n\n\f",
    "\n\u000e\n\u01ac\u000b\n\u0003\u000b\u0003\u000b\u0005\u000b\u01b0\n",
    "\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u01b4\n\u000b\u0003\u000b",
    "\u0005\u000b\u01b7\n\u000b\u0003\f\u0003\f\u0005\f\u01bb\n\f\u0003\f",
    "\u0003\f\u0003\f\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u01c4\n\r\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0005\r\u01ca\n\r\u0007\r\u01cc\n\r\f\r\u000e",
    "\r\u01cf\u000b\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005",
    "\u000e\u01d5\n\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0007\u000e",
    "\u01da\n\u000e\f\u000e\u000e\u000e\u01dd\u000b\u000e\u0003\u000f\u0005",
    "\u000f\u01e0\n\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0005\u000f\u01e7\n\u000f\u0003\u0010\u0003\u0010\u0005",
    "\u0010\u01eb\n\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0007\u0012\u01f9\n\u0012\f\u0012\u000e\u0012",
    "\u01fc\u000b\u0012\u0003\u0013\u0003\u0013\u0005\u0013\u0200\n\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u0206\n",
    "\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u020a\n\u0013\u0003\u0013",
    "\u0005\u0013\u020d\n\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0007\u0014\u0213\n\u0014\f\u0014\u000e\u0014\u0216\u000b\u0014",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u021b\n\u0015\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u0220\n\u0016\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0007\u0017\u0229\n\u0017\f\u0017\u000e\u0017\u022c\u000b\u0017\u0005",
    "\u0017\u022e\n\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017",
    "\u0233\n\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u023e",
    "\n\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019",
    "\u0244\n\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u0249",
    "\n\u0019\u0007\u0019\u024b\n\u0019\f\u0019\u000e\u0019\u024e\u000b\u0019",
    "\u0005\u0019\u0250\n\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u0259\n\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u0282\n\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u02be\n\u001a",
    "\u0003\u001a\u0003\u001a\u0005\u001a\u02c2\n\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0005\u001a\u02cd\n\u001a\u0003\u001a\u0003\u001a",
    "\u0005\u001a\u02d1\n\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005",
    "\u001a\u02dc\n\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a",
    "\u030b\n\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0005\u001b\u0313\n\u001b\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0007\u001c\u0319\n\u001c\f\u001c\u000e\u001c",
    "\u031c\u000b\u001c\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0007\u001d\u0324\n\u001d\f\u001d\u000e\u001d\u0327",
    "\u000b\u001d\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u0331\n\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u0336\n\u001e\u0007\u001e",
    "\u0338\n\u001e\f\u001e\u000e\u001e\u033b\u000b\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0005\u001e\u0340\n\u001e\u0003\u001e\u0003\u001e",
    "\u0005\u001e\u0344\n\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u034e",
    "\n\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u0352\n\u001f\u0003\u001f",
    "\u0003\u001f\u0003 \u0003 \u0003 \u0005 \u0359\n \u0003 \u0003 \u0003",
    "!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003\"\u0003\"\u0003\"",
    "\u0003\"\u0003\"\u0005\"\u0369\n\"\u0003\"\u0003\"\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0005#\u0372\n#\u0003#\u0003#\u0003#\u0005#\u0377\n",
    "#\u0005#\u0379\n#\u0003#\u0003#\u0005#\u037d\n#\u0003#\u0003#\u0003",
    "$\u0003$\u0003$\u0003$\u0005$\u0385\n$\u0003$\u0005$\u0388\n$\u0003",
    "$\u0003$\u0005$\u038c\n$\u0003$\u0005$\u038f\n$\u0003$\u0003$\u0003",
    "%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0007%\u039c",
    "\n%\f%\u000e%\u039f\u000b%\u0005%\u03a1\n%\u0003%\u0005%\u03a4\n%\u0003",
    "%\u0003%\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0007&\u03b1\n&\f&\u000e&\u03b4\u000b&\u0005&\u03b6\n&\u0003&\u0003",
    "&\u0005&\u03ba\n&\u0003&\u0005&\u03bd\n&\u0003&\u0005&\u03c0\n&\u0003",
    "&\u0005&\u03c3\n&\u0003&\u0003&\u0003\'\u0003\'\u0003\'\u0003(\u0003",
    "(\u0003(\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0007)\u03d6\n)\f)\u000e)\u03d9\u000b)\u0005)\u03db\n)\u0003)\u0003",
    ")\u0005)\u03df\n)\u0003)\u0003)\u0005)\u03e3\n)\u0003)\u0003)\u0005",
    ")\u03e7\n)\u0003)\u0003)\u0005)\u03eb\n)\u0003)\u0003)\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0005*\u03f9",
    "\n*\u0003+\u0003+\u0005+\u03fd\n+\u0003+\u0003+\u0005+\u0401\n+\u0003",
    "+\u0003+\u0007+\u0405\n+\f+\u000e+\u0408\u000b+\u0003+\u0003+\u0003",
    "+\u0005+\u040d\n+\u0003+\u0005+\u0410\n+\u0003+\u0005+\u0413\n+\u0003",
    "+\u0003+\u0003+\u0003,\u0003,\u0003,\u0003,\u0003,\u0007,\u041d\n,\f",
    ",\u000e,\u0420\u000b,\u0003-\u0003-\u0003-\u0003-\u0005-\u0426\n-\u0003",
    "-\u0003-\u0003-\u0005-\u042b\n-\u0007-\u042d\n-\f-\u000e-\u0430\u000b",
    "-\u0003.\u0003.\u0003.\u0005.\u0435\n.\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0005/\u0447\n/\u00030\u00030\u00030\u00030\u00050\u044d\n",
    "0\u00030\u00030\u00031\u00031\u00031\u00051\u0454\n1\u00031\u00031\u0003",
    "1\u00031\u00051\u045a\n1\u00071\u045c\n1\f1\u000e1\u045f\u000b1\u0003",
    "1\u00031\u00031\u00031\u00071\u0465\n1\f1\u000e1\u0468\u000b1\u0005",
    "1\u046a\n1\u00032\u00052\u046d\n2\u00032\u00032\u00032\u00052\u0472",
    "\n2\u00032\u00032\u00052\u0476\n2\u00032\u00052\u0479\n2\u00033\u0005",
    "3\u047c\n3\u00033\u00033\u00033\u00073\u0481\n3\f3\u000e3\u0484\u000b",
    "3\u00034\u00034\u00054\u0488\n4\u00034\u00034\u00034\u00054\u048d\n",
    "4\u00034\u00074\u0490\n4\f4\u000e4\u0493\u000b4\u00035\u00035\u0003",
    "5\u00035\u00036\u00056\u049a\n6\u00036\u00036\u00036\u00036\u00076\u04a0",
    "\n6\f6\u000e6\u04a3\u000b6\u00036\u00056\u04a6\n6\u00036\u00056\u04a9",
    "\n6\u00037\u00057\u04ac\n7\u00037\u00037\u00037\u00077\u04b1\n7\f7\u000e",
    "7\u04b4\u000b7\u00038\u00038\u00038\u00038\u00039\u00039\u00039\u0003",
    "9\u00079\u04be\n9\f9\u000e9\u04c1\u000b9\u0003:\u0003:\u0003:\u0003",
    ":\u0007:\u04c7\n:\f:\u000e:\u04ca\u000b:\u0003;\u0003;\u0003;\u0005",
    ";\u04cf\n;\u0003<\u0003<\u0003<\u0003<\u0005<\u04d5\n<\u0003<\u0003",
    "<\u0003<\u0003<\u0003<\u0005<\u04dc\n<\u0003<\u0003<\u0003<\u0003<\u0003",
    "<\u0005<\u04e3\n<\u0003<\u0003<\u0003<\u0003<\u0003<\u0005<\u04ea\n",
    "<\u0003<\u0003<\u0007<\u04ee\n<\f<\u000e<\u04f1\u000b<\u0003=\u0003",
    "=\u0003=\u0003>\u0003>\u0003?\u0003?\u0003?\u0007?\u04fb\n?\f?\u000e",
    "?\u04fe\u000b?\u0003@\u0005@\u0501\n@\u0003@\u0003@\u0003@\u0003@\u0003",
    "A\u0003A\u0003A\u0007A\u050a\nA\fA\u000eA\u050d\u000bA\u0003B\u0005",
    "B\u0510\nB\u0003B\u0003B\u0003C\u0003C\u0003C\u0005C\u0517\nC\u0003",
    "C\u0005C\u051a\nC\u0003D\u0003D\u0003D\u0003E\u0003E\u0003E\u0003E\u0003",
    "E\u0003E\u0003E\u0003E\u0007E\u0527\nE\fE\u000eE\u052a\u000bE\u0003",
    "F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003",
    "F\u0003F\u0003F\u0005F\u0539\nF\u0003F\u0003F\u0003F\u0003F\u0003F\u0003",
    "F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003",
    "F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003",
    "F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003",
    "F\u0003F\u0003F\u0003F\u0003F\u0003F\u0005F\u0564\nF\u0003G\u0003G\u0003",
    "G\u0003G\u0007G\u056a\nG\fG\u000eG\u056d\u000bG\u0003H\u0005H\u0570",
    "\nH\u0003H\u0003H\u0003H\u0003H\u0003I\u0003I\u0003I\u0003I\u0003I\u0003",
    "I\u0005I\u057c\nI\u0003J\u0003J\u0003J\u0003J\u0007J\u0582\nJ\fJ\u000e",
    "J\u0585\u000bJ\u0003K\u0003K\u0003K\u0003K\u0003K\u0005K\u058c\nK\u0003",
    "L\u0003L\u0003L\u0003L\u0007L\u0592\nL\fL\u000eL\u0595\u000bL\u0003",
    "M\u0003M\u0003M\u0003M\u0003M\u0005M\u059c\nM\u0003N\u0003N\u0003N\u0003",
    "N\u0003N\u0003O\u0003O\u0003O\u0003O\u0003O\u0003P\u0003P\u0003P\u0003",
    "P\u0003P\u0003P\u0003P\u0003P\u0003P\u0007P\u05b1\nP\fP\u000eP\u05b4",
    "\u000bP\u0003Q\u0003Q\u0003Q\u0005Q\u05b9\nQ\u0003Q\u0003Q\u0003Q\u0005",
    "Q\u05be\nQ\u0005Q\u05c0\nQ\u0003R\u0003R\u0003R\u0003R\u0003R\u0007",
    "R\u05c7\nR\fR\u000eR\u05ca\u000bR\u0003R\u0003R\u0003R\u0003R\u0003",
    "R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003",
    "R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0007R\u05e1\nR\fR\u000e",
    "R\u05e4\u000bR\u0003R\u0003R\u0005R\u05e8\nR\u0003S\u0003S\u0003S\u0003",
    "S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0005S\u05f4\nS\u0003S\u0003",
    "S\u0003T\u0003T\u0003T\u0003T\u0003T\u0005T\u05fd\nT\u0003T\u0003T\u0003",
    "T\u0003T\u0005T\u0603\nT\u0007T\u0605\nT\fT\u000eT\u0608\u000bT\u0003",
    "T\u0005T\u060b\nT\u0003T\u0005T\u060e\nT\u0003T\u0003T\u0003U\u0003",
    "U\u0003U\u0003U\u0003U\u0005U\u0617\nU\u0003U\u0003U\u0003U\u0003U\u0005",
    "U\u061d\nU\u0007U\u061f\nU\fU\u000eU\u0622\u000bU\u0003U\u0003U\u0005",
    "U\u0626\nU\u0003U\u0005U\u0629\nU\u0003V\u0003V\u0003W\u0003W\u0003",
    "W\u0003W\u0007W\u0631\nW\fW\u000eW\u0634\u000bW\u0003W\u0005W\u0637",
    "\nW\u0003X\u0003X\u0005X\u063b\nX\u0003X\u0005X\u063e\nX\u0003X\u0003",
    "X\u0005X\u0642\nX\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Z\u0003Z\u0003",
    "Z\u0003Z\u0003Z\u0005Z\u064e\nZ\u0003[\u0003[\u0003[\u0003\\\u0003\\",
    "\u0003]\u0003]\u0003^\u0003^\u0003_\u0003_\u0003`\u0003`\u0003a\u0003",
    "a\u0003b\u0003b\u0003c\u0003c\u0003d\u0003d\u0003e\u0003e\u0003f\u0003",
    "f\u0003f\u0003f\u0003f\u0003f\u0005f\u066d\nf\u0003g\u0003g\u0003h\u0003",
    "h\u0003i\u0003i\u0003i\u0005i\u0676\ni\u0003i\u0005i\u0679\ni\u0003",
    "i\u0005i\u067c\ni\u0003i\u0005i\u067f\ni\u0003j\u0003j\u0003k\u0003",
    "k\u0003l\u0003l\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003",
    "m\u0007m\u068f\nm\fm\u000em\u0692\u000bm\u0003m\u0003m\u0005m\u0696",
    "\nm\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0005n\u069e\nn\u0003",
    "o\u0003o\u0003o\u0003o\u0003o\u0005o\u06a5\no\u0003p\u0003p\u0003p\u0003",
    "p\u0003p\u0007p\u06ac\np\fp\u000ep\u06af\u000bp\u0003p\u0003p\u0005",
    "p\u06b3\np\u0003q\u0003q\u0003q\u0005q\u06b8\nq\u0003r\u0003r\u0005",
    "r\u06bc\nr\u0003s\u0003s\u0003s\u0005s\u06c1\ns\u0003t\u0003t\u0003",
    "t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0005t\u06ce",
    "\nt\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0005u\u06d8",
    "\nu\u0003u\u0005u\u06db\nu\u0003u\u0003u\u0003u\u0003u\u0003u\u0003",
    "u\u0003u\u0005u\u06e4\nu\u0003u\u0003u\u0005u\u06e8\nu\u0005u\u06ea",
    "\nu\u0003v\u0003v\u0003v\u0007v\u06ef\nv\fv\u000ev\u06f2\u000bv\u0003",
    "w\u0003w\u0003w\u0007w\u06f7\nw\fw\u000ew\u06fa\u000bw\u0003x\u0003",
    "x\u0003x\u0007x\u06ff\nx\fx\u000ex\u0702\u000bx\u0003x\u0003x\u0003",
    "x\u0003y\u0003y\u0003y\u0005y\u070a\ny\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0005z\u0711\nz\u0003{\u0003{\u0003{\u0003{\u0003{\u0005{\u0718\n",
    "{\u0003|\u0003|\u0003}\u0003}\u0003}\u0003}\u0003~\u0003~\u0003~\u0003",
    "~\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u0080\u0003",
    "\u0080\u0003\u0080\u0003\u0080\u0003\u0081\u0003\u0081\u0003\u0081\u0003",
    "\u0081\u0003\u0081\u0003\u04ef\u0003\n\u0082\u0002\u0004\u0006\b\n\f",
    "\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.0246",
    "8:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088",
    "\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0",
    "\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8",
    "\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0",
    "\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8",
    "\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100",
    "\u0002\u001e\u0004\u0002\u0005\u0006((\u0003\u0002\u0007\b\u0003\u0002",
    "\u0005\u0006\u0003\u0002\t\u000e\u0003\u0002\r\u000e\u0003\u0002&\'",
    "\u0003\u0002*+\u0003\u0002jk\u0003\u0002\t\r\u0004\u0002==\u00c4\u00c4",
    "\u0004\u0002hh\u00ea\u00ea\u0003\u0002GH\u0004\u0002==ii\u0005\u0002",
    "==ii\u00db\u00db\u0003\u0002\u00d4\u00d9\u0004\u0002nn\u00cf\u00cf\u0005",
    "\u0002nnuu\u00ce\u00ce\u0004\u0002==\u00d3\u00d3\u0003\u0002CD\u0004",
    "\u0002BB\u0088\u008c\u0005\u0002EFX[\u0081\u0084\u0004\u0002\u00e4\u00e4",
    "\u00e7\u00e7\u0003\u0002\u00b5\u00b8\u0004\u0002\u00e4\u00e4\u00e7\u00ea",
    "\u0004\u0002\u009d\u009e\u00a1\u00a3\u0006\u0002\u009d\u00a2\u00c5\u00c5",
    "\u00dc\u00dc\u00f7\u00f7\u0004\u0002\u0005\u0005\u0007\u0007\u0004\u0002",
    "==\u00e8\u00e8\u0002\u07df\u0002\u011d\u0003\u0002\u0002\u0002\u0004",
    "\u0126\u0003\u0002\u0002\u0002\u0006\u0128\u0003\u0002\u0002\u0002\b",
    "\u012e\u0003\u0002\u0002\u0002\n\u015d\u0003\u0002\u0002\u0002\f\u018f",
    "\u0003\u0002\u0002\u0002\u000e\u019a\u0003\u0002\u0002\u0002\u0010\u019c",
    "\u0003\u0002\u0002\u0002\u0012\u01a5\u0003\u0002\u0002\u0002\u0014\u01af",
    "\u0003\u0002\u0002\u0002\u0016\u01b8\u0003\u0002\u0002\u0002\u0018\u01bf",
    "\u0003\u0002\u0002\u0002\u001a\u01d4\u0003\u0002\u0002\u0002\u001c\u01df",
    "\u0003\u0002\u0002\u0002\u001e\u01e8\u0003\u0002\u0002\u0002 \u01ec",
    "\u0003\u0002\u0002\u0002\"\u01f5\u0003\u0002\u0002\u0002$\u01ff\u0003",
    "\u0002\u0002\u0002&\u020e\u0003\u0002\u0002\u0002(\u0217\u0003\u0002",
    "\u0002\u0002*\u021f\u0003\u0002\u0002\u0002,\u0221\u0003\u0002\u0002",
    "\u0002.\u0239\u0003\u0002\u0002\u00020\u023f\u0003\u0002\u0002\u0002",
    "2\u030a\u0003\u0002\u0002\u00024\u0312\u0003\u0002\u0002\u00026\u0314",
    "\u0003\u0002\u0002\u00028\u031f\u0003\u0002\u0002\u0002:\u032a\u0003",
    "\u0002\u0002\u0002<\u0347\u0003\u0002\u0002\u0002>\u0355\u0003\u0002",
    "\u0002\u0002@\u035c\u0003\u0002\u0002\u0002B\u0363\u0003\u0002\u0002",
    "\u0002D\u036c\u0003\u0002\u0002\u0002F\u0380\u0003\u0002\u0002\u0002",
    "H\u0392\u0003\u0002\u0002\u0002J\u03a7\u0003\u0002\u0002\u0002L\u03c6",
    "\u0003\u0002\u0002\u0002N\u03c9\u0003\u0002\u0002\u0002P\u03cc\u0003",
    "\u0002\u0002\u0002R\u03f8\u0003\u0002\u0002\u0002T\u03fc\u0003\u0002",
    "\u0002\u0002V\u0417\u0003\u0002\u0002\u0002X\u0421\u0003\u0002\u0002",
    "\u0002Z\u0434\u0003\u0002\u0002\u0002\\\u0446\u0003\u0002\u0002\u0002",
    "^\u0448\u0003\u0002\u0002\u0002`\u0450\u0003\u0002\u0002\u0002b\u046c",
    "\u0003\u0002\u0002\u0002d\u047b\u0003\u0002\u0002\u0002f\u0485\u0003",
    "\u0002\u0002\u0002h\u0494\u0003\u0002\u0002\u0002j\u0499\u0003\u0002",
    "\u0002\u0002l\u04ab\u0003\u0002\u0002\u0002n\u04b5\u0003\u0002\u0002",
    "\u0002p\u04b9\u0003\u0002\u0002\u0002r\u04c2\u0003\u0002\u0002\u0002",
    "t\u04ce\u0003\u0002\u0002\u0002v\u04d0\u0003\u0002\u0002\u0002x\u04f2",
    "\u0003\u0002\u0002\u0002z\u04f5\u0003\u0002\u0002\u0002|\u04f7\u0003",
    "\u0002\u0002\u0002~\u0500\u0003\u0002\u0002\u0002\u0080\u0506\u0003",
    "\u0002\u0002\u0002\u0082\u050f\u0003\u0002\u0002\u0002\u0084\u0513\u0003",
    "\u0002\u0002\u0002\u0086\u051b\u0003\u0002\u0002\u0002\u0088\u051e\u0003",
    "\u0002\u0002\u0002\u008a\u0563\u0003\u0002\u0002\u0002\u008c\u0565\u0003",
    "\u0002\u0002\u0002\u008e\u056f\u0003\u0002\u0002\u0002\u0090\u057b\u0003",
    "\u0002\u0002\u0002\u0092\u057d\u0003\u0002\u0002\u0002\u0094\u058b\u0003",
    "\u0002\u0002\u0002\u0096\u058d\u0003\u0002\u0002\u0002\u0098\u059b\u0003",
    "\u0002\u0002\u0002\u009a\u059d\u0003\u0002\u0002\u0002\u009c\u05a2\u0003",
    "\u0002\u0002\u0002\u009e\u05a7\u0003\u0002\u0002\u0002\u00a0\u05bf\u0003",
    "\u0002\u0002\u0002\u00a2\u05e7\u0003\u0002\u0002\u0002\u00a4\u05e9\u0003",
    "\u0002\u0002\u0002\u00a6\u05f7\u0003\u0002\u0002\u0002\u00a8\u0611\u0003",
    "\u0002\u0002\u0002\u00aa\u062a\u0003\u0002\u0002\u0002\u00ac\u062c\u0003",
    "\u0002\u0002\u0002\u00ae\u0638\u0003\u0002\u0002\u0002\u00b0\u0643\u0003",
    "\u0002\u0002\u0002\u00b2\u064d\u0003\u0002\u0002\u0002\u00b4\u064f\u0003",
    "\u0002\u0002\u0002\u00b6\u0652\u0003\u0002\u0002\u0002\u00b8\u0654\u0003",
    "\u0002\u0002\u0002\u00ba\u0656\u0003\u0002\u0002\u0002\u00bc\u0658\u0003",
    "\u0002\u0002\u0002\u00be\u065a\u0003\u0002\u0002\u0002\u00c0\u065c\u0003",
    "\u0002\u0002\u0002\u00c2\u065e\u0003\u0002\u0002\u0002\u00c4\u0660\u0003",
    "\u0002\u0002\u0002\u00c6\u0662\u0003\u0002\u0002\u0002\u00c8\u0664\u0003",
    "\u0002\u0002\u0002\u00ca\u066c\u0003\u0002\u0002\u0002\u00cc\u066e\u0003",
    "\u0002\u0002\u0002\u00ce\u0670\u0003\u0002\u0002\u0002\u00d0\u0675\u0003",
    "\u0002\u0002\u0002\u00d2\u0680\u0003\u0002\u0002\u0002\u00d4\u0682\u0003",
    "\u0002\u0002\u0002\u00d6\u0684\u0003\u0002\u0002\u0002\u00d8\u0695\u0003",
    "\u0002\u0002\u0002\u00da\u069d\u0003\u0002\u0002\u0002\u00dc\u069f\u0003",
    "\u0002\u0002\u0002\u00de\u06a6\u0003\u0002\u0002\u0002\u00e0\u06b4\u0003",
    "\u0002\u0002\u0002\u00e2\u06b9\u0003\u0002\u0002\u0002\u00e4\u06c0\u0003",
    "\u0002\u0002\u0002\u00e6\u06cd\u0003\u0002\u0002\u0002\u00e8\u06e9\u0003",
    "\u0002\u0002\u0002\u00ea\u06eb\u0003\u0002\u0002\u0002\u00ec\u06f3\u0003",
    "\u0002\u0002\u0002\u00ee\u06fb\u0003\u0002\u0002\u0002\u00f0\u0709\u0003",
    "\u0002\u0002\u0002\u00f2\u0710\u0003\u0002\u0002\u0002\u00f4\u0712\u0003",
    "\u0002\u0002\u0002\u00f6\u0719\u0003\u0002\u0002\u0002\u00f8\u071b\u0003",
    "\u0002\u0002\u0002\u00fa\u071f\u0003\u0002\u0002\u0002\u00fc\u0723\u0003",
    "\u0002\u0002\u0002\u00fe\u0727\u0003\u0002\u0002\u0002\u0100\u072b\u0003",
    "\u0002\u0002\u0002\u0102\u0104\u0005\u0004\u0003\u0002\u0103\u0102\u0003",
    "\u0002\u0002\u0002\u0103\u0104\u0003\u0002\u0002\u0002\u0104\u0108\u0003",
    "\u0002\u0002\u0002\u0105\u0107\u0007\u00fa\u0002\u0002\u0106\u0105\u0003",
    "\u0002\u0002\u0002\u0107\u010a\u0003\u0002\u0002\u0002\u0108\u0106\u0003",
    "\u0002\u0002\u0002\u0108\u0109\u0003\u0002\u0002\u0002\u0109\u010e\u0003",
    "\u0002\u0002\u0002\u010a\u0108\u0003\u0002\u0002\u0002\u010b\u010d\u0007",
    "\u00fb\u0002\u0002\u010c\u010b\u0003\u0002\u0002\u0002\u010d\u0110\u0003",
    "\u0002\u0002\u0002\u010e\u010c\u0003\u0002\u0002\u0002\u010e\u010f\u0003",
    "\u0002\u0002\u0002\u010f\u0111\u0003\u0002\u0002\u0002\u0110\u010e\u0003",
    "\u0002\u0002\u0002\u0111\u0113\u0007\u00f9\u0002\u0002\u0112\u0103\u0003",
    "\u0002\u0002\u0002\u0113\u0116\u0003\u0002\u0002\u0002\u0114\u0112\u0003",
    "\u0002\u0002\u0002\u0114\u0115\u0003\u0002\u0002\u0002\u0115\u0118\u0003",
    "\u0002\u0002\u0002\u0116\u0114\u0003\u0002\u0002\u0002\u0117\u0119\u0005",
    "\u0004\u0003\u0002\u0118\u0117\u0003\u0002\u0002\u0002\u0118\u0119\u0003",
    "\u0002\u0002\u0002\u0119\u011a\u0003\u0002\u0002\u0002\u011a\u011e\u0007",
    "\u0002\u0002\u0003\u011b\u011e\u0007\u00fa\u0002\u0002\u011c\u011e\u0007",
    "\u00fb\u0002\u0002\u011d\u0114\u0003\u0002\u0002\u0002\u011d\u011b\u0003",
    "\u0002\u0002\u0002\u011d\u011c\u0003\u0002\u0002\u0002\u011e\u0003\u0003",
    "\u0002\u0002\u0002\u011f\u0120\u0005\u00c0a\u0002\u0120\u0121\u0007",
    "\u0015\u0002\u0002\u0121\u0123\u0003\u0002\u0002\u0002\u0122\u011f\u0003",
    "\u0002\u0002\u0002\u0122\u0123\u0003\u0002\u0002\u0002\u0123\u0124\u0003",
    "\u0002\u0002\u0002\u0124\u0127\u0005\n\u0006\u0002\u0125\u0127\u0005",
    "\u0006\u0004\u0002\u0126\u0122\u0003\u0002\u0002\u0002\u0126\u0125\u0003",
    "\u0002\u0002\u0002\u0127\u0005\u0003\u0002\u0002\u0002\u0128\u0129\u0005",
    "\u00c0a\u0002\u0129\u012a\u0007q\u0002\u0002\u012a\u012b\u0005\n\u0006",
    "\u0002\u012b\u0007\u0003\u0002\u0002\u0002\u012c\u012f\u0005\n\u0006",
    "\u0002\u012d\u012f\u0007h\u0002\u0002\u012e\u012c\u0003\u0002\u0002",
    "\u0002\u012e\u012d\u0003\u0002\u0002\u0002\u012f\t\u0003\u0002\u0002",
    "\u0002\u0130\u0131\b\u0006\u0001\u0002\u0131\u013e\u00052\u001a\u0002",
    "\u0132\u0138\u0007\u0003\u0002\u0002\u0133\u0139\u0005R*\u0002\u0134",
    "\u0135\u0005\n\u0006\u0002\u0135\u0136\u0007\u0015\u0002\u0002\u0136",
    "\u0137\u0005\n\u0006\u0002\u0137\u0139\u0003\u0002\u0002\u0002\u0138",
    "\u0133\u0003\u0002\u0002\u0002\u0138\u0134\u0003\u0002\u0002\u0002\u0139",
    "\u013a\u0003\u0002\u0002\u0002\u013a\u013b\u0007\u0004\u0002\u0002\u013b",
    "\u013d\u0003\u0002\u0002\u0002\u013c\u0132\u0003\u0002\u0002\u0002\u013d",
    "\u0140\u0003\u0002\u0002\u0002\u013e\u013c\u0003\u0002\u0002\u0002\u013e",
    "\u013f\u0003\u0002\u0002\u0002\u013f\u0143\u0003\u0002\u0002\u0002\u0140",
    "\u013e\u0003\u0002\u0002\u0002\u0141\u0142\u0007\u0016\u0002\u0002\u0142",
    "\u0144\u0005\u00c2b\u0002\u0143\u0141\u0003\u0002\u0002\u0002\u0143",
    "\u0144\u0003\u0002\u0002\u0002\u0144\u015e\u0003\u0002\u0002\u0002\u0145",
    "\u0146\t\u0002\u0002\u0002\u0146\u015e\u0005\n\u0006\u0012\u0147\u0148",
    "\u00078\u0002\u0002\u0148\u0149\u0007\u000f\u0002\u0002\u0149\u014a",
    "\u0005\n\u0006\u0002\u014a\u014b\u00073\u0002\u0002\u014b\u014e\u0005",
    "\n\u0006\u0002\u014c\u014d\u00073\u0002\u0002\u014d\u014f\u0005\u00f6",
    "|\u0002\u014e\u014c\u0003\u0002\u0002\u0002\u014e\u014f\u0003\u0002",
    "\u0002\u0002\u014f\u0150\u0003\u0002\u0002\u0002\u0150\u0151\u0007\u0010",
    "\u0002\u0002\u0151\u015e\u0003\u0002\u0002\u0002\u0152\u0153\u0007\u0018",
    "\u0002\u0002\u0153\u0154\u0005\n\u0006\u0002\u0154\u0155\u0007\u0019",
    "\u0002\u0002\u0155\u0156\u0005\n\u0006\u0002\u0156\u0157\u0007\u001a",
    "\u0002\u0002\u0157\u0158\u0005\n\u0006\b\u0158\u015e\u0003\u0002\u0002",
    "\u0002\u0159\u015e\u0005\f\u0007\u0002\u015a\u015e\u00052\u001a\u0002",
    "\u015b\u015e\u0005\u00ccg\u0002\u015c\u015e\u0007\u00eb\u0002\u0002",
    "\u015d\u0130\u0003\u0002\u0002\u0002\u015d\u0145\u0003\u0002\u0002\u0002",
    "\u015d\u0147\u0003\u0002\u0002\u0002\u015d\u0152\u0003\u0002\u0002\u0002",
    "\u015d\u0159\u0003\u0002\u0002\u0002\u015d\u015a\u0003\u0002\u0002\u0002",
    "\u015d\u015b\u0003\u0002\u0002\u0002\u015d\u015c\u0003\u0002\u0002\u0002",
    "\u015e\u0182\u0003\u0002\u0002\u0002\u015f\u0160\f\u0011\u0002\u0002",
    "\u0160\u0161\t\u0003\u0002\u0002\u0161\u0181\u0005\n\u0006\u0012\u0162",
    "\u0163\f\u0010\u0002\u0002\u0163\u0164\t\u0004\u0002\u0002\u0164\u0181",
    "\u0005\n\u0006\u0011\u0165\u0166\f\u000f\u0002\u0002\u0166\u0167\t\u0005",
    "\u0002\u0002\u0167\u0181\u0005\n\u0006\u0010\u0168\u0169\f\u000b\u0002",
    "\u0002\u0169\u016a\t\u0006\u0002\u0002\u016a\u0181\u0005\n\u0006\f\u016b",
    "\u016c\f\n\u0002\u0002\u016c\u016d\u0007%\u0002\u0002\u016d\u0181\u0005",
    "\n\u0006\u000b\u016e\u016f\f\t\u0002\u0002\u016f\u0170\t\u0007\u0002",
    "\u0002\u0170\u0181\u0005\n\u0006\n\u0171\u0172\f\u0005\u0002\u0002\u0172",
    "\u0173\u0007S\u0002\u0002\u0173\u0181\u0005\n\u0006\u0006\u0174\u0175",
    "\f\u000e\u0002\u0002\u0175\u0178\t\b\u0002\u0002\u0176\u0179\u00058",
    "\u001d\u0002\u0177\u0179\u0007\u00eb\u0002\u0002\u0178\u0176\u0003\u0002",
    "\u0002\u0002\u0178\u0177\u0003\u0002\u0002\u0002\u0179\u0181\u0003\u0002",
    "\u0002\u0002\u017a\u017b\f\r\u0002\u0002\u017b\u017c\u00078\u0002\u0002",
    "\u017c\u017e\u0005\n\u0006\u0002\u017d\u017f\u0007=\u0002\u0002\u017e",
    "\u017d\u0003\u0002\u0002\u0002\u017e\u017f\u0003\u0002\u0002\u0002\u017f",
    "\u0181\u0003\u0002\u0002\u0002\u0180\u015f\u0003\u0002\u0002\u0002\u0180",
    "\u0162\u0003\u0002\u0002\u0002\u0180\u0165\u0003\u0002\u0002\u0002\u0180",
    "\u0168\u0003\u0002\u0002\u0002\u0180\u016b\u0003\u0002\u0002\u0002\u0180",
    "\u016e\u0003\u0002\u0002\u0002\u0180\u0171\u0003\u0002\u0002\u0002\u0180",
    "\u0174\u0003\u0002\u0002\u0002\u0180\u017a\u0003\u0002\u0002\u0002\u0181",
    "\u0184\u0003\u0002\u0002\u0002\u0182\u0180\u0003\u0002\u0002\u0002\u0182",
    "\u0183\u0003\u0002\u0002\u0002\u0183\u000b\u0003\u0002\u0002\u0002\u0184",
    "\u0182\u0003\u0002\u0002\u0002\u0185\u0190\u0005F$\u0002\u0186\u0190",
    "\u0005*\u0016\u0002\u0187\u0190\u0005\u00a6T\u0002\u0188\u0190\u0005",
    "\u00a8U\u0002\u0189\u0190\u0005T+\u0002\u018a\u0190\u0005\u008aF\u0002",
    "\u018b\u0190\u0005\u000e\b\u0002\u018c\u0190\u0005\u00a2R\u0002\u018d",
    "\u0190\u00050\u0019\u0002\u018e\u0190\u0005^0\u0002\u018f\u0185\u0003",
    "\u0002\u0002\u0002\u018f\u0186\u0003\u0002\u0002\u0002\u018f\u0187\u0003",
    "\u0002\u0002\u0002\u018f\u0188\u0003\u0002\u0002\u0002\u018f\u0189\u0003",
    "\u0002\u0002\u0002\u018f\u018a\u0003\u0002\u0002\u0002\u018f\u018b\u0003",
    "\u0002\u0002\u0002\u018f\u018c\u0003\u0002\u0002\u0002\u018f\u018d\u0003",
    "\u0002\u0002\u0002\u018f\u018e\u0003\u0002\u0002\u0002\u0190\r\u0003",
    "\u0002\u0002\u0002\u0191\u019b\u0005B\"\u0002\u0192\u0195\u0005> \u0002",
    "\u0193\u0194\t\u0005\u0002\u0002\u0194\u0196\u0005\n\u0006\u0002\u0195",
    "\u0193\u0003\u0002\u0002\u0002\u0195\u0196\u0003\u0002\u0002\u0002\u0196",
    "\u019b\u0003\u0002\u0002\u0002\u0197\u019b\u0005@!\u0002\u0198\u019b",
    "\u0005D#\u0002\u0199\u019b\u0007\u001d\u0002\u0002\u019a\u0191\u0003",
    "\u0002\u0002\u0002\u019a\u0192\u0003\u0002\u0002\u0002\u019a\u0197\u0003",
    "\u0002\u0002\u0002\u019a\u0198\u0003\u0002\u0002\u0002\u019a\u0199\u0003",
    "\u0002\u0002\u0002\u019b\u000f\u0003\u0002\u0002\u0002\u019c\u019d\u0005",
    "\u00fa~\u0002\u019d\u019e\u0005\u00be`\u0002\u019e\u019f\u0007\u000f",
    "\u0002\u0002\u019f\u01a0\u0005\u0016\f\u0002\u01a0\u01a1\u0007\u0010",
    "\u0002\u0002\u01a1\u01a2\u0007\u00ac\u0002\u0002\u01a2\u01a3\u0005\u0012",
    "\n\u0002\u01a3\u01a4\u0005\u00fe\u0080\u0002\u01a4\u0011\u0003\u0002",
    "\u0002\u0002\u01a5\u01aa\u0005\u0014\u000b\u0002\u01a6\u01a7\u0007\u00f9",
    "\u0002\u0002\u01a7\u01a9\u0005\u0014\u000b\u0002\u01a8\u01a6\u0003\u0002",
    "\u0002\u0002\u01a9\u01ac\u0003\u0002\u0002\u0002\u01aa\u01a8\u0003\u0002",
    "\u0002\u0002\u01aa\u01ab\u0003\u0002\u0002\u0002\u01ab\u0013\u0003\u0002",
    "\u0002\u0002\u01ac\u01aa\u0003\u0002\u0002\u0002\u01ad\u01ae\u0007\u00eb",
    "\u0002\u0002\u01ae\u01b0\u0007\u0011\u0002\u0002\u01af\u01ad\u0003\u0002",
    "\u0002\u0002\u01af\u01b0\u0003\u0002\u0002\u0002\u01b0\u01b1\u0003\u0002",
    "\u0002\u0002\u01b1\u01b3\u0005\u001a\u000e\u0002\u01b2\u01b4\u0005L",
    "\'\u0002\u01b3\u01b2\u0003\u0002\u0002\u0002\u01b3\u01b4\u0003\u0002",
    "\u0002\u0002\u01b4\u01b6\u0003\u0002\u0002\u0002\u01b5\u01b7\u0005N",
    "(\u0002\u01b6\u01b5\u0003\u0002\u0002\u0002\u01b6\u01b7\u0003\u0002",
    "\u0002\u0002\u01b7\u0015\u0003\u0002\u0002\u0002\u01b8\u01ba\t\t\u0002",
    "\u0002\u01b9\u01bb\u0005\u0018\r\u0002\u01ba\u01b9\u0003\u0002\u0002",
    "\u0002\u01ba\u01bb\u0003\u0002\u0002\u0002\u01bb\u01bc\u0003\u0002\u0002",
    "\u0002\u01bc\u01bd\u0007u\u0002\u0002\u01bd\u01be\u0007\u00eb\u0002",
    "\u0002\u01be\u0017\u0003\u0002\u0002\u0002\u01bf\u01c0\u0007\u009c\u0002",
    "\u0002\u01c0\u01c3\u0007\u00eb\u0002\u0002\u01c1\u01c2\u0007$\u0002",
    "\u0002\u01c2\u01c4\u0007\u00eb\u0002\u0002\u01c3\u01c1\u0003\u0002\u0002",
    "\u0002\u01c3\u01c4\u0003\u0002\u0002\u0002\u01c4\u01cd\u0003\u0002\u0002",
    "\u0002\u01c5\u01c6\u00073\u0002\u0002\u01c6\u01c9\u0007\u00eb\u0002",
    "\u0002\u01c7\u01c8\u0007$\u0002\u0002\u01c8\u01ca\u0007\u00eb\u0002",
    "\u0002\u01c9\u01c7\u0003\u0002\u0002\u0002\u01c9\u01ca\u0003\u0002\u0002",
    "\u0002\u01ca\u01cc\u0003\u0002\u0002\u0002\u01cb\u01c5\u0003\u0002\u0002",
    "\u0002\u01cc\u01cf\u0003\u0002\u0002\u0002\u01cd\u01cb\u0003\u0002\u0002",
    "\u0002\u01cd\u01ce\u0003\u0002\u0002\u0002\u01ce\u0019\u0003\u0002\u0002",
    "\u0002\u01cf\u01cd\u0003\u0002\u0002\u0002\u01d0\u01d1\u0007\u00ad\u0002",
    "\u0002\u01d1\u01d2\u0005\n\u0006\u0002\u01d2\u01d3\u0007\u0019\u0002",
    "\u0002\u01d3\u01d5\u0003\u0002\u0002\u0002\u01d4\u01d0\u0003\u0002\u0002",
    "\u0002\u01d4\u01d5\u0003\u0002\u0002\u0002\u01d5\u01d6\u0003\u0002\u0002",
    "\u0002\u01d6\u01d7\u0005\u001e\u0010\u0002\u01d7\u01db\u0005\u001c\u000f",
    "\u0002\u01d8\u01da\u0005\u001c\u000f\u0002\u01d9\u01d8\u0003\u0002\u0002",
    "\u0002\u01da\u01dd\u0003\u0002\u0002\u0002\u01db\u01d9\u0003\u0002\u0002",
    "\u0002\u01db\u01dc\u0003\u0002\u0002\u0002\u01dc\u001b\u0003\u0002\u0002",
    "\u0002\u01dd\u01db\u0003\u0002\u0002\u0002\u01de\u01e0\t\u0004\u0002",
    "\u0002\u01df\u01de\u0003\u0002\u0002\u0002\u01df\u01e0\u0003\u0002\u0002",
    "\u0002\u01e0\u01e1\u0003\u0002\u0002\u0002\u01e1\u01e6\u0007\u00eb\u0002",
    "\u0002\u01e2\u01e3\u0007\u0003\u0002\u0002\u01e3\u01e4\u0005\n\u0006",
    "\u0002\u01e4\u01e5\u0007\u0004\u0002\u0002\u01e5\u01e7\u0003\u0002\u0002",
    "\u0002\u01e6\u01e2\u0003\u0002\u0002\u0002\u01e6\u01e7\u0003\u0002\u0002",
    "\u0002\u01e7\u001d\u0003\u0002\u0002\u0002\u01e8\u01ea\u0007\u00eb\u0002",
    "\u0002\u01e9\u01eb\t\n\u0002\u0002\u01ea\u01e9\u0003\u0002\u0002\u0002",
    "\u01ea\u01eb\u0003\u0002\u0002\u0002\u01eb\u001f\u0003\u0002\u0002\u0002",
    "\u01ec\u01ed\u0005\u00f8}\u0002\u01ed\u01ee\u0005\u00be`\u0002\u01ee",
    "\u01ef\u0007\u000f\u0002\u0002\u01ef\u01f0\u0005&\u0014\u0002\u01f0",
    "\u01f1\u0007\u0010\u0002\u0002\u01f1\u01f2\u0007\u00ac\u0002\u0002\u01f2",
    "\u01f3\u0005\"\u0012\u0002\u01f3\u01f4\u0005\u00fc\u007f\u0002\u01f4",
    "!\u0003\u0002\u0002\u0002\u01f5\u01fa\u0005$\u0013\u0002\u01f6\u01f7",
    "\u0007\u00f9\u0002\u0002\u01f7\u01f9\u0005$\u0013\u0002\u01f8\u01f6",
    "\u0003\u0002\u0002\u0002\u01f9\u01fc\u0003\u0002\u0002\u0002\u01fa\u01f8",
    "\u0003\u0002\u0002\u0002\u01fa\u01fb\u0003\u0002\u0002\u0002\u01fb#",
    "\u0003\u0002\u0002\u0002\u01fc\u01fa\u0003\u0002\u0002\u0002\u01fd\u01fe",
    "\u0007\u00eb\u0002\u0002\u01fe\u0200\u0007\u0011\u0002\u0002\u01ff\u01fd",
    "\u0003\u0002\u0002\u0002\u01ff\u0200\u0003\u0002\u0002\u0002\u0200\u0205",
    "\u0003\u0002\u0002\u0002\u0201\u0202\u0007\u00ad\u0002\u0002\u0202\u0203",
    "\u0005\n\u0006\u0002\u0203\u0204\u0007\u0019\u0002\u0002\u0204\u0206",
    "\u0003\u0002\u0002\u0002\u0205\u0201\u0003\u0002\u0002\u0002\u0205\u0206",
    "\u0003\u0002\u0002\u0002\u0206\u0207\u0003\u0002\u0002\u0002\u0207\u0209",
    "\u0005\n\u0006\u0002\u0208\u020a\u0005L\'\u0002\u0209\u0208\u0003\u0002",
    "\u0002\u0002\u0209\u020a\u0003\u0002\u0002\u0002\u020a\u020c\u0003\u0002",
    "\u0002\u0002\u020b\u020d\u0005N(\u0002\u020c\u020b\u0003\u0002\u0002",
    "\u0002\u020c\u020d\u0003\u0002\u0002\u0002\u020d%\u0003\u0002\u0002",
    "\u0002\u020e\u020f\t\t\u0002\u0002\u020f\u0214\u0005(\u0015\u0002\u0210",
    "\u0211\u00073\u0002\u0002\u0211\u0213\u0005(\u0015\u0002\u0212\u0210",
    "\u0003\u0002\u0002\u0002\u0213\u0216\u0003\u0002\u0002\u0002\u0214\u0212",
    "\u0003\u0002\u0002\u0002\u0214\u0215\u0003\u0002\u0002\u0002\u0215\'",
    "\u0003\u0002\u0002\u0002\u0216\u0214\u0003\u0002\u0002\u0002\u0217\u021a",
    "\u0005\u00c0a\u0002\u0218\u0219\u0007$\u0002\u0002\u0219\u021b\u0007",
    "\u00eb\u0002\u0002\u021a\u0218\u0003\u0002\u0002\u0002\u021a\u021b\u0003",
    "\u0002\u0002\u0002\u021b)\u0003\u0002\u0002\u0002\u021c\u0220\u0005",
    ",\u0017\u0002\u021d\u0220\u0005 \u0011\u0002\u021e\u0220\u0005\u0010",
    "\t\u0002\u021f\u021c\u0003\u0002\u0002\u0002\u021f\u021d\u0003\u0002",
    "\u0002\u0002\u021f\u021e\u0003\u0002\u0002\u0002\u0220+\u0003\u0002",
    "\u0002\u0002\u0221\u0222\u0007p\u0002\u0002\u0222\u0223\u0007o\u0002",
    "\u0002\u0223\u0224\u0005\u00c4c\u0002\u0224\u022d\u0007\u000f\u0002",
    "\u0002\u0225\u022a\u0005.\u0018\u0002\u0226\u0227\u00073\u0002\u0002",
    "\u0227\u0229\u0005.\u0018\u0002\u0228\u0226\u0003\u0002\u0002\u0002",
    "\u0229\u022c\u0003\u0002\u0002\u0002\u022a\u0228\u0003\u0002\u0002\u0002",
    "\u022a\u022b\u0003\u0002\u0002\u0002\u022b\u022e\u0003\u0002\u0002\u0002",
    "\u022c\u022a\u0003\u0002\u0002\u0002\u022d\u0225\u0003\u0002\u0002\u0002",
    "\u022d\u022e\u0003\u0002\u0002\u0002\u022e\u022f\u0003\u0002\u0002\u0002",
    "\u022f\u0232\u0007\u0010\u0002\u0002\u0230\u0231\u0007\u00bd\u0002\u0002",
    "\u0231\u0233\u0005\u00dan\u0002\u0232\u0230\u0003\u0002\u0002\u0002",
    "\u0232\u0233\u0003\u0002\u0002\u0002\u0233\u0234\u0003\u0002\u0002\u0002",
    "\u0234\u0235\u0007\u00ac\u0002\u0002\u0235\u0236\u0005\n\u0006\u0002",
    "\u0236\u0237\u0007v\u0002\u0002\u0237\u0238\u0007o\u0002\u0002\u0238",
    "-\u0003\u0002\u0002\u0002\u0239\u023a\u0005\u00c0a\u0002\u023a\u023d",
    "\u0005\u00dan\u0002\u023b\u023c\u0007\u00d0\u0002\u0002\u023c\u023e",
    "\u0005\u00ccg\u0002\u023d\u023b\u0003\u0002\u0002\u0002\u023d\u023e",
    "\u0003\u0002\u0002\u0002\u023e/\u0003\u0002\u0002\u0002\u023f\u0240",
    "\u0005\u00c4c\u0002\u0240\u024f\u0007\u000f\u0002\u0002\u0241\u0244",
    "\u0005\u00ccg\u0002\u0242\u0244\u0007h\u0002\u0002\u0243\u0241\u0003",
    "\u0002\u0002\u0002\u0243\u0242\u0003\u0002\u0002\u0002\u0244\u024c\u0003",
    "\u0002\u0002\u0002\u0245\u0248\u00073\u0002\u0002\u0246\u0249\u0005",
    "\u00ccg\u0002\u0247\u0249\u0007h\u0002\u0002\u0248\u0246\u0003\u0002",
    "\u0002\u0002\u0248\u0247\u0003\u0002\u0002\u0002\u0249\u024b\u0003\u0002",
    "\u0002\u0002\u024a\u0245\u0003\u0002\u0002\u0002\u024b\u024e\u0003\u0002",
    "\u0002\u0002\u024c\u024a\u0003\u0002\u0002\u0002\u024c\u024d\u0003\u0002",
    "\u0002\u0002\u024d\u0250\u0003\u0002\u0002\u0002\u024e\u024c\u0003\u0002",
    "\u0002\u0002\u024f\u0243\u0003\u0002\u0002\u0002\u024f\u0250\u0003\u0002",
    "\u0002\u0002\u0250\u0251\u0003\u0002\u0002\u0002\u0251\u0252\u0007\u0010",
    "\u0002\u0002\u02521\u0003\u0002\u0002\u0002\u0253\u0254\u0007O\u0002",
    "\u0002\u0254\u0255\u0007\u000f\u0002\u0002\u0255\u0258\u0005\n\u0006",
    "\u0002\u0256\u0257\u00073\u0002\u0002\u0257\u0259\u0005\b\u0005\u0002",
    "\u0258\u0256\u0003\u0002\u0002\u0002\u0258\u0259\u0003\u0002\u0002\u0002",
    "\u0259\u025a\u0003\u0002\u0002\u0002\u025a\u025b\u0007\u0010\u0002\u0002",
    "\u025b\u030b\u0003\u0002\u0002\u0002\u025c\u025d\u0007|\u0002\u0002",
    "\u025d\u025e\u0007\u000f\u0002\u0002\u025e\u025f\u0005\n\u0006\u0002",
    "\u025f\u0260\u0007\u0010\u0002\u0002\u0260\u030b\u0003\u0002\u0002\u0002",
    "\u0261\u0262\u0007}\u0002\u0002\u0262\u0263\u0007\u000f\u0002\u0002",
    "\u0263\u0264\u0005\n\u0006\u0002\u0264\u0265\u0007\u0010\u0002\u0002",
    "\u0265\u030b\u0003\u0002\u0002\u0002\u0266\u0267\u0007J\u0002\u0002",
    "\u0267\u0268\u0007\u000f\u0002\u0002\u0268\u0269\u0005\n\u0006\u0002",
    "\u0269\u026a\u0007\u0010\u0002\u0002\u026a\u030b\u0003\u0002\u0002\u0002",
    "\u026b\u026c\u0007a\u0002\u0002\u026c\u026d\u0007\u000f\u0002\u0002",
    "\u026d\u026e\u0005\n\u0006\u0002\u026e\u026f\u0007\u0010\u0002\u0002",
    "\u026f\u030b\u0003\u0002\u0002\u0002\u0270\u0271\u0007L\u0002\u0002",
    "\u0271\u0272\u0007\u000f\u0002\u0002\u0272\u0273\u0005\n\u0006\u0002",
    "\u0273\u0274\u0007\u0010\u0002\u0002\u0274\u030b\u0003\u0002\u0002\u0002",
    "\u0275\u0276\u0007M\u0002\u0002\u0276\u0277\u0007\u000f\u0002\u0002",
    "\u0277\u0278\u0005\n\u0006\u0002\u0278\u0279\u00073\u0002\u0002\u0279",
    "\u027a\u0005\n\u0006\u0002\u027a\u027b\u0007\u0010\u0002\u0002\u027b",
    "\u030b\u0003\u0002\u0002\u0002\u027c\u027d\u0007N\u0002\u0002\u027d",
    "\u027e\u0007\u000f\u0002\u0002\u027e\u0281\u0005\n\u0006\u0002\u027f",
    "\u0280\u00073\u0002\u0002\u0280\u0282\u0005\b\u0005\u0002\u0281\u027f",
    "\u0003\u0002\u0002\u0002\u0281\u0282\u0003\u0002\u0002\u0002\u0282\u0283",
    "\u0003\u0002\u0002\u0002\u0283\u0284\u0007\u0010\u0002\u0002\u0284\u030b",
    "\u0003\u0002\u0002\u0002\u0285\u0286\u0007P\u0002\u0002\u0286\u0287",
    "\u0007\u000f\u0002\u0002\u0287\u0288\u0005\n\u0006\u0002\u0288\u0289",
    "\u00073\u0002\u0002\u0289\u028a\u0005\n\u0006\u0002\u028a\u028b\u0007",
    "\u0010\u0002\u0002\u028b\u030b\u0003\u0002\u0002\u0002\u028c\u028d\u0007",
    "~\u0002\u0002\u028d\u028e\u0007\u000f\u0002\u0002\u028e\u028f\u0005",
    "\n\u0006\u0002\u028f\u0290\u0007\u0010\u0002\u0002\u0290\u030b\u0003",
    "\u0002\u0002\u0002\u0291\u0292\u0007R\u0002\u0002\u0292\u0293\u0007",
    "\u000f\u0002\u0002\u0293\u0294\u0005\n\u0006\u0002\u0294\u0295\u0007",
    "\u0010\u0002\u0002\u0295\u030b\u0003\u0002\u0002\u0002\u0296\u0297\u0007",
    ")\u0002\u0002\u0297\u0298\u0007\u000f\u0002\u0002\u0298\u0299\u0005",
    "\n\u0006\u0002\u0299\u029a\u00073\u0002\u0002\u029a\u029b\u0005\n\u0006",
    "\u0002\u029b\u029c\u00073\u0002\u0002\u029c\u029d\u0005\n\u0006\u0002",
    "\u029d\u029e\u0007\u0010\u0002\u0002\u029e\u030b\u0003\u0002\u0002\u0002",
    "\u029f\u02a0\u0007T\u0002\u0002\u02a0\u02a1\u0007\u000f\u0002\u0002",
    "\u02a1\u02a2\u0005\n\u0006\u0002\u02a2\u02a3\u0007\u0010\u0002\u0002",
    "\u02a3\u030b\u0003\u0002\u0002\u0002\u02a4\u02a5\u0007x\u0002\u0002",
    "\u02a5\u02a6\u0007\u000f\u0002\u0002\u02a6\u02a7\u0005\n\u0006\u0002",
    "\u02a7\u02a8\u0007\u0010\u0002\u0002\u02a8\u030b\u0003\u0002\u0002\u0002",
    "\u02a9\u02aa\u0007y\u0002\u0002\u02aa\u02ab\u0007\u000f\u0002\u0002",
    "\u02ab\u02ac\u0005\n\u0006\u0002\u02ac\u02ad\u0007\u0010\u0002\u0002",
    "\u02ad\u030b\u0003\u0002\u0002\u0002\u02ae\u02af\u0007U\u0002\u0002",
    "\u02af\u02b0\u0007\u000f\u0002\u0002\u02b0\u02b1\u0005\n\u0006\u0002",
    "\u02b1\u02b2\u0007\u0010\u0002\u0002\u02b2\u030b\u0003\u0002\u0002\u0002",
    "\u02b3\u02b4\u0007V\u0002\u0002\u02b4\u02b5\u0007\u000f\u0002\u0002",
    "\u02b5\u02b6\u0005\n\u0006\u0002\u02b6\u02b7\u0007\u0010\u0002\u0002",
    "\u02b7\u030b\u0003\u0002\u0002\u0002\u02b8\u02b9\u0007W\u0002\u0002",
    "\u02b9\u02ba\u0007\u000f\u0002\u0002\u02ba\u02bd\u0005\n\u0006\u0002",
    "\u02bb\u02bc\u00073\u0002\u0002\u02bc\u02be\u0005\b\u0005\u0002\u02bd",
    "\u02bb\u0003\u0002\u0002\u0002\u02bd\u02be\u0003\u0002\u0002\u0002\u02be",
    "\u02c1\u0003\u0002\u0002\u0002\u02bf\u02c0\u00073\u0002\u0002\u02c0",
    "\u02c2\u0005\b\u0005\u0002\u02c1\u02bf\u0003\u0002\u0002\u0002\u02c1",
    "\u02c2\u0003\u0002\u0002\u0002\u02c2\u02c3\u0003\u0002\u0002\u0002\u02c3",
    "\u02c4\u0007\u0010\u0002\u0002\u02c4\u030b\u0003\u0002\u0002\u0002\u02c5",
    "\u02c6\u0007z\u0002\u0002\u02c6\u02c7\u0007\u000f\u0002\u0002\u02c7",
    "\u02c8\u0005\n\u0006\u0002\u02c8\u02c9\u00073\u0002\u0002\u02c9\u02cc",
    "\u0005\n\u0006\u0002\u02ca\u02cb\u00073\u0002\u0002\u02cb\u02cd\u0005",
    "\b\u0005\u0002\u02cc\u02ca\u0003\u0002\u0002\u0002\u02cc\u02cd\u0003",
    "\u0002\u0002\u0002\u02cd\u02d0\u0003\u0002\u0002\u0002\u02ce\u02cf\u0007",
    "3\u0002\u0002\u02cf\u02d1\u0005\b\u0005\u0002\u02d0\u02ce\u0003\u0002",
    "\u0002\u0002\u02d0\u02d1\u0003\u0002\u0002\u0002\u02d1\u02d2\u0003\u0002",
    "\u0002\u0002\u02d2\u02d3\u0007\u0010\u0002\u0002\u02d3\u030b\u0003\u0002",
    "\u0002\u0002\u02d4\u02d5\u0007{\u0002\u0002\u02d5\u02d6\u0007\u000f",
    "\u0002\u0002\u02d6\u02d7\u0005\n\u0006\u0002\u02d7\u02d8\u00073\u0002",
    "\u0002\u02d8\u02db\u0005\n\u0006\u0002\u02d9\u02da\u00073\u0002\u0002",
    "\u02da\u02dc\u0005\b\u0005\u0002\u02db\u02d9\u0003\u0002\u0002\u0002",
    "\u02db\u02dc\u0003\u0002\u0002\u0002\u02dc\u02dd\u0003\u0002\u0002\u0002",
    "\u02dd\u02de\u0007\u0010\u0002\u0002\u02de\u030b\u0003\u0002\u0002\u0002",
    "\u02df\u02e0\u0007d\u0002\u0002\u02e0\u02e1\u0007\u000f\u0002\u0002",
    "\u02e1\u02e2\u0005\n\u0006\u0002\u02e2\u02e3\u00073\u0002\u0002\u02e3",
    "\u02e4\u0005\n\u0006\u0002\u02e4\u02e5\u0007\u0010\u0002\u0002\u02e5",
    "\u030b\u0003\u0002\u0002\u0002\u02e6\u02e7\u0007,\u0002\u0002\u02e7",
    "\u02e8\u0007\u000f\u0002\u0002\u02e8\u02e9\u0005\n\u0006\u0002\u02e9",
    "\u02ea\u0007\u0010\u0002\u0002\u02ea\u030b\u0003\u0002\u0002\u0002\u02eb",
    "\u02ec\u0007f\u0002\u0002\u02ec\u02ed\u0007\u000f\u0002\u0002\u02ed",
    "\u02ee\u0005\n\u0006\u0002\u02ee\u02ef\u00073\u0002\u0002\u02ef\u02f0",
    "\u0005\n\u0006\u0002\u02f0\u02f1\u0007\u0010\u0002\u0002\u02f1\u030b",
    "\u0003\u0002\u0002\u0002\u02f2\u02f3\u0007Q\u0002\u0002\u02f3\u02f4",
    "\u0007\u000f\u0002\u0002\u02f4\u02f5\u0005\n\u0006\u0002\u02f5\u02f6",
    "\u00073\u0002\u0002\u02f6\u02f7\u0005\n\u0006\u0002\u02f7\u02f8\u0007",
    "\u0010\u0002\u0002\u02f8\u030b\u0003\u0002\u0002\u0002\u02f9\u030b\u0005",
    "4\u001b\u0002\u02fa\u030b\u0005:\u001e\u0002\u02fb\u030b\u0005<\u001f",
    "\u0002\u02fc\u030b\u0005P)\u0002\u02fd\u02fe\u0007\u0097\u0002\u0002",
    "\u02fe\u02ff\u0007\u000f\u0002\u0002\u02ff\u0300\u0005\n\u0006\u0002",
    "\u0300\u0301\u0007\u0010\u0002\u0002\u0301\u030b\u0003\u0002\u0002\u0002",
    "\u0302\u0303\u0007\u0098\u0002\u0002\u0303\u0304\u0007\u000f\u0002\u0002",
    "\u0304\u0305\u0005\n\u0006\u0002\u0305\u0306\u0007\u0010\u0002\u0002",
    "\u0306\u030b\u0003\u0002\u0002\u0002\u0307\u030b\u0005H%\u0002\u0308",
    "\u030b\u0005J&\u0002\u0309\u030b\u0005F$\u0002\u030a\u0253\u0003\u0002",
    "\u0002\u0002\u030a\u025c\u0003\u0002\u0002\u0002\u030a\u0261\u0003\u0002",
    "\u0002\u0002\u030a\u0266\u0003\u0002\u0002\u0002\u030a\u026b\u0003\u0002",
    "\u0002\u0002\u030a\u0270\u0003\u0002\u0002\u0002\u030a\u0275\u0003\u0002",
    "\u0002\u0002\u030a\u027c\u0003\u0002\u0002\u0002\u030a\u0285\u0003\u0002",
    "\u0002\u0002\u030a\u028c\u0003\u0002\u0002\u0002\u030a\u0291\u0003\u0002",
    "\u0002\u0002\u030a\u0296\u0003\u0002\u0002\u0002\u030a\u029f\u0003\u0002",
    "\u0002\u0002\u030a\u02a4\u0003\u0002\u0002\u0002\u030a\u02a9\u0003\u0002",
    "\u0002\u0002\u030a\u02ae\u0003\u0002\u0002\u0002\u030a\u02b3\u0003\u0002",
    "\u0002\u0002\u030a\u02b8\u0003\u0002\u0002\u0002\u030a\u02c5\u0003\u0002",
    "\u0002\u0002\u030a\u02d4\u0003\u0002\u0002\u0002\u030a\u02df\u0003\u0002",
    "\u0002\u0002\u030a\u02e6\u0003\u0002\u0002\u0002\u030a\u02eb\u0003\u0002",
    "\u0002\u0002\u030a\u02f2\u0003\u0002\u0002\u0002\u030a\u02f9\u0003\u0002",
    "\u0002\u0002\u030a\u02fa\u0003\u0002\u0002\u0002\u030a\u02fb\u0003\u0002",
    "\u0002\u0002\u030a\u02fc\u0003\u0002\u0002\u0002\u030a\u02fd\u0003\u0002",
    "\u0002\u0002\u030a\u0302\u0003\u0002\u0002\u0002\u030a\u0307\u0003\u0002",
    "\u0002\u0002\u030a\u0308\u0003\u0002\u0002\u0002\u030a\u0309\u0003\u0002",
    "\u0002\u0002\u030b3\u0003\u0002\u0002\u0002\u030c\u030d\u0007\u000f",
    "\u0002\u0002\u030d\u030e\u0005\n\u0006\u0002\u030e\u030f\u0007\u0010",
    "\u0002\u0002\u030f\u0313\u0003\u0002\u0002\u0002\u0310\u0313\u0005\u00c0",
    "a\u0002\u0311\u0313\u0005\u00ccg\u0002\u0312\u030c\u0003\u0002\u0002",
    "\u0002\u0312\u0310\u0003\u0002\u0002\u0002\u0312\u0311\u0003\u0002\u0002",
    "\u0002\u03135\u0003\u0002\u0002\u0002\u0314\u0315\u0007\u0003\u0002",
    "\u0002\u0315\u031a\u0007\u00eb\u0002\u0002\u0316\u0317\u00073\u0002",
    "\u0002\u0317\u0319\u0007\u00eb\u0002\u0002\u0318\u0316\u0003\u0002\u0002",
    "\u0002\u0319\u031c\u0003\u0002\u0002\u0002\u031a\u0318\u0003\u0002\u0002",
    "\u0002\u031a\u031b\u0003\u0002\u0002\u0002\u031b\u031d\u0003\u0002\u0002",
    "\u0002\u031c\u031a\u0003\u0002\u0002\u0002\u031d\u031e\u0007\u0004\u0002",
    "\u0002\u031e7\u0003\u0002\u0002\u0002\u031f\u0320\u0007\u0012\u0002",
    "\u0002\u0320\u0325\u0005\u00ccg\u0002\u0321\u0322\u00073\u0002\u0002",
    "\u0322\u0324\u0005\u00ccg\u0002\u0323\u0321\u0003\u0002\u0002\u0002",
    "\u0324\u0327\u0003\u0002\u0002\u0002\u0325\u0323\u0003\u0002\u0002\u0002",
    "\u0325\u0326\u0003\u0002\u0002\u0002\u0326\u0328\u0003\u0002\u0002\u0002",
    "\u0327\u0325\u0003\u0002\u0002\u0002\u0328\u0329\u0007\u0013\u0002\u0002",
    "\u03299\u0003\u0002\u0002\u0002\u032a\u032b\u0007\u0017\u0002\u0002",
    "\u032b\u032c\u0007\u000f\u0002\u0002\u032c\u032d\u0005\u00c6d\u0002",
    "\u032d\u0330\u0007\u000f\u0002\u0002\u032e\u0331\u0005\u00c2b\u0002",
    "\u032f\u0331\u0005\u00ccg\u0002\u0330\u032e\u0003\u0002\u0002\u0002",
    "\u0330\u032f\u0003\u0002\u0002\u0002\u0330\u0331\u0003\u0002\u0002\u0002",
    "\u0331\u0339\u0003\u0002\u0002\u0002\u0332\u0335\u00073\u0002\u0002",
    "\u0333\u0336\u0005\u00c2b\u0002\u0334\u0336\u0005\u00ccg\u0002\u0335",
    "\u0333\u0003\u0002\u0002\u0002\u0335\u0334\u0003\u0002\u0002\u0002\u0336",
    "\u0338\u0003\u0002\u0002\u0002\u0337\u0332\u0003\u0002\u0002\u0002\u0338",
    "\u033b\u0003\u0002\u0002\u0002\u0339\u0337\u0003\u0002\u0002\u0002\u0339",
    "\u033a\u0003\u0002\u0002\u0002\u033a\u033c\u0003\u0002\u0002\u0002\u033b",
    "\u0339\u0003\u0002\u0002\u0002\u033c\u033f\u0007\u0010\u0002\u0002\u033d",
    "\u033e\u0007\u00e3\u0002\u0002\u033e\u0340\u0007\u00ea\u0002\u0002\u033f",
    "\u033d\u0003\u0002\u0002\u0002\u033f\u0340\u0003\u0002\u0002\u0002\u0340",
    "\u0343\u0003\u0002\u0002\u0002\u0341\u0342\u0007\u00bd\u0002\u0002\u0342",
    "\u0344\u0005\u00f2z\u0002\u0343\u0341\u0003\u0002\u0002\u0002\u0343",
    "\u0344\u0003\u0002\u0002\u0002\u0344\u0345\u0003\u0002\u0002\u0002\u0345",
    "\u0346\u0007\u0010\u0002\u0002\u0346;\u0003\u0002\u0002\u0002\u0347",
    "\u0348\u0007\u00cd\u0002\u0002\u0348\u0349\u0007\u000f\u0002\u0002\u0349",
    "\u034a\u0005\n\u0006\u0002\u034a\u034d\u00073\u0002\u0002\u034b\u034e",
    "\u0005\u00d2j\u0002\u034c\u034e\u0005\u00d4k\u0002\u034d\u034b\u0003",
    "\u0002\u0002\u0002\u034d\u034c\u0003\u0002\u0002\u0002\u034e\u0351\u0003",
    "\u0002\u0002\u0002\u034f\u0350\u00073\u0002\u0002\u0350\u0352\u0007",
    "\u00ea\u0002\u0002\u0351\u034f\u0003\u0002\u0002\u0002\u0351\u0352\u0003",
    "\u0002\u0002\u0002\u0352\u0353\u0003\u0002\u0002\u0002\u0353\u0354\u0007",
    "\u0010\u0002\u0002\u0354=\u0003\u0002\u0002\u0002\u0355\u0356\u0007",
    "\u00c3\u0002\u0002\u0356\u0358\u0007\u000f\u0002\u0002\u0357\u0359\u0005",
    "\n\u0006\u0002\u0358\u0357\u0003\u0002\u0002\u0002\u0358\u0359\u0003",
    "\u0002\u0002\u0002\u0359\u035a\u0003\u0002\u0002\u0002\u035a\u035b\u0007",
    "\u0010\u0002\u0002\u035b?\u0003\u0002\u0002\u0002\u035c\u035d\u0007",
    "\u0099\u0002\u0002\u035d\u035e\u0007\u000f\u0002\u0002\u035e\u035f\u0005",
    "\n\u0006\u0002\u035f\u0360\u00073\u0002\u0002\u0360\u0361\u0007\u00e4",
    "\u0002\u0002\u0361\u0362\u0007\u0010\u0002\u0002\u0362A\u0003\u0002",
    "\u0002\u0002\u0363\u0364\u0007\u0096\u0002\u0002\u0364\u0365\u0007\u000f",
    "\u0002\u0002\u0365\u0368\u0005\n\u0006\u0002\u0366\u0367\u00073\u0002",
    "\u0002\u0367\u0369\t\u000b\u0002\u0002\u0368\u0366\u0003\u0002\u0002",
    "\u0002\u0368\u0369\u0003\u0002\u0002\u0002\u0369\u036a\u0003\u0002\u0002",
    "\u0002\u036a\u036b\u0007\u0010\u0002\u0002\u036bC\u0003\u0002\u0002",
    "\u0002\u036c\u036d\u0007\u00c6\u0002\u0002\u036d\u036e\u0007\u000f\u0002",
    "\u0002\u036e\u0371\u0007\u00ea\u0002\u0002\u036f\u0370\u00073\u0002",
    "\u0002\u0370\u0372\t\f\u0002\u0002\u0371\u036f\u0003\u0002\u0002\u0002",
    "\u0371\u0372\u0003\u0002\u0002\u0002\u0372\u0378\u0003\u0002\u0002\u0002",
    "\u0373\u0376\u00073\u0002\u0002\u0374\u0377\u0005\n\u0006\u0002\u0375",
    "\u0377\u0007h\u0002\u0002\u0376\u0374\u0003\u0002\u0002\u0002\u0376",
    "\u0375\u0003\u0002\u0002\u0002\u0377\u0379\u0003\u0002\u0002\u0002\u0378",
    "\u0373\u0003\u0002\u0002\u0002\u0378\u0379\u0003\u0002\u0002\u0002\u0379",
    "\u037c\u0003\u0002\u0002\u0002\u037a\u037b\u00073\u0002\u0002\u037b",
    "\u037d\t\r\u0002\u0002\u037c\u037a\u0003\u0002\u0002\u0002\u037c\u037d",
    "\u0003\u0002\u0002\u0002\u037d\u037e\u0003\u0002\u0002\u0002\u037e\u037f",
    "\u0007\u0010\u0002\u0002\u037fE\u0003\u0002\u0002\u0002\u0380\u0381",
    "\u00077\u0002\u0002\u0381\u0382\u0007\u000f\u0002\u0002\u0382\u0384",
    "\u0005\n\u0006\u0002\u0383\u0385\u0005L\'\u0002\u0384\u0383\u0003\u0002",
    "\u0002\u0002\u0384\u0385\u0003\u0002\u0002\u0002\u0385\u0387\u0003\u0002",
    "\u0002\u0002\u0386\u0388\u0005N(\u0002\u0387\u0386\u0003\u0002\u0002",
    "\u0002\u0387\u0388\u0003\u0002\u0002\u0002\u0388\u038b\u0003\u0002\u0002",
    "\u0002\u0389\u038a\u0007;\u0002\u0002\u038a\u038c\u0005\n\u0006\u0002",
    "\u038b\u0389\u0003\u0002\u0002\u0002\u038b\u038c\u0003\u0002\u0002\u0002",
    "\u038c\u038e\u0003\u0002\u0002\u0002\u038d\u038f\t\u000e\u0002\u0002",
    "\u038e\u038d\u0003\u0002\u0002\u0002\u038e\u038f\u0003\u0002\u0002\u0002",
    "\u038f\u0390\u0003\u0002\u0002\u0002\u0390\u0391\u0007\u0010\u0002\u0002",
    "\u0391G\u0003\u0002\u0002\u0002\u0392\u0393\u0007\u00d1\u0002\u0002",
    "\u0393\u0394\u0007\u000f\u0002\u0002\u0394\u0395\u0005\n\u0006\u0002",
    "\u0395\u0396\u00073\u0002\u0002\u0396\u03a0\u0007\u00eb\u0002\u0002",
    "\u0397\u0398\u0007\u00da\u0002\u0002\u0398\u039d\u0005\u00c2b\u0002",
    "\u0399\u039a\u00073\u0002\u0002\u039a\u039c\u0005\u00c2b\u0002\u039b",
    "\u0399\u0003\u0002\u0002\u0002\u039c\u039f\u0003\u0002\u0002\u0002\u039d",
    "\u039b\u0003\u0002\u0002\u0002\u039d\u039e\u0003\u0002\u0002\u0002\u039e",
    "\u03a1\u0003\u0002\u0002\u0002\u039f\u039d\u0003\u0002\u0002\u0002\u03a0",
    "\u0397\u0003\u0002\u0002\u0002\u03a0\u03a1\u0003\u0002\u0002\u0002\u03a1",
    "\u03a3\u0003\u0002\u0002\u0002\u03a2\u03a4\t\u000f\u0002\u0002\u03a3",
    "\u03a2\u0003\u0002\u0002\u0002\u03a3\u03a4\u0003\u0002\u0002\u0002\u03a4",
    "\u03a5\u0003\u0002\u0002\u0002\u03a5\u03a6\u0007\u0010\u0002\u0002\u03a6",
    "I\u0003\u0002\u0002\u0002\u03a7\u03a8\u0007\u00d2\u0002\u0002\u03a8",
    "\u03a9\u0007\u000f\u0002\u0002\u03a9\u03aa\u0005\n\u0006\u0002\u03aa",
    "\u03ab\u00073\u0002\u0002\u03ab\u03b5\u0007\u00eb\u0002\u0002\u03ac",
    "\u03ad\u0007\u009c\u0002\u0002\u03ad\u03b2\u0005\u00c2b\u0002\u03ae",
    "\u03af\u00073\u0002\u0002\u03af\u03b1\u0005\u00c2b\u0002\u03b0\u03ae",
    "\u0003\u0002\u0002\u0002\u03b1\u03b4\u0003\u0002\u0002\u0002\u03b2\u03b0",
    "\u0003\u0002\u0002\u0002\u03b2\u03b3\u0003\u0002\u0002\u0002\u03b3\u03b6",
    "\u0003\u0002\u0002\u0002\u03b4\u03b2\u0003\u0002\u0002\u0002\u03b5\u03ac",
    "\u0003\u0002\u0002\u0002\u03b5\u03b6\u0003\u0002\u0002\u0002\u03b6\u03b9",
    "\u0003\u0002\u0002\u0002\u03b7\u03b8\u0007u\u0002\u0002\u03b8\u03ba",
    "\u0007\u00eb\u0002\u0002\u03b9\u03b7\u0003\u0002\u0002\u0002\u03b9\u03ba",
    "\u0003\u0002\u0002\u0002\u03ba\u03bc\u0003\u0002\u0002\u0002\u03bb\u03bd",
    "\t\u0010\u0002\u0002\u03bc\u03bb\u0003\u0002\u0002\u0002\u03bc\u03bd",
    "\u0003\u0002\u0002\u0002\u03bd\u03bf\u0003\u0002\u0002\u0002\u03be\u03c0",
    "\t\u0011\u0002\u0002\u03bf\u03be\u0003\u0002\u0002\u0002\u03bf\u03c0",
    "\u0003\u0002\u0002\u0002\u03c0\u03c2\u0003\u0002\u0002\u0002\u03c1\u03c3",
    "\t\u000f\u0002\u0002\u03c2\u03c1\u0003\u0002\u0002\u0002\u03c2\u03c3",
    "\u0003\u0002\u0002\u0002\u03c3\u03c4\u0003\u0002\u0002\u0002\u03c4\u03c5",
    "\u0007\u0010\u0002\u0002\u03c5K\u0003\u0002\u0002\u0002\u03c6\u03c7",
    "\u0007<\u0002\u0002\u03c7\u03c8\u0005\u00ccg\u0002\u03c8M\u0003\u0002",
    "\u0002\u0002\u03c9\u03ca\u0007?\u0002\u0002\u03ca\u03cb\u0005\u00cc",
    "g\u0002\u03cbO\u0003\u0002\u0002\u0002\u03cc\u03cd\u0007g\u0002\u0002",
    "\u03cd\u03ce\u0007\u000f\u0002\u0002\u03ce\u03cf\u0005\n\u0006\u0002",
    "\u03cf\u03d0\u00073\u0002\u0002\u03d0\u03da\u0007\u00eb\u0002\u0002",
    "\u03d1\u03d2\u0007\u009c\u0002\u0002\u03d2\u03d7\u0005\u00c2b\u0002",
    "\u03d3\u03d4\u00073\u0002\u0002\u03d4\u03d6\u0005\u00c2b\u0002\u03d5",
    "\u03d3\u0003\u0002\u0002\u0002\u03d6\u03d9\u0003\u0002\u0002\u0002\u03d7",
    "\u03d5\u0003\u0002\u0002\u0002\u03d7\u03d8\u0003\u0002\u0002\u0002\u03d8",
    "\u03db\u0003\u0002\u0002\u0002\u03d9\u03d7\u0003\u0002\u0002\u0002\u03da",
    "\u03d1\u0003\u0002\u0002\u0002\u03da\u03db\u0003\u0002\u0002\u0002\u03db",
    "\u03de\u0003\u0002\u0002\u0002\u03dc\u03dd\u0007u\u0002\u0002\u03dd",
    "\u03df\u0007\u00eb\u0002\u0002\u03de\u03dc\u0003\u0002\u0002\u0002\u03de",
    "\u03df\u0003\u0002\u0002\u0002\u03df\u03e2\u0003\u0002\u0002\u0002\u03e0",
    "\u03e3\t\u0010\u0002\u0002\u03e1\u03e3\u0007h\u0002\u0002\u03e2\u03e0",
    "\u0003\u0002\u0002\u0002\u03e2\u03e1\u0003\u0002\u0002\u0002\u03e2\u03e3",
    "\u0003\u0002\u0002\u0002\u03e3\u03e6\u0003\u0002\u0002\u0002\u03e4\u03e7",
    "\t\u0012\u0002\u0002\u03e5\u03e7\u0007h\u0002\u0002\u03e6\u03e4\u0003",
    "\u0002\u0002\u0002\u03e6\u03e5\u0003\u0002\u0002\u0002\u03e6\u03e7\u0003",
    "\u0002\u0002\u0002\u03e7\u03ea\u0003\u0002\u0002\u0002\u03e8\u03eb\t",
    "\u0013\u0002\u0002\u03e9\u03eb\u0007h\u0002\u0002\u03ea\u03e8\u0003",
    "\u0002\u0002\u0002\u03ea\u03e9\u0003\u0002\u0002\u0002\u03ea\u03eb\u0003",
    "\u0002\u0002\u0002\u03eb\u03ec\u0003\u0002\u0002\u0002\u03ec\u03ed\u0007",
    "\u0010\u0002\u0002\u03edQ\u0003\u0002\u0002\u0002\u03ee\u03ef\u0007",
    "#\u0002\u0002\u03ef\u03f9\u0005\u0088E\u0002\u03f0\u03f9\u0005\u0084",
    "C\u0002\u03f1\u03f9\u0005\u0086D\u0002\u03f2\u03f9\u0005\u008cG\u0002",
    "\u03f3\u03f9\u0005\u0096L\u0002\u03f4\u03f9\u0005\u0092J\u0002\u03f5",
    "\u03f9\u0005\u009cO\u0002\u03f6\u03f9\u0005\u009aN\u0002\u03f7\u03f9",
    "\u0005\u009eP\u0002\u03f8\u03ee\u0003\u0002\u0002\u0002\u03f8\u03f0",
    "\u0003\u0002\u0002\u0002\u03f8\u03f1\u0003\u0002\u0002\u0002\u03f8\u03f2",
    "\u0003\u0002\u0002\u0002\u03f8\u03f3\u0003\u0002\u0002\u0002\u03f8\u03f4",
    "\u0003\u0002\u0002\u0002\u03f8\u03f5\u0003\u0002\u0002\u0002\u03f8\u03f6",
    "\u0003\u0002\u0002\u0002\u03f8\u03f7\u0003\u0002\u0002\u0002\u03f9S",
    "\u0003\u0002\u0002\u0002\u03fa\u03fd\u0005\u00aaV\u0002\u03fb\u03fd",
    "\u0005z>\u0002\u03fc\u03fa\u0003\u0002\u0002\u0002\u03fc\u03fb\u0003",
    "\u0002\u0002\u0002\u03fc\u03fd\u0003\u0002\u0002\u0002\u03fd\u03fe\u0003",
    "\u0002\u0002\u0002\u03fe\u0400\u0007\u000f\u0002\u0002\u03ff\u0401\u0005",
    "\n\u0006\u0002\u0400\u03ff\u0003\u0002\u0002\u0002\u0400\u0401\u0003",
    "\u0002\u0002\u0002\u0401\u0406\u0003\u0002\u0002\u0002\u0402\u0403\u0007",
    "3\u0002\u0002\u0403\u0405\u0005\n\u0006\u0002\u0404\u0402\u0003\u0002",
    "\u0002\u0002\u0405\u0408\u0003\u0002\u0002\u0002\u0406\u0404\u0003\u0002",
    "\u0002\u0002\u0406\u0407\u0003\u0002\u0002\u0002\u0407\u0409\u0003\u0002",
    "\u0002\u0002\u0408\u0406\u0003\u0002\u0002\u0002\u0409\u040a\u0007\u008d",
    "\u0002\u0002\u040a\u040c\u0007\u000f\u0002\u0002\u040b\u040d\u0005V",
    ",\u0002\u040c\u040b\u0003\u0002\u0002\u0002\u040c\u040d\u0003\u0002",
    "\u0002\u0002\u040d\u040f\u0003\u0002\u0002\u0002\u040e\u0410\u0005X",
    "-\u0002\u040f\u040e\u0003\u0002\u0002\u0002\u040f\u0410\u0003\u0002",
    "\u0002\u0002\u0410\u0412\u0003\u0002\u0002\u0002\u0411\u0413\u0005Z",
    ".\u0002\u0412\u0411\u0003\u0002\u0002\u0002\u0412\u0413\u0003\u0002",
    "\u0002\u0002\u0413\u0414\u0003\u0002\u0002\u0002\u0414\u0415\u0007\u0010",
    "\u0002\u0002\u0415\u0416\u0007\u0010\u0002\u0002\u0416U\u0003\u0002",
    "\u0002\u0002\u0417\u0418\u0007\u0091\u0002\u0002\u0418\u0419\u0007A",
    "\u0002\u0002\u0419\u041e\u0007\u00eb\u0002\u0002\u041a\u041b\u00073",
    "\u0002\u0002\u041b\u041d\u0007\u00eb\u0002\u0002\u041c\u041a\u0003\u0002",
    "\u0002\u0002\u041d\u0420\u0003\u0002\u0002\u0002\u041e\u041c\u0003\u0002",
    "\u0002\u0002\u041e\u041f\u0003\u0002\u0002\u0002\u041fW\u0003\u0002",
    "\u0002\u0002\u0420\u041e\u0003\u0002\u0002\u0002\u0421\u0422\u0007@",
    "\u0002\u0002\u0422\u0423\u0007A\u0002\u0002\u0423\u0425\u0005\u00c2",
    "b\u0002\u0424\u0426\t\u0014\u0002\u0002\u0425\u0424\u0003\u0002\u0002",
    "\u0002\u0425\u0426\u0003\u0002\u0002\u0002\u0426\u042e\u0003\u0002\u0002",
    "\u0002\u0427\u0428\u00073\u0002\u0002\u0428\u042a\u0005\u00c2b\u0002",
    "\u0429\u042b\t\u0014\u0002\u0002\u042a\u0429\u0003\u0002\u0002\u0002",
    "\u042a\u042b\u0003\u0002\u0002\u0002\u042b\u042d\u0003\u0002\u0002\u0002",
    "\u042c\u0427\u0003\u0002\u0002\u0002\u042d\u0430\u0003\u0002\u0002\u0002",
    "\u042e\u042c\u0003\u0002\u0002\u0002\u042e\u042f\u0003\u0002\u0002\u0002",
    "\u042fY\u0003\u0002\u0002\u0002\u0430\u042e\u0003\u0002\u0002\u0002",
    "\u0431\u0432\u0007l\u0002\u0002\u0432\u0435\u0007\u00b0\u0002\u0002",
    "\u0433\u0435\u0007\u0093\u0002\u0002\u0434\u0431\u0003\u0002\u0002\u0002",
    "\u0434\u0433\u0003\u0002\u0002\u0002\u0435\u0436\u0003\u0002\u0002\u0002",
    "\u0436\u0437\u0007)\u0002\u0002\u0437\u0438\u0005\\/\u0002\u0438\u0439",
    "\u0007%\u0002\u0002\u0439\u043a\u0005\\/\u0002\u043a[\u0003\u0002\u0002",
    "\u0002\u043b\u043c\u0007\u00e4\u0002\u0002\u043c\u0447\u0007\u008e\u0002",
    "\u0002\u043d\u043e\u0007\u00e4\u0002\u0002\u043e\u0447\u0007\u008f\u0002",
    "\u0002\u043f\u0440\u0007\u0094\u0002\u0002\u0440\u0441\u0007l\u0002",
    "\u0002\u0441\u0447\u0007\u00b1\u0002\u0002\u0442\u0443\u0007\u0090\u0002",
    "\u0002\u0443\u0447\u0007\u008e\u0002\u0002\u0444\u0445\u0007\u0090\u0002",
    "\u0002\u0445\u0447\u0007\u008f\u0002\u0002\u0446\u043b\u0003\u0002\u0002",
    "\u0002\u0446\u043d\u0003\u0002\u0002\u0002\u0446\u043f\u0003\u0002\u0002",
    "\u0002\u0446\u0442\u0003\u0002\u0002\u0002\u0446\u0444\u0003\u0002\u0002",
    "\u0002\u0447]\u0003\u0002\u0002\u0002\u0448\u0449\u0005\u00c8e\u0002",
    "\u0449\u044a\u0007\u000f\u0002\u0002\u044a\u044c\u0005`1\u0002\u044b",
    "\u044d\u0005b2\u0002\u044c\u044b\u0003\u0002\u0002\u0002\u044c\u044d",
    "\u0003\u0002\u0002\u0002\u044d\u044e\u0003\u0002\u0002\u0002\u044e\u044f",
    "\u0007\u0010\u0002\u0002\u044f_\u0003\u0002\u0002\u0002\u0450\u0453",
    "\u0005\n\u0006\u0002\u0451\u0452\u0007$\u0002\u0002\u0452\u0454\u0007",
    "\u00eb\u0002\u0002\u0453\u0451\u0003\u0002\u0002\u0002\u0453\u0454\u0003",
    "\u0002\u0002\u0002\u0454\u045d\u0003\u0002\u0002\u0002\u0455\u0456\u0007",
    "3\u0002\u0002\u0456\u0459\u0005\n\u0006\u0002\u0457\u0458\u0007$\u0002",
    "\u0002\u0458\u045a\u0007\u00eb\u0002\u0002\u0459\u0457\u0003\u0002\u0002",
    "\u0002\u0459\u045a\u0003\u0002\u0002\u0002\u045a\u045c\u0003\u0002\u0002",
    "\u0002\u045b\u0455\u0003\u0002\u0002\u0002\u045c\u045f\u0003\u0002\u0002",
    "\u0002\u045d\u045b\u0003\u0002\u0002\u0002\u045d\u045e\u0003\u0002\u0002",
    "\u0002\u045e\u0469\u0003\u0002\u0002\u0002\u045f\u045d\u0003\u0002\u0002",
    "\u0002\u0460\u0461\u0007\u001b\u0002\u0002\u0461\u0466\u0005\u00c2b",
    "\u0002\u0462\u0463\u00073\u0002\u0002\u0463\u0465\u0005\u00c2b\u0002",
    "\u0464\u0462\u0003\u0002\u0002\u0002\u0465\u0468\u0003\u0002\u0002\u0002",
    "\u0466\u0464\u0003\u0002\u0002\u0002\u0466\u0467\u0003\u0002\u0002\u0002",
    "\u0467\u046a\u0003\u0002\u0002\u0002\u0468\u0466\u0003\u0002\u0002\u0002",
    "\u0469\u0460\u0003\u0002\u0002\u0002\u0469\u046a\u0003\u0002\u0002\u0002",
    "\u046aa\u0003\u0002\u0002\u0002\u046b\u046d\u0005t;\u0002\u046c\u046b",
    "\u0003\u0002\u0002\u0002\u046c\u046d\u0003\u0002\u0002\u0002\u046d\u0471",
    "\u0003\u0002\u0002\u0002\u046e\u0472\u0005d3\u0002\u046f\u0472\u0005",
    "x=\u0002\u0470\u0472\u0005j6\u0002\u0471\u046e\u0003\u0002\u0002\u0002",
    "\u0471\u046f\u0003\u0002\u0002\u0002\u0471\u0470\u0003\u0002\u0002\u0002",
    "\u0471\u0472\u0003\u0002\u0002\u0002\u0472\u0475\u0003\u0002\u0002\u0002",
    "\u0473\u0476\u0005p9\u0002\u0474\u0476\u0005r:\u0002\u0475\u0473\u0003",
    "\u0002\u0002\u0002\u0475\u0474\u0003\u0002\u0002\u0002\u0475\u0476\u0003",
    "\u0002\u0002\u0002\u0476\u0478\u0003\u0002\u0002\u0002\u0477\u0479\u0005",
    "v<\u0002\u0478\u0477\u0003\u0002\u0002\u0002\u0478\u0479\u0003\u0002",
    "\u0002\u0002\u0479c\u0003\u0002\u0002\u0002\u047a\u047c\u0005\u00b2",
    "Z\u0002\u047b\u047a\u0003\u0002\u0002\u0002\u047b\u047c\u0003\u0002",
    "\u0002\u0002\u047c\u047d\u0003\u0002\u0002\u0002\u047d\u0482\u0005f",
    "4\u0002\u047e\u047f\u00073\u0002\u0002\u047f\u0481\u0005f4\u0002\u0480",
    "\u047e\u0003\u0002\u0002\u0002\u0481\u0484\u0003\u0002\u0002\u0002\u0482",
    "\u0480\u0003\u0002\u0002\u0002\u0482\u0483\u0003\u0002\u0002\u0002\u0483",
    "e\u0003\u0002\u0002\u0002\u0484\u0482\u0003\u0002\u0002\u0002\u0485",
    "\u0487\u0007!\u0002\u0002\u0486\u0488\u0005\u00b2Z\u0002\u0487\u0486",
    "\u0003\u0002\u0002\u0002\u0487\u0488\u0003\u0002\u0002\u0002\u0488\u0489",
    "\u0003\u0002\u0002\u0002\u0489\u0491\u0005h5\u0002\u048a\u048c\u0007",
    "3\u0002\u0002\u048b\u048d\u0005\u00b2Z\u0002\u048c\u048b\u0003\u0002",
    "\u0002\u0002\u048c\u048d\u0003\u0002\u0002\u0002\u048d\u048e\u0003\u0002",
    "\u0002\u0002\u048e\u0490\u0005h5\u0002\u048f\u048a\u0003\u0002\u0002",
    "\u0002\u0490\u0493\u0003\u0002\u0002\u0002\u0491\u048f\u0003\u0002\u0002",
    "\u0002\u0491\u0492\u0003\u0002\u0002\u0002\u0492g\u0003\u0002\u0002",
    "\u0002\u0493\u0491\u0003\u0002\u0002\u0002\u0494\u0495\u0005\u00c2b",
    "\u0002\u0495\u0496\u0007\u0015\u0002\u0002\u0496\u0497\u0005\n\u0006",
    "\u0002\u0497i\u0003\u0002\u0002\u0002\u0498\u049a\u0005\u00b2Z\u0002",
    "\u0499\u0498\u0003\u0002\u0002\u0002\u0499\u049a\u0003\u0002\u0002\u0002",
    "\u049a\u049b\u0003\u0002\u0002\u0002\u049b\u049c\u0007>\u0002\u0002",
    "\u049c\u04a1\u0005l7\u0002\u049d\u049e\u00073\u0002\u0002\u049e\u04a0",
    "\u0005l7\u0002\u049f\u049d\u0003\u0002\u0002\u0002\u04a0\u04a3\u0003",
    "\u0002\u0002\u0002\u04a1\u049f\u0003\u0002\u0002\u0002\u04a1\u04a2\u0003",
    "\u0002\u0002\u0002\u04a2\u04a5\u0003\u0002\u0002\u0002\u04a3\u04a1\u0003",
    "\u0002\u0002\u0002\u04a4\u04a6\u0005\u00acW\u0002\u04a5\u04a4\u0003",
    "\u0002\u0002\u0002\u04a5\u04a6\u0003\u0002\u0002\u0002\u04a6\u04a8\u0003",
    "\u0002\u0002\u0002\u04a7\u04a9\u0005\u00aeX\u0002\u04a8\u04a7\u0003",
    "\u0002\u0002\u0002\u04a8\u04a9\u0003\u0002\u0002\u0002\u04a9k\u0003",
    "\u0002\u0002\u0002\u04aa\u04ac\u0005\u00b2Z\u0002\u04ab\u04aa\u0003",
    "\u0002\u0002\u0002\u04ab\u04ac\u0003\u0002\u0002\u0002\u04ac\u04ad\u0003",
    "\u0002\u0002\u0002\u04ad\u04b2\u0005n8\u0002\u04ae\u04af\u00073\u0002",
    "\u0002\u04af\u04b1\u0005n8\u0002\u04b0\u04ae\u0003\u0002\u0002\u0002",
    "\u04b1\u04b4\u0003\u0002\u0002\u0002\u04b2\u04b0\u0003\u0002\u0002\u0002",
    "\u04b2\u04b3\u0003\u0002\u0002\u0002\u04b3m\u0003\u0002\u0002\u0002",
    "\u04b4\u04b2\u0003\u0002\u0002\u0002\u04b5\u04b6\u0005\u00c2b\u0002",
    "\u04b6\u04b7\u0007\u0015\u0002\u0002\u04b7\u04b8\u0005\u008aF\u0002",
    "\u04b8o\u0003\u0002\u0002\u0002\u04b9\u04ba\u0007 \u0002\u0002\u04ba",
    "\u04bf\u0005\u0098M\u0002\u04bb\u04bc\u00073\u0002\u0002\u04bc\u04be",
    "\u0005\u0098M\u0002\u04bd\u04bb\u0003\u0002\u0002\u0002\u04be\u04c1",
    "\u0003\u0002\u0002\u0002\u04bf\u04bd\u0003\u0002\u0002\u0002\u04bf\u04c0",
    "\u0003\u0002\u0002\u0002\u04c0q\u0003\u0002\u0002\u0002\u04c1\u04bf",
    "\u0003\u0002\u0002\u0002\u04c2\u04c3\u0007\u001f\u0002\u0002\u04c3\u04c8",
    "\u0005\u0094K\u0002\u04c4\u04c5\u00073\u0002\u0002\u04c5\u04c7\u0005",
    "\u0094K\u0002\u04c6\u04c4\u0003\u0002\u0002\u0002\u04c7\u04ca\u0003",
    "\u0002\u0002\u0002\u04c8\u04c6\u0003\u0002\u0002\u0002\u04c8\u04c9\u0003",
    "\u0002\u0002\u0002\u04c9s\u0003\u0002\u0002\u0002\u04ca\u04c8\u0003",
    "\u0002\u0002\u0002\u04cb\u04cc\u0007_\u0002\u0002\u04cc\u04cf\u0005",
    "\n\u0006\u0002\u04cd\u04cf\u0005\u00be`\u0002\u04ce\u04cb\u0003\u0002",
    "\u0002\u0002\u04ce\u04cd\u0003\u0002\u0002\u0002\u04cfu\u0003\u0002",
    "\u0002\u0002\u04d0\u04d4\u0007#\u0002\u0002\u04d1\u04d2\u0005\u00c2",
    "b\u0002\u04d2\u04d3\u0007\u0016\u0002\u0002\u04d3\u04d5\u0003\u0002",
    "\u0002\u0002\u04d4\u04d1\u0003\u0002\u0002\u0002\u04d4\u04d5\u0003\u0002",
    "\u0002\u0002\u04d5\u04d6\u0003\u0002\u0002\u0002\u04d6\u04d7\u0005\u00c0",
    "a\u0002\u04d7\u04db\u00079\u0002\u0002\u04d8\u04d9\u0005\u00c2b\u0002",
    "\u04d9\u04da\u0007\u0016\u0002\u0002\u04da\u04dc\u0003\u0002\u0002\u0002",
    "\u04db\u04d8\u0003\u0002\u0002\u0002\u04db\u04dc\u0003\u0002\u0002\u0002",
    "\u04dc\u04dd\u0003\u0002\u0002\u0002\u04dd\u04ef\u0005\u00c0a\u0002",
    "\u04de\u04e2\u00073\u0002\u0002\u04df\u04e0\u0005\u00c2b\u0002\u04e0",
    "\u04e1\u0007\u0016\u0002\u0002\u04e1\u04e3\u0003\u0002\u0002\u0002\u04e2",
    "\u04df\u0003\u0002\u0002\u0002\u04e2\u04e3\u0003\u0002\u0002\u0002\u04e3",
    "\u04e4\u0003\u0002\u0002\u0002\u04e4\u04e5\u0005\u00c0a\u0002\u04e5",
    "\u04e9\u00079\u0002\u0002\u04e6\u04e7\u0005\u00c2b\u0002\u04e7\u04e8",
    "\u0007\u0016\u0002\u0002\u04e8\u04ea\u0003\u0002\u0002\u0002\u04e9\u04e6",
    "\u0003\u0002\u0002\u0002\u04e9\u04ea\u0003\u0002\u0002\u0002\u04ea\u04eb",
    "\u0003\u0002\u0002\u0002\u04eb\u04ec\u0005\u00c0a\u0002\u04ec\u04ee",
    "\u0003\u0002\u0002\u0002\u04ed\u04de\u0003\u0002\u0002\u0002\u04ee\u04f1",
    "\u0003\u0002\u0002\u0002\u04ef\u04f0\u0003\u0002\u0002\u0002\u04ef\u04ed",
    "\u0003\u0002\u0002\u0002\u04f0w\u0003\u0002\u0002\u0002\u04f1\u04ef",
    "\u0003\u0002\u0002\u0002\u04f2\u04f3\u0007\u00c1\u0002\u0002\u04f3\u04f4",
    "\u0005\n\u0006\u0002\u04f4y\u0003\u0002\u0002\u0002\u04f5\u04f6\t\u0015",
    "\u0002\u0002\u04f6{\u0003\u0002\u0002\u0002\u04f7\u04fc\u0005~@\u0002",
    "\u04f8\u04f9\u00073\u0002\u0002\u04f9\u04fb\u0005~@\u0002\u04fa\u04f8",
    "\u0003\u0002\u0002\u0002\u04fb\u04fe\u0003\u0002\u0002\u0002\u04fc\u04fa",
    "\u0003\u0002\u0002\u0002\u04fc\u04fd\u0003\u0002\u0002\u0002\u04fd}",
    "\u0003\u0002\u0002\u0002\u04fe\u04fc\u0003\u0002\u0002\u0002\u04ff\u0501",
    "\u0005\u00b2Z\u0002\u0500\u04ff\u0003\u0002\u0002\u0002\u0500\u0501",
    "\u0003\u0002\u0002\u0002\u0501\u0502\u0003\u0002\u0002\u0002\u0502\u0503",
    "\u0005\u00c2b\u0002\u0503\u0504\u0007\u0015\u0002\u0002\u0504\u0505",
    "\u0005\u008aF\u0002\u0505\u007f\u0003\u0002\u0002\u0002\u0506\u050b",
    "\u0005\u0082B\u0002\u0507\u0508\u00073\u0002\u0002\u0508\u050a\u0005",
    "\u0082B\u0002\u0509\u0507\u0003\u0002\u0002\u0002\u050a\u050d\u0003",
    "\u0002\u0002\u0002\u050b\u0509\u0003\u0002\u0002\u0002\u050b\u050c\u0003",
    "\u0002\u0002\u0002\u050c\u0081\u0003\u0002\u0002\u0002\u050d\u050b\u0003",
    "\u0002\u0002\u0002\u050e\u0510\u0007_\u0002\u0002\u050f\u050e\u0003",
    "\u0002\u0002\u0002\u050f\u0510\u0003\u0002\u0002\u0002\u0510\u0511\u0003",
    "\u0002\u0002\u0002\u0511\u0512\u0005\n\u0006\u0002\u0512\u0083\u0003",
    "\u0002\u0002\u0002\u0513\u0514\u0007>\u0002\u0002\u0514\u0516\u0005",
    "|?\u0002\u0515\u0517\u0005\u00acW\u0002\u0516\u0515\u0003\u0002\u0002",
    "\u0002\u0516\u0517\u0003\u0002\u0002\u0002\u0517\u0519\u0003\u0002\u0002",
    "\u0002\u0518\u051a\u0005\u00aeX\u0002\u0519\u0518\u0003\u0002\u0002",
    "\u0002\u0519\u051a\u0003\u0002\u0002\u0002\u051a\u0085\u0003\u0002\u0002",
    "\u0002\u051b\u051c\u0007_\u0002\u0002\u051c\u051d\u0005\n\u0006\u0002",
    "\u051d\u0087\u0003\u0002\u0002\u0002\u051e\u051f\u0005\u00c0a\u0002",
    "\u051f\u0520\u00079\u0002\u0002\u0520\u0528\u0005\u00c0a\u0002\u0521",
    "\u0522\u00073\u0002\u0002\u0522\u0523\u0005\u00c0a\u0002\u0523\u0524",
    "\u00079\u0002\u0002\u0524\u0525\u0005\u00c0a\u0002\u0525\u0527\u0003",
    "\u0002\u0002\u0002\u0526\u0521\u0003\u0002\u0002\u0002\u0527\u052a\u0003",
    "\u0002\u0002\u0002\u0528\u0526\u0003\u0002\u0002\u0002\u0528\u0529\u0003",
    "\u0002\u0002\u0002\u0529\u0089\u0003\u0002\u0002\u0002\u052a\u0528\u0003",
    "\u0002\u0002\u0002\u052b\u052c\u0007X\u0002\u0002\u052c\u052d\u0007",
    "\u000f\u0002\u0002\u052d\u052e\u0005\n\u0006\u0002\u052e\u052f\u0007",
    "\u0010\u0002\u0002\u052f\u0564\u0003\u0002\u0002\u0002\u0530\u0531\u0007",
    "Y\u0002\u0002\u0531\u0532\u0007\u000f\u0002\u0002\u0532\u0533\u0005",
    "\n\u0006\u0002\u0533\u0534\u0007\u0010\u0002\u0002\u0534\u0564\u0003",
    "\u0002\u0002\u0002\u0535\u0536\u0007[\u0002\u0002\u0536\u0538\u0007",
    "\u000f\u0002\u0002\u0537\u0539\u0005\n\u0006\u0002\u0538\u0537\u0003",
    "\u0002\u0002\u0002\u0538\u0539\u0003\u0002\u0002\u0002\u0539\u053a\u0003",
    "\u0002\u0002\u0002\u053a\u0564\u0007\u0010\u0002\u0002\u053b\u053c\u0007",
    "Z\u0002\u0002\u053c\u053d\u0007\u000f\u0002\u0002\u053d\u053e\u0005",
    "\n\u0006\u0002\u053e\u053f\u0007\u0010\u0002\u0002\u053f\u0564\u0003",
    "\u0002\u0002\u0002\u0540\u0541\u0007E\u0002\u0002\u0541\u0542\u0007",
    "\u000f\u0002\u0002\u0542\u0543\u0005\n\u0006\u0002\u0543\u0544\u0007",
    "\u0010\u0002\u0002\u0544\u0564\u0003\u0002\u0002\u0002\u0545\u0546\u0007",
    "F\u0002\u0002\u0546\u0547\u0007\u000f\u0002\u0002\u0547\u0548\u0005",
    "\n\u0006\u0002\u0548\u0549\u0007\u0010\u0002\u0002\u0549\u0564\u0003",
    "\u0002\u0002\u0002\u054a\u054b\u0007B\u0002\u0002\u054b\u054c\u0007",
    "\u000f\u0002\u0002\u054c\u054d\u0005\n\u0006\u0002\u054d\u054e\u0007",
    "\u0010\u0002\u0002\u054e\u0564\u0003\u0002\u0002\u0002\u054f\u0550\u0007",
    "\u0081\u0002\u0002\u0550\u0551\u0007\u000f\u0002\u0002\u0551\u0552\u0005",
    "\n\u0006\u0002\u0552\u0553\u0007\u0010\u0002\u0002\u0553\u0564\u0003",
    "\u0002\u0002\u0002\u0554\u0555\u0007\u0082\u0002\u0002\u0555\u0556\u0007",
    "\u000f\u0002\u0002\u0556\u0557\u0005\n\u0006\u0002\u0557\u0558\u0007",
    "\u0010\u0002\u0002\u0558\u0564\u0003\u0002\u0002\u0002\u0559\u055a\u0007",
    "\u0083\u0002\u0002\u055a\u055b\u0007\u000f\u0002\u0002\u055b\u055c\u0005",
    "\n\u0006\u0002\u055c\u055d\u0007\u0010\u0002\u0002\u055d\u0564\u0003",
    "\u0002\u0002\u0002\u055e\u055f\u0007\u0084\u0002\u0002\u055f\u0560\u0007",
    "\u000f\u0002\u0002\u0560\u0561\u0005\n\u0006\u0002\u0561\u0562\u0007",
    "\u0010\u0002\u0002\u0562\u0564\u0003\u0002\u0002\u0002\u0563\u052b\u0003",
    "\u0002\u0002\u0002\u0563\u0530\u0003\u0002\u0002\u0002\u0563\u0535\u0003",
    "\u0002\u0002\u0002\u0563\u053b\u0003\u0002\u0002\u0002\u0563\u0540\u0003",
    "\u0002\u0002\u0002\u0563\u0545\u0003\u0002\u0002\u0002\u0563\u054a\u0003",
    "\u0002\u0002\u0002\u0563\u054f\u0003\u0002\u0002\u0002\u0563\u0554\u0003",
    "\u0002\u0002\u0002\u0563\u0559\u0003\u0002\u0002\u0002\u0563\u055e\u0003",
    "\u0002\u0002\u0002\u0564\u008b\u0003\u0002\u0002\u0002\u0565\u0566\u0007",
    "!\u0002\u0002\u0566\u056b\u0005\u008eH\u0002\u0567\u0568\u00073\u0002",
    "\u0002\u0568\u056a\u0005\u008eH\u0002\u0569\u0567\u0003\u0002\u0002",
    "\u0002\u056a\u056d\u0003\u0002\u0002\u0002\u056b\u0569\u0003\u0002\u0002",
    "\u0002\u056b\u056c\u0003\u0002\u0002\u0002\u056c\u008d\u0003\u0002\u0002",
    "\u0002\u056d\u056b\u0003\u0002\u0002\u0002\u056e\u0570\u0005\u00b2Z",
    "\u0002\u056f\u056e\u0003\u0002\u0002\u0002\u056f\u0570\u0003\u0002\u0002",
    "\u0002\u0570\u0571\u0003\u0002\u0002\u0002\u0571\u0572\u0005\u00c2b",
    "\u0002\u0572\u0573\u0007\u0015\u0002\u0002\u0573\u0574\u0005\u0090I",
    "\u0002\u0574\u008f\u0003\u0002\u0002\u0002\u0575\u0576\u0005\u008aF",
    "\u0002\u0576\u0577\u0007\u000f\u0002\u0002\u0577\u0578\u0005\n\u0006",
    "\u0002\u0578\u0579\u0007\u0010\u0002\u0002\u0579\u057c\u0003\u0002\u0002",
    "\u0002\u057a\u057c\u0005\n\u0006\u0002\u057b\u0575\u0003\u0002\u0002",
    "\u0002\u057b\u057a\u0003\u0002\u0002\u0002\u057c\u0091\u0003\u0002\u0002",
    "\u0002\u057d\u057e\u0007\u001f\u0002\u0002\u057e\u0583\u0005\u0094K",
    "\u0002\u057f\u0580\u00073\u0002\u0002\u0580\u0582\u0005\u0094K\u0002",
    "\u0581\u057f\u0003\u0002\u0002\u0002\u0582\u0585\u0003\u0002\u0002\u0002",
    "\u0583\u0581\u0003\u0002\u0002\u0002\u0583\u0584\u0003\u0002\u0002\u0002",
    "\u0584\u0093\u0003\u0002\u0002\u0002\u0585\u0583\u0003\u0002\u0002\u0002",
    "\u0586\u058c\u0005\u00c2b\u0002\u0587\u0588\u0005\u00bc_\u0002\u0588",
    "\u0589\u0007\u0016\u0002\u0002\u0589\u058a\u0005\u00c2b\u0002\u058a",
    "\u058c\u0003\u0002\u0002\u0002\u058b\u0586\u0003\u0002\u0002\u0002\u058b",
    "\u0587\u0003\u0002\u0002\u0002\u058c\u0095\u0003\u0002\u0002\u0002\u058d",
    "\u058e\u0007 \u0002\u0002\u058e\u0593\u0005\u0098M\u0002\u058f\u0590",
    "\u00073\u0002\u0002\u0590\u0592\u0005\u0098M\u0002\u0591\u058f\u0003",
    "\u0002\u0002\u0002\u0592\u0595\u0003\u0002\u0002\u0002\u0593\u0591\u0003",
    "\u0002\u0002\u0002\u0593\u0594\u0003\u0002\u0002\u0002\u0594\u0097\u0003",
    "\u0002\u0002\u0002\u0595\u0593\u0003\u0002\u0002\u0002\u0596\u059c\u0005",
    "\u00c2b\u0002\u0597\u0598\u0005\u00bc_\u0002\u0598\u0599\u0007\u0016",
    "\u0002\u0002\u0599\u059a\u0005\u00c2b\u0002\u059a\u059c\u0003\u0002",
    "\u0002\u0002\u059b\u0596\u0003\u0002\u0002\u0002\u059b\u0597\u0003\u0002",
    "\u0002\u0002\u059c\u0099\u0003\u0002\u0002\u0002\u059d\u059e\u0007\u00bf",
    "\u0002\u0002\u059e\u059f\u0005\u00c0a\u0002\u059f\u05a0\u00073\u0002",
    "\u0002\u05a0\u05a1\u0005\u00c0a\u0002\u05a1\u009b\u0003\u0002\u0002",
    "\u0002\u05a2\u05a3\u0007\u00be\u0002\u0002\u05a3\u05a4\u0005\u00c0a",
    "\u0002\u05a4\u05a5\u00073\u0002\u0002\u05a5\u05a6\u0005\u00c0a\u0002",
    "\u05a6\u009d\u0003\u0002\u0002\u0002\u05a7\u05a8\u0007\u00c0\u0002\u0002",
    "\u05a8\u05a9\u0005\u00c0a\u0002\u05a9\u05aa\u0007\r\u0002\u0002\u05aa",
    "\u05b2\u0005\u00ccg\u0002\u05ab\u05ac\u00073\u0002\u0002\u05ac\u05ad",
    "\u0005\u00c0a\u0002\u05ad\u05ae\u0007\r\u0002\u0002\u05ae\u05af\u0005",
    "\u00ccg\u0002\u05af\u05b1\u0003\u0002\u0002\u0002\u05b0\u05ab\u0003",
    "\u0002\u0002\u0002\u05b1\u05b4\u0003\u0002\u0002\u0002\u05b2\u05b0\u0003",
    "\u0002\u0002\u0002\u05b2\u05b3\u0003\u0002\u0002\u0002\u05b3\u009f\u0003",
    "\u0002\u0002\u0002\u05b4\u05b2\u0003\u0002\u0002\u0002\u05b5\u05b8\u0007",
    "*\u0002\u0002\u05b6\u05b9\u0005\u00a2R\u0002\u05b7\u05b9\u0007\u00eb",
    "\u0002\u0002\u05b8\u05b6\u0003\u0002\u0002\u0002\u05b8\u05b7\u0003\u0002",
    "\u0002\u0002\u05b9\u05c0\u0003\u0002\u0002\u0002\u05ba\u05bd\u0007+",
    "\u0002\u0002\u05bb\u05be\u0005\u00a2R\u0002\u05bc\u05be\u0007\u00eb",
    "\u0002\u0002\u05bd\u05bb\u0003\u0002\u0002\u0002\u05bd\u05bc\u0003\u0002",
    "\u0002\u0002\u05be\u05c0\u0003\u0002\u0002\u0002\u05bf\u05b5\u0003\u0002",
    "\u0002\u0002\u05bf\u05ba\u0003\u0002\u0002\u0002\u05c0\u00a1\u0003\u0002",
    "\u0002\u0002\u05c1\u05c2\u0007.\u0002\u0002\u05c2\u05c3\u0007\u000f",
    "\u0002\u0002\u05c3\u05c8\u0005\n\u0006\u0002\u05c4\u05c5\u00073\u0002",
    "\u0002\u05c5\u05c7\u0005\n\u0006\u0002\u05c6\u05c4\u0003\u0002\u0002",
    "\u0002\u05c7\u05ca\u0003\u0002\u0002\u0002\u05c8\u05c6\u0003\u0002\u0002",
    "\u0002\u05c8\u05c9\u0003\u0002\u0002\u0002\u05c9\u05cb\u0003\u0002\u0002",
    "\u0002\u05ca\u05c8\u0003\u0002\u0002\u0002\u05cb\u05cc\u0007\u0010\u0002",
    "\u0002\u05cc\u05e8\u0003\u0002\u0002\u0002\u05cd\u05ce\u00070\u0002",
    "\u0002\u05ce\u05cf\u0007\u000f\u0002\u0002\u05cf\u05d0\u0005\n\u0006",
    "\u0002\u05d0\u05d1\u00073\u0002\u0002\u05d1\u05d2\u0005\n\u0006\u0002",
    "\u05d2\u05d3\u0007\u0010\u0002\u0002\u05d3\u05e8\u0003\u0002\u0002\u0002",
    "\u05d4\u05d5\u0007\u0080\u0002\u0002\u05d5\u05d6\u0007\u000f\u0002\u0002",
    "\u05d6\u05d7\u0005\n\u0006\u0002\u05d7\u05d8\u00073\u0002\u0002\u05d8",
    "\u05d9\u0005\n\u0006\u0002\u05d9\u05da\u0007\u0010\u0002\u0002\u05da",
    "\u05e8\u0003\u0002\u0002\u0002\u05db\u05dc\u00071\u0002\u0002\u05dc",
    "\u05dd\u0007\u000f\u0002\u0002\u05dd\u05e2\u0005\n\u0006\u0002\u05de",
    "\u05df\u00073\u0002\u0002\u05df\u05e1\u0005\n\u0006\u0002\u05e0\u05de",
    "\u0003\u0002\u0002\u0002\u05e1\u05e4\u0003\u0002\u0002\u0002\u05e2\u05e0",
    "\u0003\u0002\u0002\u0002\u05e2\u05e3\u0003\u0002\u0002\u0002\u05e3\u05e5",
    "\u0003\u0002\u0002\u0002\u05e4\u05e2\u0003\u0002\u0002\u0002\u05e5\u05e6",
    "\u0007\u0010\u0002\u0002\u05e6\u05e8\u0003\u0002\u0002\u0002\u05e7\u05c1",
    "\u0003\u0002\u0002\u0002\u05e7\u05cd\u0003\u0002\u0002\u0002\u05e7\u05d4",
    "\u0003\u0002\u0002\u0002\u05e7\u05db\u0003\u0002\u0002\u0002\u05e8\u00a3",
    "\u0003\u0002\u0002\u0002\u05e9\u05ea\u0005\u00ba^\u0002\u05ea\u05eb",
    "\u0007\u0003\u0002\u0002\u05eb\u05ec\u0005\u00c2b\u0002\u05ec\u05ed",
    "\u0007\r\u0002\u0002\u05ed\u05f3\u0005\u00ccg\u0002\u05ee\u05ef\u0007",
    "3\u0002\u0002\u05ef\u05f0\u0005\u00c2b\u0002\u05f0\u05f1\u0007\r\u0002",
    "\u0002\u05f1\u05f2\u0005\u00ccg\u0002\u05f2\u05f4\u0003\u0002\u0002",
    "\u0002\u05f3\u05ee\u0003\u0002\u0002\u0002\u05f3\u05f4\u0003\u0002\u0002",
    "\u0002\u05f4\u05f5\u0003\u0002\u0002\u0002\u05f5\u05f6\u0007\u0004\u0002",
    "\u0002\u05f6\u00a5\u0003\u0002\u0002\u0002\u05f7\u05f8\u0005\u00aaV",
    "\u0002\u05f8\u05f9\u0007\u000f\u0002\u0002\u05f9\u05fc\u0007\u00eb\u0002",
    "\u0002\u05fa\u05fb\u0007\u0016\u0002\u0002\u05fb\u05fd\u0005\u00c2b",
    "\u0002\u05fc\u05fa\u0003\u0002\u0002\u0002\u05fc\u05fd\u0003\u0002\u0002",
    "\u0002\u05fd\u0606\u0003\u0002\u0002\u0002\u05fe\u05ff\u00073\u0002",
    "\u0002\u05ff\u0602\u0007\u00eb\u0002\u0002\u0600\u0601\u0007\u0016\u0002",
    "\u0002\u0601\u0603\u0005\u00c2b\u0002\u0602\u0600\u0003\u0002\u0002",
    "\u0002\u0602\u0603\u0003\u0002\u0002\u0002\u0603\u0605\u0003\u0002\u0002",
    "\u0002\u0604\u05fe\u0003\u0002\u0002\u0002\u0605\u0608\u0003\u0002\u0002",
    "\u0002\u0606\u0604\u0003\u0002\u0002\u0002\u0606\u0607\u0003\u0002\u0002",
    "\u0002\u0607\u060a\u0003\u0002\u0002\u0002\u0608\u0606\u0003\u0002\u0002",
    "\u0002\u0609\u060b\u0005\u00acW\u0002\u060a\u0609\u0003\u0002\u0002",
    "\u0002\u060a\u060b\u0003\u0002\u0002\u0002\u060b\u060d\u0003\u0002\u0002",
    "\u0002\u060c\u060e\u0005\u00aeX\u0002\u060d\u060c\u0003\u0002\u0002",
    "\u0002\u060d\u060e\u0003\u0002\u0002\u0002\u060e\u060f\u0003\u0002\u0002",
    "\u0002\u060f\u0610\u0007\u0010\u0002\u0002\u0610\u00a7\u0003\u0002\u0002",
    "\u0002\u0611\u0612\u0005\u00aaV\u0002\u0612\u0613\u0007\u000f\u0002",
    "\u0002\u0613\u0616\u0007\u00eb\u0002\u0002\u0614\u0615\u0007\u0016\u0002",
    "\u0002\u0615\u0617\u0005\u00c2b\u0002\u0616\u0614\u0003\u0002\u0002",
    "\u0002\u0616\u0617\u0003\u0002\u0002\u0002\u0617\u0620\u0003\u0002\u0002",
    "\u0002\u0618\u0619\u00073\u0002\u0002\u0619\u061c\u0007\u00eb\u0002",
    "\u0002\u061a\u061b\u0007\u0016\u0002\u0002\u061b\u061d\u0005\u00c2b",
    "\u0002\u061c\u061a\u0003\u0002\u0002\u0002\u061c\u061d\u0003\u0002\u0002",
    "\u0002\u061d\u061f\u0003\u0002\u0002\u0002\u061e\u0618\u0003\u0002\u0002",
    "\u0002\u061f\u0622\u0003\u0002\u0002\u0002\u0620\u061e\u0003\u0002\u0002",
    "\u0002\u0620\u0621\u0003\u0002\u0002\u0002\u0621\u0623\u0003\u0002\u0002",
    "\u0002\u0622\u0620\u0003\u0002\u0002\u0002\u0623\u0625\u0007\u0010\u0002",
    "\u0002\u0624\u0626\u0005\u00acW\u0002\u0625\u0624\u0003\u0002\u0002",
    "\u0002\u0625\u0626\u0003\u0002\u0002\u0002\u0626\u0628\u0003\u0002\u0002",
    "\u0002\u0627\u0629\u0005\u00aeX\u0002\u0628\u0627\u0003\u0002\u0002",
    "\u0002\u0628\u0629\u0003\u0002\u0002\u0002\u0629\u00a9\u0003\u0002\u0002",
    "\u0002\u062a\u062b\t\u0016\u0002\u0002\u062b\u00ab\u0003\u0002\u0002",
    "\u0002\u062c\u0636\u0005\u00caf\u0002\u062d\u0632\u0007\u00eb\u0002",
    "\u0002\u062e\u062f\u00073\u0002\u0002\u062f\u0631\u0007\u00eb\u0002",
    "\u0002\u0630\u062e\u0003\u0002\u0002\u0002\u0631\u0634\u0003\u0002\u0002",
    "\u0002\u0632\u0630\u0003\u0002\u0002\u0002\u0632\u0633\u0003\u0002\u0002",
    "\u0002\u0633\u0637\u0003\u0002\u0002\u0002\u0634\u0632\u0003\u0002\u0002",
    "\u0002\u0635\u0637\u0005\n\u0006\u0002\u0636\u062d\u0003\u0002\u0002",
    "\u0002\u0636\u0635\u0003\u0002\u0002\u0002\u0637\u00ad\u0003\u0002\u0002",
    "\u0002\u0638\u063a\u0007\u0087\u0002\u0002\u0639\u063b\u0007\u000f\u0002",
    "\u0002\u063a\u0639\u0003\u0002\u0002\u0002\u063a\u063b\u0003\u0002\u0002",
    "\u0002\u063b\u063d\u0003\u0002\u0002\u0002\u063c\u063e\u0005\u008aF",
    "\u0002\u063d\u063c\u0003\u0002\u0002\u0002\u063d\u063e\u0003\u0002\u0002",
    "\u0002\u063e\u063f\u0003\u0002\u0002\u0002\u063f\u0641\u0005\n\u0006",
    "\u0002\u0640\u0642\u0007\u0010\u0002\u0002\u0641\u0640\u0003\u0002\u0002",
    "\u0002\u0641\u0642\u0003\u0002\u0002\u0002\u0642\u00af\u0003\u0002\u0002",
    "\u0002\u0643\u0644\u0007:\u0002\u0002\u0644\u0645\u0007=\u0002\u0002",
    "\u0645\u0646\u0007l\u0002\u0002\u0646\u0647\u0007\u00b0\u0002\u0002",
    "\u0647\u00b1\u0003\u0002\u0002\u0002\u0648\u064e\u0007]\u0002\u0002",
    "\u0649\u064e\u0007\u00dd\u0002\u0002\u064a\u064e\u0007\\\u0002\u0002",
    "\u064b\u064e\u0007^\u0002\u0002\u064c\u064e\u0005\u00b4[\u0002\u064d",
    "\u0648\u0003\u0002\u0002\u0002\u064d\u0649\u0003\u0002\u0002\u0002\u064d",
    "\u064a\u0003\u0002\u0002\u0002\u064d\u064b\u0003\u0002\u0002\u0002\u064d",
    "\u064c\u0003\u0002\u0002\u0002\u064e\u00b3\u0003\u0002\u0002\u0002\u064f",
    "\u0650\u0007c\u0002\u0002\u0650\u0651\u0007^\u0002\u0002\u0651\u00b5",
    "\u0003\u0002\u0002\u0002\u0652\u0653\u0005\n\u0006\u0002\u0653\u00b7",
    "\u0003\u0002\u0002\u0002\u0654\u0655\t\u0017\u0002\u0002\u0655\u00b9",
    "\u0003\u0002\u0002\u0002\u0656\u0657\u0007\u00ea\u0002\u0002\u0657\u00bb",
    "\u0003\u0002\u0002\u0002\u0658\u0659\u0007\u00eb\u0002\u0002\u0659\u00bd",
    "\u0003\u0002\u0002\u0002\u065a\u065b\u0007\u00eb\u0002\u0002\u065b\u00bf",
    "\u0003\u0002\u0002\u0002\u065c\u065d\u0007\u00eb\u0002\u0002\u065d\u00c1",
    "\u0003\u0002\u0002\u0002\u065e\u065f\u0007\u00eb\u0002\u0002\u065f\u00c3",
    "\u0003\u0002\u0002\u0002\u0660\u0661\u0007\u00eb\u0002\u0002\u0661\u00c5",
    "\u0003\u0002\u0002\u0002\u0662\u0663\u0007\u00eb\u0002\u0002\u0663\u00c7",
    "\u0003\u0002\u0002\u0002\u0664\u0665\t\u0018\u0002\u0002\u0665\u00c9",
    "\u0003\u0002\u0002\u0002\u0666\u0667\u0007\u0085\u0002\u0002\u0667\u066d",
    "\u0007A\u0002\u0002\u0668\u0669\u0007\u0085\u0002\u0002\u0669\u066d",
    "\u0007\u0086\u0002\u0002\u066a\u066b\u0007\u0085\u0002\u0002\u066b\u066d",
    "\u0007=\u0002\u0002\u066c\u0666\u0003\u0002\u0002\u0002\u066c\u0668",
    "\u0003\u0002\u0002\u0002\u066c\u066a\u0003\u0002\u0002\u0002\u066d\u00cb",
    "\u0003\u0002\u0002\u0002\u066e\u066f\t\u0019\u0002\u0002\u066f\u00cd",
    "\u0003\u0002\u0002\u0002\u0670\u0671\t\u001a\u0002\u0002\u0671\u00cf",
    "\u0003\u0002\u0002\u0002\u0672\u0676\u0005\u00d2j\u0002\u0673\u0676",
    "\u0005\u00d4k\u0002\u0674\u0676\u0005\u00d6l\u0002\u0675\u0672\u0003",
    "\u0002\u0002\u0002\u0675\u0673\u0003\u0002\u0002\u0002\u0675\u0674\u0003",
    "\u0002\u0002\u0002\u0676\u0678\u0003\u0002\u0002\u0002\u0677\u0679\u0005",
    "\u00d8m\u0002\u0678\u0677\u0003\u0002\u0002\u0002\u0678\u0679\u0003",
    "\u0002\u0002\u0002\u0679\u067e\u0003\u0002\u0002\u0002\u067a\u067c\u0007",
    "(\u0002\u0002\u067b\u067a\u0003\u0002\u0002\u0002\u067b\u067c\u0003",
    "\u0002\u0002\u0002\u067c\u067d\u0003\u0002\u0002\u0002\u067d\u067f\u0007",
    "\u00e9\u0002\u0002\u067e\u067b\u0003\u0002\u0002\u0002\u067e\u067f\u0003",
    "\u0002\u0002\u0002\u067f\u00d1\u0003\u0002\u0002\u0002\u0680\u0681\t",
    "\u001b\u0002\u0002\u0681\u00d3\u0003\u0002\u0002\u0002\u0682\u0683\u0007",
    "\u00eb\u0002\u0002\u0683\u00d5\u0003\u0002\u0002\u0002\u0684\u0685\u0007",
    "\u00eb\u0002\u0002\u0685\u00d7\u0003\u0002\u0002\u0002\u0686\u0687\u0007",
    "\u0003\u0002\u0002\u0687\u0688\u0005\n\u0006\u0002\u0688\u0689\u0007",
    "\u0004\u0002\u0002\u0689\u0696\u0003\u0002\u0002\u0002\u068a\u068b\u0007",
    "\u0012\u0002\u0002\u068b\u0690\u0005\u00ccg\u0002\u068c\u068d\u0007",
    "3\u0002\u0002\u068d\u068f\u0005\u00ccg\u0002\u068e\u068c\u0003\u0002",
    "\u0002\u0002\u068f\u0692\u0003\u0002\u0002\u0002\u0690\u068e\u0003\u0002",
    "\u0002\u0002\u0690\u0691\u0003\u0002\u0002\u0002\u0691\u0693\u0003\u0002",
    "\u0002\u0002\u0692\u0690\u0003\u0002\u0002\u0002\u0693\u0694\u0007\u0013",
    "\u0002\u0002\u0694\u0696\u0003\u0002\u0002\u0002\u0695\u0686\u0003\u0002",
    "\u0002\u0002\u0695\u068a\u0003\u0002\u0002\u0002\u0696\u00d9\u0003\u0002",
    "\u0002\u0002\u0697\u069e\u0005\u00d0i\u0002\u0698\u069e\u0005\u00dc",
    "o\u0002\u0699\u069e\u0005\u00dep\u0002\u069a\u069e\u0005\u00f4{\u0002",
    "\u069b\u069e\u0005\u00eex\u0002\u069c\u069e\u0005\u00e4s\u0002\u069d",
    "\u0697\u0003\u0002\u0002\u0002\u069d\u0698\u0003\u0002\u0002\u0002\u069d",
    "\u0699\u0003\u0002\u0002\u0002\u069d\u069a\u0003\u0002\u0002\u0002\u069d",
    "\u069b\u0003\u0002\u0002\u0002\u069d\u069c\u0003\u0002\u0002\u0002\u069e",
    "\u00db\u0003\u0002\u0002\u0002\u069f\u06a4\u0005\u00b2Z\u0002\u06a0",
    "\u06a1\u0007\n\u0002\u0002\u06a1\u06a2\u0005\u00d0i\u0002\u06a2\u06a3",
    "\u0007\t\u0002\u0002\u06a3\u06a5\u0003\u0002\u0002\u0002\u06a4\u06a0",
    "\u0003\u0002\u0002\u0002\u06a4\u06a5\u0003\u0002\u0002\u0002\u06a5\u00dd",
    "\u0003\u0002\u0002\u0002\u06a6\u06b2\u0007n\u0002\u0002\u06a7\u06a8",
    "\u0007\u0012\u0002\u0002\u06a8\u06ad\u0005\u00e0q\u0002\u06a9\u06aa",
    "\u00073\u0002\u0002\u06aa\u06ac\u0005\u00e0q\u0002\u06ab\u06a9\u0003",
    "\u0002\u0002\u0002\u06ac\u06af\u0003\u0002\u0002\u0002\u06ad\u06ab\u0003",
    "\u0002\u0002\u0002\u06ad\u06ae\u0003\u0002\u0002\u0002\u06ae\u06b0\u0003",
    "\u0002\u0002\u0002\u06af\u06ad\u0003\u0002\u0002\u0002\u06b0\u06b1\u0007",
    "\u0013\u0002\u0002\u06b1\u06b3\u0003\u0002\u0002\u0002\u06b2\u06a7\u0003",
    "\u0002\u0002\u0002\u06b2\u06b3\u0003\u0002\u0002\u0002\u06b3\u00df\u0003",
    "\u0002\u0002\u0002\u06b4\u06b7\u0005\u00dco\u0002\u06b5\u06b8\u0005",
    "\u00c2b\u0002\u06b6\u06b8\u0005\u00e2r\u0002\u06b7\u06b5\u0003\u0002",
    "\u0002\u0002\u06b7\u06b6\u0003\u0002\u0002\u0002\u06b8\u00e1\u0003\u0002",
    "\u0002\u0002\u06b9\u06bb\u0007h\u0002\u0002\u06ba\u06bc\t\u001c\u0002",
    "\u0002\u06bb\u06ba\u0003\u0002\u0002\u0002\u06bb\u06bc\u0003\u0002\u0002",
    "\u0002\u06bc\u00e3\u0003\u0002\u0002\u0002\u06bd\u06c1\u0007t\u0002",
    "\u0002\u06be\u06c1\u0005\u00e6t\u0002\u06bf\u06c1\u0005\u00e8u\u0002",
    "\u06c0\u06bd\u0003\u0002\u0002\u0002\u06c0\u06be\u0003\u0002\u0002\u0002",
    "\u06c0\u06bf\u0003\u0002\u0002\u0002\u06c1\u00e5\u0003\u0002\u0002\u0002",
    "\u06c2\u06ce\u0007r\u0002\u0002\u06c3\u06c4\u0007\u00de\u0002\u0002",
    "\u06c4\u06c5\u0007\u0012\u0002\u0002\u06c5\u06c6\u0005\u00eav\u0002",
    "\u06c6\u06c7\u0007\u0013\u0002\u0002\u06c7\u06ce\u0003\u0002\u0002\u0002",
    "\u06c8\u06c9\u0007\u00df\u0002\u0002\u06c9\u06ca\u0007\u0012\u0002\u0002",
    "\u06ca\u06cb\u0005\u00ecw\u0002\u06cb\u06cc\u0007\u0013\u0002\u0002",
    "\u06cc\u06ce\u0003\u0002\u0002\u0002\u06cd\u06c2\u0003\u0002\u0002\u0002",
    "\u06cd\u06c3\u0003\u0002\u0002\u0002\u06cd\u06c8\u0003\u0002\u0002\u0002",
    "\u06ce\u00e7\u0003\u0002\u0002\u0002\u06cf\u06ea\u0007s\u0002\u0002",
    "\u06d0\u06da\u0007\u00e0\u0002\u0002\u06d1\u06d2\u0007\u0012\u0002\u0002",
    "\u06d2\u06d7\u0007\u00eb\u0002\u0002\u06d3\u06d4\u0007\u000f\u0002\u0002",
    "\u06d4\u06d5\u0005\u00eav\u0002\u06d5\u06d6\u0007\u0010\u0002\u0002",
    "\u06d6\u06d8\u0003\u0002\u0002\u0002\u06d7\u06d3\u0003\u0002\u0002\u0002",
    "\u06d7\u06d8\u0003\u0002\u0002\u0002\u06d8\u06d9\u0003\u0002\u0002\u0002",
    "\u06d9\u06db\u0007\u0013\u0002\u0002\u06da\u06d1\u0003\u0002\u0002\u0002",
    "\u06da\u06db\u0003\u0002\u0002\u0002\u06db\u06ea\u0003\u0002\u0002\u0002",
    "\u06dc\u06e7\u0007\u00e1\u0002\u0002\u06dd\u06de\u0007\u0012\u0002\u0002",
    "\u06de\u06e3\u0005\u00c0a\u0002\u06df\u06e0\u0007\u000f\u0002\u0002",
    "\u06e0\u06e1\u0005\u00ecw\u0002\u06e1\u06e2\u0007\u0010\u0002\u0002",
    "\u06e2\u06e4\u0003\u0002\u0002\u0002\u06e3\u06df\u0003\u0002\u0002\u0002",
    "\u06e3\u06e4\u0003\u0002\u0002\u0002\u06e4\u06e5\u0003\u0002\u0002\u0002",
    "\u06e5\u06e6\u0007\u0013\u0002\u0002\u06e6\u06e8\u0003\u0002\u0002\u0002",
    "\u06e7\u06dd\u0003\u0002\u0002\u0002\u06e7\u06e8\u0003\u0002\u0002\u0002",
    "\u06e8\u06ea\u0003\u0002\u0002\u0002\u06e9\u06cf\u0003\u0002\u0002\u0002",
    "\u06e9\u06d0\u0003\u0002\u0002\u0002\u06e9\u06dc\u0003\u0002\u0002\u0002",
    "\u06ea\u00e9\u0003\u0002\u0002\u0002\u06eb\u06f0\u0007\u00eb\u0002\u0002",
    "\u06ec\u06ed\u0007\u0007\u0002\u0002\u06ed\u06ef\u0007\u00eb\u0002\u0002",
    "\u06ee\u06ec\u0003\u0002\u0002\u0002\u06ef\u06f2\u0003\u0002\u0002\u0002",
    "\u06f0\u06ee\u0003\u0002\u0002\u0002\u06f0\u06f1\u0003\u0002\u0002\u0002",
    "\u06f1\u00eb\u0003\u0002\u0002\u0002\u06f2\u06f0\u0003\u0002\u0002\u0002",
    "\u06f3\u06f8\u0005\u00c0a\u0002\u06f4\u06f5\u0007\u0007\u0002\u0002",
    "\u06f5\u06f7\u0005\u00c0a\u0002\u06f6\u06f4\u0003\u0002\u0002\u0002",
    "\u06f7\u06fa\u0003\u0002\u0002\u0002\u06f8\u06f6\u0003\u0002\u0002\u0002",
    "\u06f8\u06f9\u0003\u0002\u0002\u0002\u06f9\u00ed\u0003\u0002\u0002\u0002",
    "\u06fa\u06f8\u0003\u0002\u0002\u0002\u06fb\u0700\u0005\u00f0y\u0002",
    "\u06fc\u06fd\u0007\u0007\u0002\u0002\u06fd\u06ff\u0005\u00f0y\u0002",
    "\u06fe\u06fc\u0003\u0002\u0002\u0002\u06ff\u0702\u0003\u0002\u0002\u0002",
    "\u0700\u06fe\u0003\u0002\u0002\u0002\u0700\u0701\u0003\u0002\u0002\u0002",
    "\u0701\u0703\u0003\u0002\u0002\u0002\u0702\u0700\u0003\u0002\u0002\u0002",
    "\u0703\u0704\u0007\u0014\u0002\u0002\u0704\u0705\u0005\u00f2z\u0002",
    "\u0705\u00ef\u0003\u0002\u0002\u0002\u0706\u070a\u0005\u00d0i\u0002",
    "\u0707\u070a\u0005\u00dep\u0002\u0708\u070a\u0005\u00dco\u0002\u0709",
    "\u0706\u0003\u0002\u0002\u0002\u0709\u0707\u0003\u0002\u0002\u0002\u0709",
    "\u0708\u0003\u0002\u0002\u0002\u070a\u00f1\u0003\u0002\u0002\u0002\u070b",
    "\u0711\u0005\u00d0i\u0002\u070c\u0711\u0005\u00dep\u0002\u070d\u0711",
    "\u0005\u00f4{\u0002\u070e\u0711\u0005\u00e4s\u0002\u070f\u0711\u0005",
    "\u00dco\u0002\u0710\u070b\u0003\u0002\u0002\u0002\u0710\u070c\u0003",
    "\u0002\u0002\u0002\u0710\u070d\u0003\u0002\u0002\u0002\u0710\u070e\u0003",
    "\u0002\u0002\u0002\u0710\u070f\u0003\u0002\u0002\u0002\u0711\u00f3\u0003",
    "\u0002\u0002\u0002\u0712\u0717\u0007\u00e2\u0002\u0002\u0713\u0714\u0007",
    "\n\u0002\u0002\u0714\u0715\u0005\u00d0i\u0002\u0715\u0716\u0007\t\u0002",
    "\u0002\u0716\u0718\u0003\u0002\u0002\u0002\u0717\u0713\u0003\u0002\u0002",
    "\u0002\u0717\u0718\u0003\u0002\u0002\u0002\u0718\u00f5\u0003\u0002\u0002",
    "\u0002\u0719\u071a\t\u001d\u0002\u0002\u071a\u00f7\u0003\u0002\u0002",
    "\u0002\u071b\u071c\u0007p\u0002\u0002\u071c\u071d\u0007r\u0002\u0002",
    "\u071d\u071e\u0007t\u0002\u0002\u071e\u00f9\u0003\u0002\u0002\u0002",
    "\u071f\u0720\u0007p\u0002\u0002\u0720\u0721\u0007s\u0002\u0002\u0721",
    "\u0722\u0007t\u0002\u0002\u0722\u00fb\u0003\u0002\u0002\u0002\u0723",
    "\u0724\u0007v\u0002\u0002\u0724\u0725\u0007r\u0002\u0002\u0725\u0726",
    "\u0007t\u0002\u0002\u0726\u00fd\u0003\u0002\u0002\u0002\u0727\u0728",
    "\u0007v\u0002\u0002\u0728\u0729\u0007s\u0002\u0002\u0729\u072a\u0007",
    "t\u0002\u0002\u072a\u00ff\u0003\u0002\u0002\u0002\u072b\u072c\u0007",
    "p\u0002\u0002\u072c\u072d\u0007l\u0002\u0002\u072d\u072e\u0007m\u0002",
    "\u0002\u072e\u0101\u0003\u0002\u0002\u0002\u00cb\u0103\u0108\u010e\u0114",
    "\u0118\u011d\u0122\u0126\u012e\u0138\u013e\u0143\u014e\u015d\u0178\u017e",
    "\u0180\u0182\u018f\u0195\u019a\u01aa\u01af\u01b3\u01b6\u01ba\u01c3\u01c9",
    "\u01cd\u01d4\u01db\u01df\u01e6\u01ea\u01fa\u01ff\u0205\u0209\u020c\u0214",
    "\u021a\u021f\u022a\u022d\u0232\u023d\u0243\u0248\u024c\u024f\u0258\u0281",
    "\u02bd\u02c1\u02cc\u02d0\u02db\u030a\u0312\u031a\u0325\u0330\u0335\u0339",
    "\u033f\u0343\u034d\u0351\u0358\u0368\u0371\u0376\u0378\u037c\u0384\u0387",
    "\u038b\u038e\u039d\u03a0\u03a3\u03b2\u03b5\u03b9\u03bc\u03bf\u03c2\u03d7",
    "\u03da\u03de\u03e2\u03e6\u03ea\u03f8\u03fc\u0400\u0406\u040c\u040f\u0412",
    "\u041e\u0425\u042a\u042e\u0434\u0446\u044c\u0453\u0459\u045d\u0466\u0469",
    "\u046c\u0471\u0475\u0478\u047b\u0482\u0487\u048c\u0491\u0499\u04a1\u04a5",
    "\u04a8\u04ab\u04b2\u04bf\u04c8\u04ce\u04d4\u04db\u04e2\u04e9\u04ef\u04fc",
    "\u0500\u050b\u050f\u0516\u0519\u0528\u0538\u0563\u056b\u056f\u057b\u0583",
    "\u058b\u0593\u059b\u05b2\u05b8\u05bd\u05bf\u05c8\u05e2\u05e7\u05f3\u05fc",
    "\u0602\u0606\u060a\u060d\u0616\u061c\u0620\u0625\u0628\u0632\u0636\u063a",
    "\u063d\u0641\u064d\u066c\u0675\u0678\u067b\u067e\u0690\u0695\u069d\u06a4",
    "\u06ad\u06b2\u06b7\u06bb\u06c0\u06cd\u06d7\u06da\u06e3\u06e7\u06e9\u06f0",
    "\u06f8\u0700\u0709\u0710\u0717"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'['", "']'", "'+'", "'-'", "'*'", "'/'", "'>'", 
                     "'<'", "'<='", "'>='", "'='", "'<>'", "'('", "')'", 
                     "':'", "'{'", "'}'", "'->'", "':='", "'#'", "'eval'", 
                     "'if'", "'then'", "'else'", "'using'", "'with'", "'current_date'", 
                     "'on'", "'drop'", "'keep'", "'calc'", "'attrcalc'", 
                     "'rename'", "'as'", "'and'", "'or'", "'xor'", "'not'", 
                     "'between'", "'in'", "'not_in'", "'isnull'", "'ex'", 
                     "'union'", "'diff'", "'symdiff'", "'intersect'", "'keys'", 
                     "','", "'intyear'", "'intmonth'", "'intday'", "'check'", 
                     "'exists_in'", "'to'", "'return'", "'imbalance'", "'errorcode'", 
                     "'all'", "'aggr'", "'errorlevel'", "'order'", "'by'", 
                     "'rank'", "'asc'", "'desc'", "'min'", "'max'", "'first'", 
                     "'last'", "'indexof'", "'abs'", "'key'", "'ln'", "'log'", 
                     "'trunc'", "'round'", "'power'", "'mod'", "'length'", 
                     "'||'", "'trim'", "'upper'", "'lower'", "'substr'", 
                     "'sum'", "'avg'", "'median'", "'count'", "'identifier'", 
                     "'measure'", "'attribute'", "'filter'", "'merge'", 
                     "'exp'", "'role'", "'viral'", "'match_characters'", 
                     "'type'", "'nvl'", "'hierarchy'", "'_'", "'invalid'", 
                     "'valuedomain'", "'variable'", "'data'", "'structure'", 
                     "'dataset'", "'operator'", "'define'", "'<-'", "'datapoint'", 
                     "'hierarchical'", "'ruleset'", "'rule'", "'end'", "'alterDataset'", 
                     "'ltrim'", "'rtrim'", "'instr'", "'replace'", "'ceil'", 
                     "'floor'", "'sqrt'", "'any'", "'setdiff'", "'stddev_pop'", 
                     "'stddev_samp'", "'var_pop'", "'var_samp'", "'group'", 
                     "'except'", "'having'", "'first_value'", "'last_value'", 
                     "'lag'", "'lead'", "'ratio_to_report'", "'over'", "'preceding'", 
                     "'following'", "'unbounded'", "'partition'", "'rows'", 
                     "'range'", "'current'", "'valid'", "'fill_time_series'", 
                     "'flow_to_stock'", "'stock_to_flow'", "'timeshift'", 
                     "'measures'", "'no_measures'", "'condition'", "'boolean'", 
                     "'date'", "'time_period'", "'number'", "'string'", 
                     "'integer'", "'float'", "'list'", "'record'", "'restrict'", 
                     "'yyyy'", "'mm'", "'dd'", "'maxLength'", "'regexp'", 
                     "'is'", "'when'", "'from'", "'aggregates'", "'points'", 
                     "'point'", "'total'", "'partial'", "'always'", "'inner_join'", 
                     "'left_join'", "'cross_join'", "'full_join'", "'maps_from'", 
                     "'maps_to'", "'map_to'", "'map_from'", "'returns'", 
                     "'pivot'", "'unpivot'", "'sub'", "'apply'", "'conditioned'", 
                     "'period_indicator'", "'single'", "'duration'", "'time_agg'", 
                     "'unit'", "'Value'", "'valuedomains'", "'variables'", 
                     "'input'", "'output'", "'cast'", "'rule_priority'", 
                     "'dataset_priority'", "'default'", "'check_datapoint'", 
                     "'check_hierarchy'", "'computed'", "'non_null'", "'non_zero'", 
                     "'partial_null'", "'partial_zero'", "'always_null'", 
                     "'always_zero'", "'components'", "'all_measures'", 
                     "'scalar'", "'component'", "'datapoint_on_valuedomains'", 
                     "'datapoint_on_variables'", "'hierarchical_on_valuedomains'", 
                     "'hierarchical_on_variables'", "'set'", "'language'", 
                     null, null, null, null, null, "'null'", null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, "';'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, "ASSIGN", "MEMBERSHIP", "EVAL", "IF", "THEN", 
                      "ELSE", "USING", "WITH", "CURRENT_DATE", "ON", "DROP", 
                      "KEEP", "CALC", "ATTRCALC", "RENAME", "AS", "AND", 
                      "OR", "XOR", "NOT", "BETWEEN", "IN", "NOT_IN", "ISNULL", 
                      "EX", "UNION", "DIFF", "SYMDIFF", "INTERSECT", "KEYS", 
                      "CARTESIAN_PER", "INTYEAR", "INTMONTH", "INTDAY", 
                      "CHECK", "EXISTS_IN", "TO", "RETURN", "IMBALANCE", 
                      "ERRORCODE", "ALL", "AGGREGATE", "ERRORLEVEL", "ORDER", 
                      "BY", "RANK", "ASC", "DESC", "MIN", "MAX", "FIRST", 
                      "LAST", "INDEXOF", "ABS", "KEY", "LN", "LOG", "TRUNC", 
                      "ROUND", "POWER", "MOD", "LEN", "CONCAT", "TRIM", 
                      "UCASE", "LCASE", "SUBSTR", "SUM", "AVG", "MEDIAN", 
                      "COUNT", "DIMENSION", "MEASURE", "ATTRIBUTE", "FILTER", 
                      "MERGE", "EXP", "ROLE", "VIRAL", "CHARSET_MATCH", 
                      "TYPE", "NVL", "HIERARCHY", "OPTIONAL", "INVALID", 
                      "VALUE_DOMAIN", "VARIABLE", "DATA", "STRUCTURE", "DATASET", 
                      "OPERATOR", "DEFINE", "PUT_SYMBOL", "DATAPOINT", "HIERARCHICAL", 
                      "RULESET", "RULE", "END", "ALTER_DATASET", "LTRIM", 
                      "RTRIM", "INSTR", "REPLACE", "CEIL", "FLOOR", "SQRT", 
                      "ANY", "SETDIFF", "STDDEV_POP", "STDDEV_SAMP", "VAR_POP", 
                      "VAR_SAMP", "GROUP", "EXCEPT", "HAVING", "FIRST_VALUE", 
                      "LAST_VALUE", "LAG", "LEAD", "RATIO_TO_REPORT", "OVER", 
                      "PRECEDING", "FOLLOWING", "UNBOUNDED", "PARTITION", 
                      "ROWS", "RANGE", "CURRENT", "VALID", "FILL_TIME_SERIES", 
                      "FLOW_TO_STOCK", "STOCK_TO_FLOW", "TIMESHIFT", "MEASURES", 
                      "NO_MEASURES", "CONDITION", "BOOLEAN", "DATE", "TIME_PERIOD", 
                      "NUMBER", "STRING", "INTEGER", "FLOAT", "LIST", "RECORD", 
                      "RESTRICT", "YYYY", "MM", "DD", "MAX_LENGTH", "REGEXP", 
                      "IS", "WHEN", "FROM", "AGGREGATES", "POINTS", "POINT", 
                      "TOTAL", "PARTIAL", "ALWAYS", "INNER_JOIN", "LEFT_JOIN", 
                      "CROSS_JOIN", "FULL_JOIN", "MAPS_FROM", "MAPS_TO", 
                      "MAP_TO", "MAP_FROM", "RETURNS", "PIVOT", "UNPIVOT", 
                      "SUBSPACE", "APPLY", "CONDITIONED", "PERIOD_INDICATOR", 
                      "SINGLE", "DURATION", "TIME_AGG", "UNIT", "VALUE", 
                      "VALUEDOMAINS", "VARIABLES", "INPUT", "OUTPUT", "CAST", 
                      "RULE_PRIORITY", "DATASET_PRIORITY", "DEFAULT", "CHECK_DATAPOINT", 
                      "CHECK_HIERARCHY", "COMPUTED", "NON_NULL", "NON_ZERO", 
                      "PARTIAL_NULL", "PARTIAL_ZERO", "ALWAYS_NULL", "ALWAYS_ZERO", 
                      "COMPONENTS", "ALL_MEASURES", "SCALAR", "COMPONENT", 
                      "DATAPOINT_ON_VD", "DATAPOINT_ON_VAR", "HIERARCHICAL_ON_VD", 
                      "HIERARCHICAL_ON_VAR", "SET", "LANGUAGE", "INTEGER_CONSTANT", 
                      "POSITIVE_CONSTANT", "NEGATIVE_CONSTANT", "FLOAT_CONSTANT", 
                      "BOOLEAN_CONSTANT", "NULL_CONSTANT", "STRING_CONSTANT", 
                      "IDENTIFIER", "DIGITS0_9", "MONTH", "DAY", "YEAR", 
                      "WEEK", "HOURS", "MINUTES", "SECONDS", "DATE_FORMAT", 
                      "TIME_FORMAT", "TIME_UNIT", "TIME", "WS", "EOL", "ML_COMMENT", 
                      "SL_COMMENT", "COMPARISON_OP", "FREQUENCY" ];

var ruleNames =  [ "start", "statement", "persistentAssignment", "optionalExpr", 
                   "expr", "exprComplex", "timeExpr", "defHierarchical", 
                   "ruleClauseHierarchical", "ruleItemHierarchical", "hierRuleSignature", 
                   "valueDomainSignature", "codeItemRelation", "codeItemRelationClause", 
                   "codeItemRef", "defDatapoint", "ruleClauseDatapoint", 
                   "ruleItemDatapoint", "rulesetSignature", "varSignature", 
                   "defExpr", "defOperator", "parameterItem", "callFunction", 
                   "exprAtom", "ref", "identifierList", "lists", "evalExpr", 
                   "castExpr", "periodExpr", "timeShiftExpr", "timeSeriesExpr", 
                   "timeAggExpr", "validationExpr", "validationDatapoint", 
                   "validationHierarchical", "erCode", "erLevel", "hierarchyExpr", 
                   "datasetClause", "anFunctionClause", "partitionByClause", 
                   "orderByClause", "windowingClause", "limitClauseItem", 
                   "joinExpr", "joinClause", "joinBody", "joinCalcClause", 
                   "joinCalcClauseItem", "joinCalcExpr", "joinAggClause", 
                   "joinAggClauseItem", "joinAggExpr", "joinKeepClause", 
                   "joinDropClause", "joinFilterClause", "joinRenameClause", 
                   "joinApplyClause", "anFunction", "aggregateClause", "aggrFunctionClause", 
                   "getFiltersClause", "getFilterClause", "aggrClause", 
                   "filterClause", "renameClause", "aggrFunction", "calcClause", 
                   "calcClauseItem", "calcExpr", "dropClause", "dropClauseItem", 
                   "keepClause", "keepClauseItem", "unpivotExpr", "pivotExpr", 
                   "subspaceExpr", "inBetweenClause", "setExpr", "subscriptExpr", 
                   "aggrInvocation", "aggrInvocationCompExpr", "aggrFunctionName", 
                   "groupingClause", "havingClause", "returnAll", "componentRole", 
                   "viralAttribute", "logBase", "exponent", "persistentDatasetID", 
                   "datasetID", "rulesetID", "varID", "componentID", "operatorID", 
                   "routineName", "joinKeyword", "groupKeyword", "constant", 
                   "componentType2", "scalarType", "basicScalarType", "valueDomainName", 
                   "setName", "scalarTypeConstraint", "dataType", "componentType", 
                   "datasetType", "compConstraint", "multModifier", "rulesetType", 
                   "dpRuleset", "hrRuleset", "prodValueDomains", "prodVariables", 
                   "operatorType", "inputParameterType", "outputParameterType", 
                   "scalarSetType", "retainType", "defineDatapointRuleset", 
                   "defineHierarchicalRuleset", "endDatapointRuleset", "endHierarchicalRuleset", 
                   "defineDataStructure" ];

function VtlParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

VtlParser.prototype = Object.create(antlr4.Parser.prototype);
VtlParser.prototype.constructor = VtlParser;

Object.defineProperty(VtlParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

VtlParser.EOF = antlr4.Token.EOF;
VtlParser.T__0 = 1;
VtlParser.T__1 = 2;
VtlParser.T__2 = 3;
VtlParser.T__3 = 4;
VtlParser.T__4 = 5;
VtlParser.T__5 = 6;
VtlParser.T__6 = 7;
VtlParser.T__7 = 8;
VtlParser.T__8 = 9;
VtlParser.T__9 = 10;
VtlParser.T__10 = 11;
VtlParser.T__11 = 12;
VtlParser.T__12 = 13;
VtlParser.T__13 = 14;
VtlParser.T__14 = 15;
VtlParser.T__15 = 16;
VtlParser.T__16 = 17;
VtlParser.T__17 = 18;
VtlParser.ASSIGN = 19;
VtlParser.MEMBERSHIP = 20;
VtlParser.EVAL = 21;
VtlParser.IF = 22;
VtlParser.THEN = 23;
VtlParser.ELSE = 24;
VtlParser.USING = 25;
VtlParser.WITH = 26;
VtlParser.CURRENT_DATE = 27;
VtlParser.ON = 28;
VtlParser.DROP = 29;
VtlParser.KEEP = 30;
VtlParser.CALC = 31;
VtlParser.ATTRCALC = 32;
VtlParser.RENAME = 33;
VtlParser.AS = 34;
VtlParser.AND = 35;
VtlParser.OR = 36;
VtlParser.XOR = 37;
VtlParser.NOT = 38;
VtlParser.BETWEEN = 39;
VtlParser.IN = 40;
VtlParser.NOT_IN = 41;
VtlParser.ISNULL = 42;
VtlParser.EX = 43;
VtlParser.UNION = 44;
VtlParser.DIFF = 45;
VtlParser.SYMDIFF = 46;
VtlParser.INTERSECT = 47;
VtlParser.KEYS = 48;
VtlParser.CARTESIAN_PER = 49;
VtlParser.INTYEAR = 50;
VtlParser.INTMONTH = 51;
VtlParser.INTDAY = 52;
VtlParser.CHECK = 53;
VtlParser.EXISTS_IN = 54;
VtlParser.TO = 55;
VtlParser.RETURN = 56;
VtlParser.IMBALANCE = 57;
VtlParser.ERRORCODE = 58;
VtlParser.ALL = 59;
VtlParser.AGGREGATE = 60;
VtlParser.ERRORLEVEL = 61;
VtlParser.ORDER = 62;
VtlParser.BY = 63;
VtlParser.RANK = 64;
VtlParser.ASC = 65;
VtlParser.DESC = 66;
VtlParser.MIN = 67;
VtlParser.MAX = 68;
VtlParser.FIRST = 69;
VtlParser.LAST = 70;
VtlParser.INDEXOF = 71;
VtlParser.ABS = 72;
VtlParser.KEY = 73;
VtlParser.LN = 74;
VtlParser.LOG = 75;
VtlParser.TRUNC = 76;
VtlParser.ROUND = 77;
VtlParser.POWER = 78;
VtlParser.MOD = 79;
VtlParser.LEN = 80;
VtlParser.CONCAT = 81;
VtlParser.TRIM = 82;
VtlParser.UCASE = 83;
VtlParser.LCASE = 84;
VtlParser.SUBSTR = 85;
VtlParser.SUM = 86;
VtlParser.AVG = 87;
VtlParser.MEDIAN = 88;
VtlParser.COUNT = 89;
VtlParser.DIMENSION = 90;
VtlParser.MEASURE = 91;
VtlParser.ATTRIBUTE = 92;
VtlParser.FILTER = 93;
VtlParser.MERGE = 94;
VtlParser.EXP = 95;
VtlParser.ROLE = 96;
VtlParser.VIRAL = 97;
VtlParser.CHARSET_MATCH = 98;
VtlParser.TYPE = 99;
VtlParser.NVL = 100;
VtlParser.HIERARCHY = 101;
VtlParser.OPTIONAL = 102;
VtlParser.INVALID = 103;
VtlParser.VALUE_DOMAIN = 104;
VtlParser.VARIABLE = 105;
VtlParser.DATA = 106;
VtlParser.STRUCTURE = 107;
VtlParser.DATASET = 108;
VtlParser.OPERATOR = 109;
VtlParser.DEFINE = 110;
VtlParser.PUT_SYMBOL = 111;
VtlParser.DATAPOINT = 112;
VtlParser.HIERARCHICAL = 113;
VtlParser.RULESET = 114;
VtlParser.RULE = 115;
VtlParser.END = 116;
VtlParser.ALTER_DATASET = 117;
VtlParser.LTRIM = 118;
VtlParser.RTRIM = 119;
VtlParser.INSTR = 120;
VtlParser.REPLACE = 121;
VtlParser.CEIL = 122;
VtlParser.FLOOR = 123;
VtlParser.SQRT = 124;
VtlParser.ANY = 125;
VtlParser.SETDIFF = 126;
VtlParser.STDDEV_POP = 127;
VtlParser.STDDEV_SAMP = 128;
VtlParser.VAR_POP = 129;
VtlParser.VAR_SAMP = 130;
VtlParser.GROUP = 131;
VtlParser.EXCEPT = 132;
VtlParser.HAVING = 133;
VtlParser.FIRST_VALUE = 134;
VtlParser.LAST_VALUE = 135;
VtlParser.LAG = 136;
VtlParser.LEAD = 137;
VtlParser.RATIO_TO_REPORT = 138;
VtlParser.OVER = 139;
VtlParser.PRECEDING = 140;
VtlParser.FOLLOWING = 141;
VtlParser.UNBOUNDED = 142;
VtlParser.PARTITION = 143;
VtlParser.ROWS = 144;
VtlParser.RANGE = 145;
VtlParser.CURRENT = 146;
VtlParser.VALID = 147;
VtlParser.FILL_TIME_SERIES = 148;
VtlParser.FLOW_TO_STOCK = 149;
VtlParser.STOCK_TO_FLOW = 150;
VtlParser.TIMESHIFT = 151;
VtlParser.MEASURES = 152;
VtlParser.NO_MEASURES = 153;
VtlParser.CONDITION = 154;
VtlParser.BOOLEAN = 155;
VtlParser.DATE = 156;
VtlParser.TIME_PERIOD = 157;
VtlParser.NUMBER = 158;
VtlParser.STRING = 159;
VtlParser.INTEGER = 160;
VtlParser.FLOAT = 161;
VtlParser.LIST = 162;
VtlParser.RECORD = 163;
VtlParser.RESTRICT = 164;
VtlParser.YYYY = 165;
VtlParser.MM = 166;
VtlParser.DD = 167;
VtlParser.MAX_LENGTH = 168;
VtlParser.REGEXP = 169;
VtlParser.IS = 170;
VtlParser.WHEN = 171;
VtlParser.FROM = 172;
VtlParser.AGGREGATES = 173;
VtlParser.POINTS = 174;
VtlParser.POINT = 175;
VtlParser.TOTAL = 176;
VtlParser.PARTIAL = 177;
VtlParser.ALWAYS = 178;
VtlParser.INNER_JOIN = 179;
VtlParser.LEFT_JOIN = 180;
VtlParser.CROSS_JOIN = 181;
VtlParser.FULL_JOIN = 182;
VtlParser.MAPS_FROM = 183;
VtlParser.MAPS_TO = 184;
VtlParser.MAP_TO = 185;
VtlParser.MAP_FROM = 186;
VtlParser.RETURNS = 187;
VtlParser.PIVOT = 188;
VtlParser.UNPIVOT = 189;
VtlParser.SUBSPACE = 190;
VtlParser.APPLY = 191;
VtlParser.CONDITIONED = 192;
VtlParser.PERIOD_INDICATOR = 193;
VtlParser.SINGLE = 194;
VtlParser.DURATION = 195;
VtlParser.TIME_AGG = 196;
VtlParser.UNIT = 197;
VtlParser.VALUE = 198;
VtlParser.VALUEDOMAINS = 199;
VtlParser.VARIABLES = 200;
VtlParser.INPUT = 201;
VtlParser.OUTPUT = 202;
VtlParser.CAST = 203;
VtlParser.RULE_PRIORITY = 204;
VtlParser.DATASET_PRIORITY = 205;
VtlParser.DEFAULT = 206;
VtlParser.CHECK_DATAPOINT = 207;
VtlParser.CHECK_HIERARCHY = 208;
VtlParser.COMPUTED = 209;
VtlParser.NON_NULL = 210;
VtlParser.NON_ZERO = 211;
VtlParser.PARTIAL_NULL = 212;
VtlParser.PARTIAL_ZERO = 213;
VtlParser.ALWAYS_NULL = 214;
VtlParser.ALWAYS_ZERO = 215;
VtlParser.COMPONENTS = 216;
VtlParser.ALL_MEASURES = 217;
VtlParser.SCALAR = 218;
VtlParser.COMPONENT = 219;
VtlParser.DATAPOINT_ON_VD = 220;
VtlParser.DATAPOINT_ON_VAR = 221;
VtlParser.HIERARCHICAL_ON_VD = 222;
VtlParser.HIERARCHICAL_ON_VAR = 223;
VtlParser.SET = 224;
VtlParser.LANGUAGE = 225;
VtlParser.INTEGER_CONSTANT = 226;
VtlParser.POSITIVE_CONSTANT = 227;
VtlParser.NEGATIVE_CONSTANT = 228;
VtlParser.FLOAT_CONSTANT = 229;
VtlParser.BOOLEAN_CONSTANT = 230;
VtlParser.NULL_CONSTANT = 231;
VtlParser.STRING_CONSTANT = 232;
VtlParser.IDENTIFIER = 233;
VtlParser.DIGITS0_9 = 234;
VtlParser.MONTH = 235;
VtlParser.DAY = 236;
VtlParser.YEAR = 237;
VtlParser.WEEK = 238;
VtlParser.HOURS = 239;
VtlParser.MINUTES = 240;
VtlParser.SECONDS = 241;
VtlParser.DATE_FORMAT = 242;
VtlParser.TIME_FORMAT = 243;
VtlParser.TIME_UNIT = 244;
VtlParser.TIME = 245;
VtlParser.WS = 246;
VtlParser.EOL = 247;
VtlParser.ML_COMMENT = 248;
VtlParser.SL_COMMENT = 249;
VtlParser.COMPARISON_OP = 250;
VtlParser.FREQUENCY = 251;

VtlParser.RULE_start = 0;
VtlParser.RULE_statement = 1;
VtlParser.RULE_persistentAssignment = 2;
VtlParser.RULE_optionalExpr = 3;
VtlParser.RULE_expr = 4;
VtlParser.RULE_exprComplex = 5;
VtlParser.RULE_timeExpr = 6;
VtlParser.RULE_defHierarchical = 7;
VtlParser.RULE_ruleClauseHierarchical = 8;
VtlParser.RULE_ruleItemHierarchical = 9;
VtlParser.RULE_hierRuleSignature = 10;
VtlParser.RULE_valueDomainSignature = 11;
VtlParser.RULE_codeItemRelation = 12;
VtlParser.RULE_codeItemRelationClause = 13;
VtlParser.RULE_codeItemRef = 14;
VtlParser.RULE_defDatapoint = 15;
VtlParser.RULE_ruleClauseDatapoint = 16;
VtlParser.RULE_ruleItemDatapoint = 17;
VtlParser.RULE_rulesetSignature = 18;
VtlParser.RULE_varSignature = 19;
VtlParser.RULE_defExpr = 20;
VtlParser.RULE_defOperator = 21;
VtlParser.RULE_parameterItem = 22;
VtlParser.RULE_callFunction = 23;
VtlParser.RULE_exprAtom = 24;
VtlParser.RULE_ref = 25;
VtlParser.RULE_identifierList = 26;
VtlParser.RULE_lists = 27;
VtlParser.RULE_evalExpr = 28;
VtlParser.RULE_castExpr = 29;
VtlParser.RULE_periodExpr = 30;
VtlParser.RULE_timeShiftExpr = 31;
VtlParser.RULE_timeSeriesExpr = 32;
VtlParser.RULE_timeAggExpr = 33;
VtlParser.RULE_validationExpr = 34;
VtlParser.RULE_validationDatapoint = 35;
VtlParser.RULE_validationHierarchical = 36;
VtlParser.RULE_erCode = 37;
VtlParser.RULE_erLevel = 38;
VtlParser.RULE_hierarchyExpr = 39;
VtlParser.RULE_datasetClause = 40;
VtlParser.RULE_anFunctionClause = 41;
VtlParser.RULE_partitionByClause = 42;
VtlParser.RULE_orderByClause = 43;
VtlParser.RULE_windowingClause = 44;
VtlParser.RULE_limitClauseItem = 45;
VtlParser.RULE_joinExpr = 46;
VtlParser.RULE_joinClause = 47;
VtlParser.RULE_joinBody = 48;
VtlParser.RULE_joinCalcClause = 49;
VtlParser.RULE_joinCalcClauseItem = 50;
VtlParser.RULE_joinCalcExpr = 51;
VtlParser.RULE_joinAggClause = 52;
VtlParser.RULE_joinAggClauseItem = 53;
VtlParser.RULE_joinAggExpr = 54;
VtlParser.RULE_joinKeepClause = 55;
VtlParser.RULE_joinDropClause = 56;
VtlParser.RULE_joinFilterClause = 57;
VtlParser.RULE_joinRenameClause = 58;
VtlParser.RULE_joinApplyClause = 59;
VtlParser.RULE_anFunction = 60;
VtlParser.RULE_aggregateClause = 61;
VtlParser.RULE_aggrFunctionClause = 62;
VtlParser.RULE_getFiltersClause = 63;
VtlParser.RULE_getFilterClause = 64;
VtlParser.RULE_aggrClause = 65;
VtlParser.RULE_filterClause = 66;
VtlParser.RULE_renameClause = 67;
VtlParser.RULE_aggrFunction = 68;
VtlParser.RULE_calcClause = 69;
VtlParser.RULE_calcClauseItem = 70;
VtlParser.RULE_calcExpr = 71;
VtlParser.RULE_dropClause = 72;
VtlParser.RULE_dropClauseItem = 73;
VtlParser.RULE_keepClause = 74;
VtlParser.RULE_keepClauseItem = 75;
VtlParser.RULE_unpivotExpr = 76;
VtlParser.RULE_pivotExpr = 77;
VtlParser.RULE_subspaceExpr = 78;
VtlParser.RULE_inBetweenClause = 79;
VtlParser.RULE_setExpr = 80;
VtlParser.RULE_subscriptExpr = 81;
VtlParser.RULE_aggrInvocation = 82;
VtlParser.RULE_aggrInvocationCompExpr = 83;
VtlParser.RULE_aggrFunctionName = 84;
VtlParser.RULE_groupingClause = 85;
VtlParser.RULE_havingClause = 86;
VtlParser.RULE_returnAll = 87;
VtlParser.RULE_componentRole = 88;
VtlParser.RULE_viralAttribute = 89;
VtlParser.RULE_logBase = 90;
VtlParser.RULE_exponent = 91;
VtlParser.RULE_persistentDatasetID = 92;
VtlParser.RULE_datasetID = 93;
VtlParser.RULE_rulesetID = 94;
VtlParser.RULE_varID = 95;
VtlParser.RULE_componentID = 96;
VtlParser.RULE_operatorID = 97;
VtlParser.RULE_routineName = 98;
VtlParser.RULE_joinKeyword = 99;
VtlParser.RULE_groupKeyword = 100;
VtlParser.RULE_constant = 101;
VtlParser.RULE_componentType2 = 102;
VtlParser.RULE_scalarType = 103;
VtlParser.RULE_basicScalarType = 104;
VtlParser.RULE_valueDomainName = 105;
VtlParser.RULE_setName = 106;
VtlParser.RULE_scalarTypeConstraint = 107;
VtlParser.RULE_dataType = 108;
VtlParser.RULE_componentType = 109;
VtlParser.RULE_datasetType = 110;
VtlParser.RULE_compConstraint = 111;
VtlParser.RULE_multModifier = 112;
VtlParser.RULE_rulesetType = 113;
VtlParser.RULE_dpRuleset = 114;
VtlParser.RULE_hrRuleset = 115;
VtlParser.RULE_prodValueDomains = 116;
VtlParser.RULE_prodVariables = 117;
VtlParser.RULE_operatorType = 118;
VtlParser.RULE_inputParameterType = 119;
VtlParser.RULE_outputParameterType = 120;
VtlParser.RULE_scalarSetType = 121;
VtlParser.RULE_retainType = 122;
VtlParser.RULE_defineDatapointRuleset = 123;
VtlParser.RULE_defineHierarchicalRuleset = 124;
VtlParser.RULE_endDatapointRuleset = 125;
VtlParser.RULE_endHierarchicalRuleset = 126;
VtlParser.RULE_defineDataStructure = 127;


function StartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_start;
    return this;
}

StartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StartContext.prototype.constructor = StartContext;

StartContext.prototype.EOF = function() {
    return this.getToken(VtlParser.EOF, 0);
};

StartContext.prototype.EOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.EOL);
    } else {
        return this.getToken(VtlParser.EOL, i);
    }
};


StartContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

StartContext.prototype.ML_COMMENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.ML_COMMENT);
    } else {
        return this.getToken(VtlParser.ML_COMMENT, i);
    }
};


StartContext.prototype.SL_COMMENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.SL_COMMENT);
    } else {
        return this.getToken(VtlParser.SL_COMMENT, i);
    }
};


StartContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterStart(this);
	}
};

StartContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitStart(this);
	}
};




VtlParser.StartContext = StartContext;

VtlParser.prototype.start = function() {

    var localctx = new StartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, VtlParser.RULE_start);
    var _la = 0; // Token type
    try {
        this.state = 283;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 274;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,3,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 257;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VtlParser.T__2) | (1 << VtlParser.T__3) | (1 << VtlParser.T__12) | (1 << VtlParser.EVAL) | (1 << VtlParser.IF) | (1 << VtlParser.CURRENT_DATE))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (VtlParser.NOT - 38)) | (1 << (VtlParser.BETWEEN - 38)) | (1 << (VtlParser.ISNULL - 38)) | (1 << (VtlParser.UNION - 38)) | (1 << (VtlParser.SYMDIFF - 38)) | (1 << (VtlParser.INTERSECT - 38)) | (1 << (VtlParser.CHECK - 38)) | (1 << (VtlParser.EXISTS_IN - 38)) | (1 << (VtlParser.RANK - 38)) | (1 << (VtlParser.MIN - 38)) | (1 << (VtlParser.MAX - 38)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (VtlParser.ABS - 72)) | (1 << (VtlParser.LN - 72)) | (1 << (VtlParser.LOG - 72)) | (1 << (VtlParser.TRUNC - 72)) | (1 << (VtlParser.ROUND - 72)) | (1 << (VtlParser.POWER - 72)) | (1 << (VtlParser.MOD - 72)) | (1 << (VtlParser.LEN - 72)) | (1 << (VtlParser.TRIM - 72)) | (1 << (VtlParser.UCASE - 72)) | (1 << (VtlParser.LCASE - 72)) | (1 << (VtlParser.SUBSTR - 72)) | (1 << (VtlParser.SUM - 72)) | (1 << (VtlParser.AVG - 72)) | (1 << (VtlParser.MEDIAN - 72)) | (1 << (VtlParser.COUNT - 72)) | (1 << (VtlParser.EXP - 72)) | (1 << (VtlParser.CHARSET_MATCH - 72)) | (1 << (VtlParser.NVL - 72)) | (1 << (VtlParser.HIERARCHY - 72)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (VtlParser.DEFINE - 110)) | (1 << (VtlParser.LTRIM - 110)) | (1 << (VtlParser.RTRIM - 110)) | (1 << (VtlParser.INSTR - 110)) | (1 << (VtlParser.REPLACE - 110)) | (1 << (VtlParser.CEIL - 110)) | (1 << (VtlParser.FLOOR - 110)) | (1 << (VtlParser.SQRT - 110)) | (1 << (VtlParser.SETDIFF - 110)) | (1 << (VtlParser.STDDEV_POP - 110)) | (1 << (VtlParser.STDDEV_SAMP - 110)) | (1 << (VtlParser.VAR_POP - 110)) | (1 << (VtlParser.VAR_SAMP - 110)) | (1 << (VtlParser.FIRST_VALUE - 110)) | (1 << (VtlParser.LAST_VALUE - 110)) | (1 << (VtlParser.LAG - 110)) | (1 << (VtlParser.LEAD - 110)) | (1 << (VtlParser.RATIO_TO_REPORT - 110)))) !== 0) || ((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (VtlParser.FILL_TIME_SERIES - 148)) | (1 << (VtlParser.FLOW_TO_STOCK - 148)) | (1 << (VtlParser.STOCK_TO_FLOW - 148)) | (1 << (VtlParser.TIMESHIFT - 148)) | (1 << (VtlParser.INNER_JOIN - 148)))) !== 0) || ((((_la - 180)) & ~0x1f) == 0 && ((1 << (_la - 180)) & ((1 << (VtlParser.LEFT_JOIN - 180)) | (1 << (VtlParser.CROSS_JOIN - 180)) | (1 << (VtlParser.FULL_JOIN - 180)) | (1 << (VtlParser.PERIOD_INDICATOR - 180)) | (1 << (VtlParser.TIME_AGG - 180)) | (1 << (VtlParser.CAST - 180)) | (1 << (VtlParser.CHECK_DATAPOINT - 180)) | (1 << (VtlParser.CHECK_HIERARCHY - 180)))) !== 0) || ((((_la - 226)) & ~0x1f) == 0 && ((1 << (_la - 226)) & ((1 << (VtlParser.INTEGER_CONSTANT - 226)) | (1 << (VtlParser.FLOAT_CONSTANT - 226)) | (1 << (VtlParser.BOOLEAN_CONSTANT - 226)) | (1 << (VtlParser.NULL_CONSTANT - 226)) | (1 << (VtlParser.STRING_CONSTANT - 226)) | (1 << (VtlParser.IDENTIFIER - 226)))) !== 0)) {
                        this.state = 256;
                        this.statement();
                    }

                    this.state = 262;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===VtlParser.ML_COMMENT) {
                        this.state = 259;
                        this.match(VtlParser.ML_COMMENT);
                        this.state = 264;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 268;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===VtlParser.SL_COMMENT) {
                        this.state = 265;
                        this.match(VtlParser.SL_COMMENT);
                        this.state = 270;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 271;
                    this.match(VtlParser.EOL); 
                }
                this.state = 276;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,3,this._ctx);
            }

            this.state = 278;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VtlParser.T__2) | (1 << VtlParser.T__3) | (1 << VtlParser.T__12) | (1 << VtlParser.EVAL) | (1 << VtlParser.IF) | (1 << VtlParser.CURRENT_DATE))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (VtlParser.NOT - 38)) | (1 << (VtlParser.BETWEEN - 38)) | (1 << (VtlParser.ISNULL - 38)) | (1 << (VtlParser.UNION - 38)) | (1 << (VtlParser.SYMDIFF - 38)) | (1 << (VtlParser.INTERSECT - 38)) | (1 << (VtlParser.CHECK - 38)) | (1 << (VtlParser.EXISTS_IN - 38)) | (1 << (VtlParser.RANK - 38)) | (1 << (VtlParser.MIN - 38)) | (1 << (VtlParser.MAX - 38)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (VtlParser.ABS - 72)) | (1 << (VtlParser.LN - 72)) | (1 << (VtlParser.LOG - 72)) | (1 << (VtlParser.TRUNC - 72)) | (1 << (VtlParser.ROUND - 72)) | (1 << (VtlParser.POWER - 72)) | (1 << (VtlParser.MOD - 72)) | (1 << (VtlParser.LEN - 72)) | (1 << (VtlParser.TRIM - 72)) | (1 << (VtlParser.UCASE - 72)) | (1 << (VtlParser.LCASE - 72)) | (1 << (VtlParser.SUBSTR - 72)) | (1 << (VtlParser.SUM - 72)) | (1 << (VtlParser.AVG - 72)) | (1 << (VtlParser.MEDIAN - 72)) | (1 << (VtlParser.COUNT - 72)) | (1 << (VtlParser.EXP - 72)) | (1 << (VtlParser.CHARSET_MATCH - 72)) | (1 << (VtlParser.NVL - 72)) | (1 << (VtlParser.HIERARCHY - 72)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (VtlParser.DEFINE - 110)) | (1 << (VtlParser.LTRIM - 110)) | (1 << (VtlParser.RTRIM - 110)) | (1 << (VtlParser.INSTR - 110)) | (1 << (VtlParser.REPLACE - 110)) | (1 << (VtlParser.CEIL - 110)) | (1 << (VtlParser.FLOOR - 110)) | (1 << (VtlParser.SQRT - 110)) | (1 << (VtlParser.SETDIFF - 110)) | (1 << (VtlParser.STDDEV_POP - 110)) | (1 << (VtlParser.STDDEV_SAMP - 110)) | (1 << (VtlParser.VAR_POP - 110)) | (1 << (VtlParser.VAR_SAMP - 110)) | (1 << (VtlParser.FIRST_VALUE - 110)) | (1 << (VtlParser.LAST_VALUE - 110)) | (1 << (VtlParser.LAG - 110)) | (1 << (VtlParser.LEAD - 110)) | (1 << (VtlParser.RATIO_TO_REPORT - 110)))) !== 0) || ((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (VtlParser.FILL_TIME_SERIES - 148)) | (1 << (VtlParser.FLOW_TO_STOCK - 148)) | (1 << (VtlParser.STOCK_TO_FLOW - 148)) | (1 << (VtlParser.TIMESHIFT - 148)) | (1 << (VtlParser.INNER_JOIN - 148)))) !== 0) || ((((_la - 180)) & ~0x1f) == 0 && ((1 << (_la - 180)) & ((1 << (VtlParser.LEFT_JOIN - 180)) | (1 << (VtlParser.CROSS_JOIN - 180)) | (1 << (VtlParser.FULL_JOIN - 180)) | (1 << (VtlParser.PERIOD_INDICATOR - 180)) | (1 << (VtlParser.TIME_AGG - 180)) | (1 << (VtlParser.CAST - 180)) | (1 << (VtlParser.CHECK_DATAPOINT - 180)) | (1 << (VtlParser.CHECK_HIERARCHY - 180)))) !== 0) || ((((_la - 226)) & ~0x1f) == 0 && ((1 << (_la - 226)) & ((1 << (VtlParser.INTEGER_CONSTANT - 226)) | (1 << (VtlParser.FLOAT_CONSTANT - 226)) | (1 << (VtlParser.BOOLEAN_CONSTANT - 226)) | (1 << (VtlParser.NULL_CONSTANT - 226)) | (1 << (VtlParser.STRING_CONSTANT - 226)) | (1 << (VtlParser.IDENTIFIER - 226)))) !== 0)) {
                this.state = 277;
                this.statement();
            }

            this.state = 280;
            this.match(VtlParser.EOF);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 281;
            this.match(VtlParser.ML_COMMENT);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 282;
            this.match(VtlParser.SL_COMMENT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

StatementContext.prototype.varID = function() {
    return this.getTypedRuleContext(VarIDContext,0);
};

StatementContext.prototype.ASSIGN = function() {
    return this.getToken(VtlParser.ASSIGN, 0);
};

StatementContext.prototype.persistentAssignment = function() {
    return this.getTypedRuleContext(PersistentAssignmentContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitStatement(this);
	}
};




VtlParser.StatementContext = StatementContext;

VtlParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, VtlParser.RULE_statement);
    try {
        this.state = 292;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 288;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
            if(la_===1) {
                this.state = 285;
                this.varID();
                this.state = 286;
                this.match(VtlParser.ASSIGN);

            }
            this.state = 290;
            this.expr(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 291;
            this.persistentAssignment();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PersistentAssignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_persistentAssignment;
    return this;
}

PersistentAssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PersistentAssignmentContext.prototype.constructor = PersistentAssignmentContext;

PersistentAssignmentContext.prototype.varID = function() {
    return this.getTypedRuleContext(VarIDContext,0);
};

PersistentAssignmentContext.prototype.PUT_SYMBOL = function() {
    return this.getToken(VtlParser.PUT_SYMBOL, 0);
};

PersistentAssignmentContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

PersistentAssignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterPersistentAssignment(this);
	}
};

PersistentAssignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitPersistentAssignment(this);
	}
};




VtlParser.PersistentAssignmentContext = PersistentAssignmentContext;

VtlParser.prototype.persistentAssignment = function() {

    var localctx = new PersistentAssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, VtlParser.RULE_persistentAssignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 294;
        this.varID();
        this.state = 295;
        this.match(VtlParser.PUT_SYMBOL);
        this.state = 296;
        this.expr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptionalExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_optionalExpr;
    return this;
}

OptionalExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionalExprContext.prototype.constructor = OptionalExprContext;

OptionalExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

OptionalExprContext.prototype.OPTIONAL = function() {
    return this.getToken(VtlParser.OPTIONAL, 0);
};

OptionalExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterOptionalExpr(this);
	}
};

OptionalExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitOptionalExpr(this);
	}
};




VtlParser.OptionalExprContext = OptionalExprContext;

VtlParser.prototype.optionalExpr = function() {

    var localctx = new OptionalExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, VtlParser.RULE_optionalExpr);
    try {
        this.state = 300;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.T__2:
        case VtlParser.T__3:
        case VtlParser.T__12:
        case VtlParser.EVAL:
        case VtlParser.IF:
        case VtlParser.CURRENT_DATE:
        case VtlParser.NOT:
        case VtlParser.BETWEEN:
        case VtlParser.ISNULL:
        case VtlParser.UNION:
        case VtlParser.SYMDIFF:
        case VtlParser.INTERSECT:
        case VtlParser.CHECK:
        case VtlParser.EXISTS_IN:
        case VtlParser.RANK:
        case VtlParser.MIN:
        case VtlParser.MAX:
        case VtlParser.ABS:
        case VtlParser.LN:
        case VtlParser.LOG:
        case VtlParser.TRUNC:
        case VtlParser.ROUND:
        case VtlParser.POWER:
        case VtlParser.MOD:
        case VtlParser.LEN:
        case VtlParser.TRIM:
        case VtlParser.UCASE:
        case VtlParser.LCASE:
        case VtlParser.SUBSTR:
        case VtlParser.SUM:
        case VtlParser.AVG:
        case VtlParser.MEDIAN:
        case VtlParser.COUNT:
        case VtlParser.EXP:
        case VtlParser.CHARSET_MATCH:
        case VtlParser.NVL:
        case VtlParser.HIERARCHY:
        case VtlParser.DEFINE:
        case VtlParser.LTRIM:
        case VtlParser.RTRIM:
        case VtlParser.INSTR:
        case VtlParser.REPLACE:
        case VtlParser.CEIL:
        case VtlParser.FLOOR:
        case VtlParser.SQRT:
        case VtlParser.SETDIFF:
        case VtlParser.STDDEV_POP:
        case VtlParser.STDDEV_SAMP:
        case VtlParser.VAR_POP:
        case VtlParser.VAR_SAMP:
        case VtlParser.FIRST_VALUE:
        case VtlParser.LAST_VALUE:
        case VtlParser.LAG:
        case VtlParser.LEAD:
        case VtlParser.RATIO_TO_REPORT:
        case VtlParser.FILL_TIME_SERIES:
        case VtlParser.FLOW_TO_STOCK:
        case VtlParser.STOCK_TO_FLOW:
        case VtlParser.TIMESHIFT:
        case VtlParser.INNER_JOIN:
        case VtlParser.LEFT_JOIN:
        case VtlParser.CROSS_JOIN:
        case VtlParser.FULL_JOIN:
        case VtlParser.PERIOD_INDICATOR:
        case VtlParser.TIME_AGG:
        case VtlParser.CAST:
        case VtlParser.CHECK_DATAPOINT:
        case VtlParser.CHECK_HIERARCHY:
        case VtlParser.INTEGER_CONSTANT:
        case VtlParser.FLOAT_CONSTANT:
        case VtlParser.BOOLEAN_CONSTANT:
        case VtlParser.NULL_CONSTANT:
        case VtlParser.STRING_CONSTANT:
        case VtlParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 298;
            this.expr(0);
            break;
        case VtlParser.OPTIONAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 299;
            this.match(VtlParser.OPTIONAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_expr;
    return this;
}

ExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprContext.prototype.constructor = ExprContext;

ExprContext.prototype.exprAtom = function() {
    return this.getTypedRuleContext(ExprAtomContext,0);
};

ExprContext.prototype.MEMBERSHIP = function() {
    return this.getToken(VtlParser.MEMBERSHIP, 0);
};

ExprContext.prototype.componentID = function() {
    return this.getTypedRuleContext(ComponentIDContext,0);
};

ExprContext.prototype.datasetClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DatasetClauseContext);
    } else {
        return this.getTypedRuleContext(DatasetClauseContext,i);
    }
};

ExprContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

ExprContext.prototype.ASSIGN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.ASSIGN);
    } else {
        return this.getToken(VtlParser.ASSIGN, i);
    }
};


ExprContext.prototype.NOT = function() {
    return this.getToken(VtlParser.NOT, 0);
};

ExprContext.prototype.EXISTS_IN = function() {
    return this.getToken(VtlParser.EXISTS_IN, 0);
};

ExprContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


ExprContext.prototype.retainType = function() {
    return this.getTypedRuleContext(RetainTypeContext,0);
};

ExprContext.prototype.IF = function() {
    return this.getToken(VtlParser.IF, 0);
};

ExprContext.prototype.THEN = function() {
    return this.getToken(VtlParser.THEN, 0);
};

ExprContext.prototype.ELSE = function() {
    return this.getToken(VtlParser.ELSE, 0);
};

ExprContext.prototype.exprComplex = function() {
    return this.getTypedRuleContext(ExprComplexContext,0);
};

ExprContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

ExprContext.prototype.IDENTIFIER = function() {
    return this.getToken(VtlParser.IDENTIFIER, 0);
};

ExprContext.prototype.AND = function() {
    return this.getToken(VtlParser.AND, 0);
};

ExprContext.prototype.OR = function() {
    return this.getToken(VtlParser.OR, 0);
};

ExprContext.prototype.XOR = function() {
    return this.getToken(VtlParser.XOR, 0);
};

ExprContext.prototype.CONCAT = function() {
    return this.getToken(VtlParser.CONCAT, 0);
};

ExprContext.prototype.IN = function() {
    return this.getToken(VtlParser.IN, 0);
};

ExprContext.prototype.NOT_IN = function() {
    return this.getToken(VtlParser.NOT_IN, 0);
};

ExprContext.prototype.lists = function() {
    return this.getTypedRuleContext(ListsContext,0);
};

ExprContext.prototype.ALL = function() {
    return this.getToken(VtlParser.ALL, 0);
};

ExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterExpr(this);
	}
};

ExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitExpr(this);
	}
};



VtlParser.prototype.expr = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExprContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 8;
    this.enterRecursionRule(localctx, 8, VtlParser.RULE_expr, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 347;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
        switch(la_) {
        case 1:
            this.state = 303;
            this.exprAtom();
            this.state = 316;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,10,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 304;
                    this.match(VtlParser.T__0);
                    this.state = 310;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case VtlParser.DROP:
                    case VtlParser.KEEP:
                    case VtlParser.CALC:
                    case VtlParser.RENAME:
                    case VtlParser.AGGREGATE:
                    case VtlParser.FILTER:
                    case VtlParser.PIVOT:
                    case VtlParser.UNPIVOT:
                    case VtlParser.SUBSPACE:
                        this.state = 305;
                        this.datasetClause();
                        break;
                    case VtlParser.T__2:
                    case VtlParser.T__3:
                    case VtlParser.T__12:
                    case VtlParser.EVAL:
                    case VtlParser.IF:
                    case VtlParser.CURRENT_DATE:
                    case VtlParser.NOT:
                    case VtlParser.BETWEEN:
                    case VtlParser.ISNULL:
                    case VtlParser.UNION:
                    case VtlParser.SYMDIFF:
                    case VtlParser.INTERSECT:
                    case VtlParser.CHECK:
                    case VtlParser.EXISTS_IN:
                    case VtlParser.RANK:
                    case VtlParser.MIN:
                    case VtlParser.MAX:
                    case VtlParser.ABS:
                    case VtlParser.LN:
                    case VtlParser.LOG:
                    case VtlParser.TRUNC:
                    case VtlParser.ROUND:
                    case VtlParser.POWER:
                    case VtlParser.MOD:
                    case VtlParser.LEN:
                    case VtlParser.TRIM:
                    case VtlParser.UCASE:
                    case VtlParser.LCASE:
                    case VtlParser.SUBSTR:
                    case VtlParser.SUM:
                    case VtlParser.AVG:
                    case VtlParser.MEDIAN:
                    case VtlParser.COUNT:
                    case VtlParser.EXP:
                    case VtlParser.CHARSET_MATCH:
                    case VtlParser.NVL:
                    case VtlParser.HIERARCHY:
                    case VtlParser.DEFINE:
                    case VtlParser.LTRIM:
                    case VtlParser.RTRIM:
                    case VtlParser.INSTR:
                    case VtlParser.REPLACE:
                    case VtlParser.CEIL:
                    case VtlParser.FLOOR:
                    case VtlParser.SQRT:
                    case VtlParser.SETDIFF:
                    case VtlParser.STDDEV_POP:
                    case VtlParser.STDDEV_SAMP:
                    case VtlParser.VAR_POP:
                    case VtlParser.VAR_SAMP:
                    case VtlParser.FIRST_VALUE:
                    case VtlParser.LAST_VALUE:
                    case VtlParser.LAG:
                    case VtlParser.LEAD:
                    case VtlParser.RATIO_TO_REPORT:
                    case VtlParser.FILL_TIME_SERIES:
                    case VtlParser.FLOW_TO_STOCK:
                    case VtlParser.STOCK_TO_FLOW:
                    case VtlParser.TIMESHIFT:
                    case VtlParser.INNER_JOIN:
                    case VtlParser.LEFT_JOIN:
                    case VtlParser.CROSS_JOIN:
                    case VtlParser.FULL_JOIN:
                    case VtlParser.PERIOD_INDICATOR:
                    case VtlParser.TIME_AGG:
                    case VtlParser.CAST:
                    case VtlParser.CHECK_DATAPOINT:
                    case VtlParser.CHECK_HIERARCHY:
                    case VtlParser.INTEGER_CONSTANT:
                    case VtlParser.FLOAT_CONSTANT:
                    case VtlParser.BOOLEAN_CONSTANT:
                    case VtlParser.NULL_CONSTANT:
                    case VtlParser.STRING_CONSTANT:
                    case VtlParser.IDENTIFIER:
                        this.state = 306;
                        this.expr(0);
                        this.state = 307;
                        this.match(VtlParser.ASSIGN);
                        this.state = 308;
                        this.expr(0);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    this.state = 312;
                    this.match(VtlParser.T__1); 
                }
                this.state = 318;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,10,this._ctx);
            }

            this.state = 321;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
            if(la_===1) {
                this.state = 319;
                this.match(VtlParser.MEMBERSHIP);
                this.state = 320;
                this.componentID();

            }
            break;

        case 2:
            this.state = 323;
            _la = this._input.LA(1);
            if(!(_la===VtlParser.T__2 || _la===VtlParser.T__3 || _la===VtlParser.NOT)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 324;
            this.expr(16);
            break;

        case 3:
            this.state = 325;
            this.match(VtlParser.EXISTS_IN);
            this.state = 326;
            this.match(VtlParser.T__12);
            this.state = 327;
            this.expr(0);
            this.state = 328;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 329;
            this.expr(0);
            this.state = 332;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.CARTESIAN_PER) {
                this.state = 330;
                this.match(VtlParser.CARTESIAN_PER);
                this.state = 331;
                this.retainType();
            }

            this.state = 334;
            this.match(VtlParser.T__13);
            break;

        case 4:
            this.state = 336;
            this.match(VtlParser.IF);
            this.state = 337;
            this.expr(0);
            this.state = 338;
            this.match(VtlParser.THEN);
            this.state = 339;
            this.expr(0);
            this.state = 340;
            this.match(VtlParser.ELSE);
            this.state = 341;
            this.expr(6);
            break;

        case 5:
            this.state = 343;
            this.exprComplex();
            break;

        case 6:
            this.state = 344;
            this.exprAtom();
            break;

        case 7:
            this.state = 345;
            this.constant();
            break;

        case 8:
            this.state = 346;
            this.match(VtlParser.IDENTIFIER);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 384;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,17,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 382;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, VtlParser.RULE_expr);
                    this.state = 349;
                    if (!( this.precpred(this._ctx, 15))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                    }
                    this.state = 350;
                    _la = this._input.LA(1);
                    if(!(_la===VtlParser.T__4 || _la===VtlParser.T__5)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 351;
                    this.expr(16);
                    break;

                case 2:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, VtlParser.RULE_expr);
                    this.state = 352;
                    if (!( this.precpred(this._ctx, 14))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                    }
                    this.state = 353;
                    _la = this._input.LA(1);
                    if(!(_la===VtlParser.T__2 || _la===VtlParser.T__3)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 354;
                    this.expr(15);
                    break;

                case 3:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, VtlParser.RULE_expr);
                    this.state = 355;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 356;
                    _la = this._input.LA(1);
                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VtlParser.T__6) | (1 << VtlParser.T__7) | (1 << VtlParser.T__8) | (1 << VtlParser.T__9) | (1 << VtlParser.T__10) | (1 << VtlParser.T__11))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 357;
                    this.expr(14);
                    break;

                case 4:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, VtlParser.RULE_expr);
                    this.state = 358;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 359;
                    _la = this._input.LA(1);
                    if(!(_la===VtlParser.T__10 || _la===VtlParser.T__11)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 360;
                    this.expr(10);
                    break;

                case 5:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, VtlParser.RULE_expr);
                    this.state = 361;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 362;
                    this.match(VtlParser.AND);
                    this.state = 363;
                    this.expr(9);
                    break;

                case 6:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, VtlParser.RULE_expr);
                    this.state = 364;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 365;
                    _la = this._input.LA(1);
                    if(!(_la===VtlParser.OR || _la===VtlParser.XOR)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 366;
                    this.expr(8);
                    break;

                case 7:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, VtlParser.RULE_expr);
                    this.state = 367;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 368;
                    this.match(VtlParser.CONCAT);
                    this.state = 369;
                    this.expr(4);
                    break;

                case 8:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, VtlParser.RULE_expr);
                    this.state = 370;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 371;
                    _la = this._input.LA(1);
                    if(!(_la===VtlParser.IN || _la===VtlParser.NOT_IN)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 374;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case VtlParser.T__15:
                        this.state = 372;
                        this.lists();
                        break;
                    case VtlParser.IDENTIFIER:
                        this.state = 373;
                        this.match(VtlParser.IDENTIFIER);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    break;

                case 9:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, VtlParser.RULE_expr);
                    this.state = 376;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 377;
                    this.match(VtlParser.EXISTS_IN);
                    this.state = 378;
                    this.expr(0);
                    this.state = 380;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
                    if(la_===1) {
                        this.state = 379;
                        this.match(VtlParser.ALL);

                    }
                    break;

                } 
            }
            this.state = 386;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,17,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ExprComplexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_exprComplex;
    return this;
}

ExprComplexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprComplexContext.prototype.constructor = ExprComplexContext;


 
ExprComplexContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SimpleaggregateFunctionsContext(parser, ctx) {
	ExprComplexContext.call(this, parser);
    ExprComplexContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleaggregateFunctionsContext.prototype = Object.create(ExprComplexContext.prototype);
SimpleaggregateFunctionsContext.prototype.constructor = SimpleaggregateFunctionsContext;

VtlParser.SimpleaggregateFunctionsContext = SimpleaggregateFunctionsContext;

SimpleaggregateFunctionsContext.prototype.aggrFunction = function() {
    return this.getTypedRuleContext(AggrFunctionContext,0);
};
SimpleaggregateFunctionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterSimpleaggregateFunctions(this);
	}
};

SimpleaggregateFunctionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitSimpleaggregateFunctions(this);
	}
};


function StandaloneAggregateFunctionContext(parser, ctx) {
	ExprComplexContext.call(this, parser);
    ExprComplexContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StandaloneAggregateFunctionContext.prototype = Object.create(ExprComplexContext.prototype);
StandaloneAggregateFunctionContext.prototype.constructor = StandaloneAggregateFunctionContext;

VtlParser.StandaloneAggregateFunctionContext = StandaloneAggregateFunctionContext;

StandaloneAggregateFunctionContext.prototype.aggrInvocation = function() {
    return this.getTypedRuleContext(AggrInvocationContext,0);
};
StandaloneAggregateFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterStandaloneAggregateFunction(this);
	}
};

StandaloneAggregateFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitStandaloneAggregateFunction(this);
	}
};


function DefinitionExpressionsContext(parser, ctx) {
	ExprComplexContext.call(this, parser);
    ExprComplexContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DefinitionExpressionsContext.prototype = Object.create(ExprComplexContext.prototype);
DefinitionExpressionsContext.prototype.constructor = DefinitionExpressionsContext;

VtlParser.DefinitionExpressionsContext = DefinitionExpressionsContext;

DefinitionExpressionsContext.prototype.defExpr = function() {
    return this.getTypedRuleContext(DefExprContext,0);
};
DefinitionExpressionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterDefinitionExpressions(this);
	}
};

DefinitionExpressionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitDefinitionExpressions(this);
	}
};


function TimeexpressionsContext(parser, ctx) {
	ExprComplexContext.call(this, parser);
    ExprComplexContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TimeexpressionsContext.prototype = Object.create(ExprComplexContext.prototype);
TimeexpressionsContext.prototype.constructor = TimeexpressionsContext;

VtlParser.TimeexpressionsContext = TimeexpressionsContext;

TimeexpressionsContext.prototype.timeExpr = function() {
    return this.getTypedRuleContext(TimeExprContext,0);
};
TimeexpressionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterTimeexpressions(this);
	}
};

TimeexpressionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitTimeexpressions(this);
	}
};


function JoinExpressionContext(parser, ctx) {
	ExprComplexContext.call(this, parser);
    ExprComplexContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JoinExpressionContext.prototype = Object.create(ExprComplexContext.prototype);
JoinExpressionContext.prototype.constructor = JoinExpressionContext;

VtlParser.JoinExpressionContext = JoinExpressionContext;

JoinExpressionContext.prototype.joinExpr = function() {
    return this.getTypedRuleContext(JoinExprContext,0);
};
JoinExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterJoinExpression(this);
	}
};

JoinExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitJoinExpression(this);
	}
};


function CallFunctionExpressionContext(parser, ctx) {
	ExprComplexContext.call(this, parser);
    ExprComplexContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CallFunctionExpressionContext.prototype = Object.create(ExprComplexContext.prototype);
CallFunctionExpressionContext.prototype.constructor = CallFunctionExpressionContext;

VtlParser.CallFunctionExpressionContext = CallFunctionExpressionContext;

CallFunctionExpressionContext.prototype.callFunction = function() {
    return this.getTypedRuleContext(CallFunctionContext,0);
};
CallFunctionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterCallFunctionExpression(this);
	}
};

CallFunctionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitCallFunctionExpression(this);
	}
};


function ExprValidationExprContext(parser, ctx) {
	ExprComplexContext.call(this, parser);
    ExprComplexContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExprValidationExprContext.prototype = Object.create(ExprComplexContext.prototype);
ExprValidationExprContext.prototype.constructor = ExprValidationExprContext;

VtlParser.ExprValidationExprContext = ExprValidationExprContext;

ExprValidationExprContext.prototype.validationExpr = function() {
    return this.getTypedRuleContext(ValidationExprContext,0);
};
ExprValidationExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterExprValidationExpr(this);
	}
};

ExprValidationExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitExprValidationExpr(this);
	}
};


function StandaloneAnalyticFunctionContext(parser, ctx) {
	ExprComplexContext.call(this, parser);
    ExprComplexContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StandaloneAnalyticFunctionContext.prototype = Object.create(ExprComplexContext.prototype);
StandaloneAnalyticFunctionContext.prototype.constructor = StandaloneAnalyticFunctionContext;

VtlParser.StandaloneAnalyticFunctionContext = StandaloneAnalyticFunctionContext;

StandaloneAnalyticFunctionContext.prototype.anFunctionClause = function() {
    return this.getTypedRuleContext(AnFunctionClauseContext,0);
};
StandaloneAnalyticFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterStandaloneAnalyticFunction(this);
	}
};

StandaloneAnalyticFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitStandaloneAnalyticFunction(this);
	}
};


function ComponentExpressionwithAggrClauseContext(parser, ctx) {
	ExprComplexContext.call(this, parser);
    ExprComplexContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ComponentExpressionwithAggrClauseContext.prototype = Object.create(ExprComplexContext.prototype);
ComponentExpressionwithAggrClauseContext.prototype.constructor = ComponentExpressionwithAggrClauseContext;

VtlParser.ComponentExpressionwithAggrClauseContext = ComponentExpressionwithAggrClauseContext;

ComponentExpressionwithAggrClauseContext.prototype.aggrInvocationCompExpr = function() {
    return this.getTypedRuleContext(AggrInvocationCompExprContext,0);
};
ComponentExpressionwithAggrClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterComponentExpressionwithAggrClause(this);
	}
};

ComponentExpressionwithAggrClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitComponentExpressionwithAggrClause(this);
	}
};


function SetExpressionsContext(parser, ctx) {
	ExprComplexContext.call(this, parser);
    ExprComplexContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetExpressionsContext.prototype = Object.create(ExprComplexContext.prototype);
SetExpressionsContext.prototype.constructor = SetExpressionsContext;

VtlParser.SetExpressionsContext = SetExpressionsContext;

SetExpressionsContext.prototype.setExpr = function() {
    return this.getTypedRuleContext(SetExprContext,0);
};
SetExpressionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterSetExpressions(this);
	}
};

SetExpressionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitSetExpressions(this);
	}
};



VtlParser.ExprComplexContext = ExprComplexContext;

VtlParser.prototype.exprComplex = function() {

    var localctx = new ExprComplexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, VtlParser.RULE_exprComplex);
    try {
        this.state = 397;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ExprValidationExprContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 387;
            this.validationExpr();
            break;

        case 2:
            localctx = new DefinitionExpressionsContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 388;
            this.defExpr();
            break;

        case 3:
            localctx = new StandaloneAggregateFunctionContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 389;
            this.aggrInvocation();
            break;

        case 4:
            localctx = new ComponentExpressionwithAggrClauseContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 390;
            this.aggrInvocationCompExpr();
            break;

        case 5:
            localctx = new StandaloneAnalyticFunctionContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 391;
            this.anFunctionClause();
            break;

        case 6:
            localctx = new SimpleaggregateFunctionsContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 392;
            this.aggrFunction();
            break;

        case 7:
            localctx = new TimeexpressionsContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 393;
            this.timeExpr();
            break;

        case 8:
            localctx = new SetExpressionsContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 394;
            this.setExpr();
            break;

        case 9:
            localctx = new CallFunctionExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 395;
            this.callFunction();
            break;

        case 10:
            localctx = new JoinExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 396;
            this.joinExpr();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TimeExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_timeExpr;
    this.opComp = null; // Token
    return this;
}

TimeExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TimeExprContext.prototype.constructor = TimeExprContext;

TimeExprContext.prototype.timeSeriesExpr = function() {
    return this.getTypedRuleContext(TimeSeriesExprContext,0);
};

TimeExprContext.prototype.periodExpr = function() {
    return this.getTypedRuleContext(PeriodExprContext,0);
};

TimeExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

TimeExprContext.prototype.timeShiftExpr = function() {
    return this.getTypedRuleContext(TimeShiftExprContext,0);
};

TimeExprContext.prototype.timeAggExpr = function() {
    return this.getTypedRuleContext(TimeAggExprContext,0);
};

TimeExprContext.prototype.CURRENT_DATE = function() {
    return this.getToken(VtlParser.CURRENT_DATE, 0);
};

TimeExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterTimeExpr(this);
	}
};

TimeExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitTimeExpr(this);
	}
};




VtlParser.TimeExprContext = TimeExprContext;

VtlParser.prototype.timeExpr = function() {

    var localctx = new TimeExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, VtlParser.RULE_timeExpr);
    var _la = 0; // Token type
    try {
        this.state = 408;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.FILL_TIME_SERIES:
            this.enterOuterAlt(localctx, 1);
            this.state = 399;
            this.timeSeriesExpr();
            break;
        case VtlParser.PERIOD_INDICATOR:
            this.enterOuterAlt(localctx, 2);
            this.state = 400;
            this.periodExpr();
            this.state = 403;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
            if(la_===1) {
                this.state = 401;
                localctx.opComp = this._input.LT(1);
                _la = this._input.LA(1);
                if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VtlParser.T__6) | (1 << VtlParser.T__7) | (1 << VtlParser.T__8) | (1 << VtlParser.T__9) | (1 << VtlParser.T__10) | (1 << VtlParser.T__11))) !== 0))) {
                    localctx.opComp = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 402;
                this.expr(0);

            }
            break;
        case VtlParser.TIMESHIFT:
            this.enterOuterAlt(localctx, 3);
            this.state = 405;
            this.timeShiftExpr();
            break;
        case VtlParser.TIME_AGG:
            this.enterOuterAlt(localctx, 4);
            this.state = 406;
            this.timeAggExpr();
            break;
        case VtlParser.CURRENT_DATE:
            this.enterOuterAlt(localctx, 5);
            this.state = 407;
            this.match(VtlParser.CURRENT_DATE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefHierarchicalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_defHierarchical;
    return this;
}

DefHierarchicalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefHierarchicalContext.prototype.constructor = DefHierarchicalContext;

DefHierarchicalContext.prototype.defineHierarchicalRuleset = function() {
    return this.getTypedRuleContext(DefineHierarchicalRulesetContext,0);
};

DefHierarchicalContext.prototype.rulesetID = function() {
    return this.getTypedRuleContext(RulesetIDContext,0);
};

DefHierarchicalContext.prototype.hierRuleSignature = function() {
    return this.getTypedRuleContext(HierRuleSignatureContext,0);
};

DefHierarchicalContext.prototype.IS = function() {
    return this.getToken(VtlParser.IS, 0);
};

DefHierarchicalContext.prototype.ruleClauseHierarchical = function() {
    return this.getTypedRuleContext(RuleClauseHierarchicalContext,0);
};

DefHierarchicalContext.prototype.endHierarchicalRuleset = function() {
    return this.getTypedRuleContext(EndHierarchicalRulesetContext,0);
};

DefHierarchicalContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterDefHierarchical(this);
	}
};

DefHierarchicalContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitDefHierarchical(this);
	}
};




VtlParser.DefHierarchicalContext = DefHierarchicalContext;

VtlParser.prototype.defHierarchical = function() {

    var localctx = new DefHierarchicalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, VtlParser.RULE_defHierarchical);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 410;
        this.defineHierarchicalRuleset();
        this.state = 411;
        this.rulesetID();
        this.state = 412;
        this.match(VtlParser.T__12);
        this.state = 413;
        this.hierRuleSignature();
        this.state = 414;
        this.match(VtlParser.T__13);
        this.state = 415;
        this.match(VtlParser.IS);
        this.state = 416;
        this.ruleClauseHierarchical();
        this.state = 417;
        this.endHierarchicalRuleset();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RuleClauseHierarchicalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_ruleClauseHierarchical;
    return this;
}

RuleClauseHierarchicalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RuleClauseHierarchicalContext.prototype.constructor = RuleClauseHierarchicalContext;

RuleClauseHierarchicalContext.prototype.ruleItemHierarchical = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RuleItemHierarchicalContext);
    } else {
        return this.getTypedRuleContext(RuleItemHierarchicalContext,i);
    }
};

RuleClauseHierarchicalContext.prototype.EOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.EOL);
    } else {
        return this.getToken(VtlParser.EOL, i);
    }
};


RuleClauseHierarchicalContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterRuleClauseHierarchical(this);
	}
};

RuleClauseHierarchicalContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitRuleClauseHierarchical(this);
	}
};




VtlParser.RuleClauseHierarchicalContext = RuleClauseHierarchicalContext;

VtlParser.prototype.ruleClauseHierarchical = function() {

    var localctx = new RuleClauseHierarchicalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, VtlParser.RULE_ruleClauseHierarchical);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 419;
        this.ruleItemHierarchical();
        this.state = 424;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.EOL) {
            this.state = 420;
            this.match(VtlParser.EOL);
            this.state = 421;
            this.ruleItemHierarchical();
            this.state = 426;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RuleItemHierarchicalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_ruleItemHierarchical;
    return this;
}

RuleItemHierarchicalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RuleItemHierarchicalContext.prototype.constructor = RuleItemHierarchicalContext;

RuleItemHierarchicalContext.prototype.codeItemRelation = function() {
    return this.getTypedRuleContext(CodeItemRelationContext,0);
};

RuleItemHierarchicalContext.prototype.IDENTIFIER = function() {
    return this.getToken(VtlParser.IDENTIFIER, 0);
};

RuleItemHierarchicalContext.prototype.erCode = function() {
    return this.getTypedRuleContext(ErCodeContext,0);
};

RuleItemHierarchicalContext.prototype.erLevel = function() {
    return this.getTypedRuleContext(ErLevelContext,0);
};

RuleItemHierarchicalContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterRuleItemHierarchical(this);
	}
};

RuleItemHierarchicalContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitRuleItemHierarchical(this);
	}
};




VtlParser.RuleItemHierarchicalContext = RuleItemHierarchicalContext;

VtlParser.prototype.ruleItemHierarchical = function() {

    var localctx = new RuleItemHierarchicalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, VtlParser.RULE_ruleItemHierarchical);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 429;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
        if(la_===1) {
            this.state = 427;
            this.match(VtlParser.IDENTIFIER);
            this.state = 428;
            this.match(VtlParser.T__14);

        }
        this.state = 431;
        this.codeItemRelation();
        this.state = 433;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.ERRORCODE) {
            this.state = 432;
            this.erCode();
        }

        this.state = 436;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.ERRORLEVEL) {
            this.state = 435;
            this.erLevel();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HierRuleSignatureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_hierRuleSignature;
    return this;
}

HierRuleSignatureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HierRuleSignatureContext.prototype.constructor = HierRuleSignatureContext;

HierRuleSignatureContext.prototype.RULE = function() {
    return this.getToken(VtlParser.RULE, 0);
};

HierRuleSignatureContext.prototype.IDENTIFIER = function() {
    return this.getToken(VtlParser.IDENTIFIER, 0);
};

HierRuleSignatureContext.prototype.VALUE_DOMAIN = function() {
    return this.getToken(VtlParser.VALUE_DOMAIN, 0);
};

HierRuleSignatureContext.prototype.VARIABLE = function() {
    return this.getToken(VtlParser.VARIABLE, 0);
};

HierRuleSignatureContext.prototype.valueDomainSignature = function() {
    return this.getTypedRuleContext(ValueDomainSignatureContext,0);
};

HierRuleSignatureContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterHierRuleSignature(this);
	}
};

HierRuleSignatureContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitHierRuleSignature(this);
	}
};




VtlParser.HierRuleSignatureContext = HierRuleSignatureContext;

VtlParser.prototype.hierRuleSignature = function() {

    var localctx = new HierRuleSignatureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, VtlParser.RULE_hierRuleSignature);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 438;
        _la = this._input.LA(1);
        if(!(_la===VtlParser.VALUE_DOMAIN || _la===VtlParser.VARIABLE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 440;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.CONDITION) {
            this.state = 439;
            this.valueDomainSignature();
        }

        this.state = 442;
        this.match(VtlParser.RULE);
        this.state = 443;
        this.match(VtlParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValueDomainSignatureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_valueDomainSignature;
    return this;
}

ValueDomainSignatureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueDomainSignatureContext.prototype.constructor = ValueDomainSignatureContext;

ValueDomainSignatureContext.prototype.CONDITION = function() {
    return this.getToken(VtlParser.CONDITION, 0);
};

ValueDomainSignatureContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.IDENTIFIER);
    } else {
        return this.getToken(VtlParser.IDENTIFIER, i);
    }
};


ValueDomainSignatureContext.prototype.AS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.AS);
    } else {
        return this.getToken(VtlParser.AS, i);
    }
};


ValueDomainSignatureContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


ValueDomainSignatureContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterValueDomainSignature(this);
	}
};

ValueDomainSignatureContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitValueDomainSignature(this);
	}
};




VtlParser.ValueDomainSignatureContext = ValueDomainSignatureContext;

VtlParser.prototype.valueDomainSignature = function() {

    var localctx = new ValueDomainSignatureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, VtlParser.RULE_valueDomainSignature);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 445;
        this.match(VtlParser.CONDITION);
        this.state = 446;
        this.match(VtlParser.IDENTIFIER);
        this.state = 449;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.AS) {
            this.state = 447;
            this.match(VtlParser.AS);
            this.state = 448;
            this.match(VtlParser.IDENTIFIER);
        }

        this.state = 459;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.CARTESIAN_PER) {
            this.state = 451;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 452;
            this.match(VtlParser.IDENTIFIER);
            this.state = 455;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.AS) {
                this.state = 453;
                this.match(VtlParser.AS);
                this.state = 454;
                this.match(VtlParser.IDENTIFIER);
            }

            this.state = 461;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CodeItemRelationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_codeItemRelation;
    return this;
}

CodeItemRelationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CodeItemRelationContext.prototype.constructor = CodeItemRelationContext;

CodeItemRelationContext.prototype.codeItemRef = function() {
    return this.getTypedRuleContext(CodeItemRefContext,0);
};

CodeItemRelationContext.prototype.codeItemRelationClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CodeItemRelationClauseContext);
    } else {
        return this.getTypedRuleContext(CodeItemRelationClauseContext,i);
    }
};

CodeItemRelationContext.prototype.WHEN = function() {
    return this.getToken(VtlParser.WHEN, 0);
};

CodeItemRelationContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

CodeItemRelationContext.prototype.THEN = function() {
    return this.getToken(VtlParser.THEN, 0);
};

CodeItemRelationContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterCodeItemRelation(this);
	}
};

CodeItemRelationContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitCodeItemRelation(this);
	}
};




VtlParser.CodeItemRelationContext = CodeItemRelationContext;

VtlParser.prototype.codeItemRelation = function() {

    var localctx = new CodeItemRelationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, VtlParser.RULE_codeItemRelation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 466;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.WHEN) {
            this.state = 462;
            this.match(VtlParser.WHEN);
            this.state = 463;
            this.expr(0);
            this.state = 464;
            this.match(VtlParser.THEN);
        }

        this.state = 468;
        this.codeItemRef();
        this.state = 469;
        this.codeItemRelationClause();
        this.state = 473;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.T__2 || _la===VtlParser.T__3 || _la===VtlParser.IDENTIFIER) {
            this.state = 470;
            this.codeItemRelationClause();
            this.state = 475;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CodeItemRelationClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_codeItemRelationClause;
    this.opAdd = null; // Token
    return this;
}

CodeItemRelationClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CodeItemRelationClauseContext.prototype.constructor = CodeItemRelationClauseContext;

CodeItemRelationClauseContext.prototype.IDENTIFIER = function() {
    return this.getToken(VtlParser.IDENTIFIER, 0);
};

CodeItemRelationClauseContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

CodeItemRelationClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterCodeItemRelationClause(this);
	}
};

CodeItemRelationClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitCodeItemRelationClause(this);
	}
};




VtlParser.CodeItemRelationClauseContext = CodeItemRelationClauseContext;

VtlParser.prototype.codeItemRelationClause = function() {

    var localctx = new CodeItemRelationClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, VtlParser.RULE_codeItemRelationClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 477;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.T__2 || _la===VtlParser.T__3) {
            this.state = 476;
            localctx.opAdd = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===VtlParser.T__2 || _la===VtlParser.T__3)) {
                localctx.opAdd = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 479;
        this.match(VtlParser.IDENTIFIER);
        this.state = 484;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.T__0) {
            this.state = 480;
            this.match(VtlParser.T__0);
            this.state = 481;
            this.expr(0);
            this.state = 482;
            this.match(VtlParser.T__1);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CodeItemRefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_codeItemRef;
    this.opComp = null; // Token
    return this;
}

CodeItemRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CodeItemRefContext.prototype.constructor = CodeItemRefContext;

CodeItemRefContext.prototype.IDENTIFIER = function() {
    return this.getToken(VtlParser.IDENTIFIER, 0);
};

CodeItemRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterCodeItemRef(this);
	}
};

CodeItemRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitCodeItemRef(this);
	}
};




VtlParser.CodeItemRefContext = CodeItemRefContext;

VtlParser.prototype.codeItemRef = function() {

    var localctx = new CodeItemRefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, VtlParser.RULE_codeItemRef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 486;
        this.match(VtlParser.IDENTIFIER);
        this.state = 488;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VtlParser.T__6) | (1 << VtlParser.T__7) | (1 << VtlParser.T__8) | (1 << VtlParser.T__9) | (1 << VtlParser.T__10))) !== 0)) {
            this.state = 487;
            localctx.opComp = this._input.LT(1);
            _la = this._input.LA(1);
            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VtlParser.T__6) | (1 << VtlParser.T__7) | (1 << VtlParser.T__8) | (1 << VtlParser.T__9) | (1 << VtlParser.T__10))) !== 0))) {
                localctx.opComp = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefDatapointContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_defDatapoint;
    return this;
}

DefDatapointContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefDatapointContext.prototype.constructor = DefDatapointContext;

DefDatapointContext.prototype.defineDatapointRuleset = function() {
    return this.getTypedRuleContext(DefineDatapointRulesetContext,0);
};

DefDatapointContext.prototype.rulesetID = function() {
    return this.getTypedRuleContext(RulesetIDContext,0);
};

DefDatapointContext.prototype.rulesetSignature = function() {
    return this.getTypedRuleContext(RulesetSignatureContext,0);
};

DefDatapointContext.prototype.IS = function() {
    return this.getToken(VtlParser.IS, 0);
};

DefDatapointContext.prototype.ruleClauseDatapoint = function() {
    return this.getTypedRuleContext(RuleClauseDatapointContext,0);
};

DefDatapointContext.prototype.endDatapointRuleset = function() {
    return this.getTypedRuleContext(EndDatapointRulesetContext,0);
};

DefDatapointContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterDefDatapoint(this);
	}
};

DefDatapointContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitDefDatapoint(this);
	}
};




VtlParser.DefDatapointContext = DefDatapointContext;

VtlParser.prototype.defDatapoint = function() {

    var localctx = new DefDatapointContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, VtlParser.RULE_defDatapoint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 490;
        this.defineDatapointRuleset();
        this.state = 491;
        this.rulesetID();
        this.state = 492;
        this.match(VtlParser.T__12);
        this.state = 493;
        this.rulesetSignature();
        this.state = 494;
        this.match(VtlParser.T__13);
        this.state = 495;
        this.match(VtlParser.IS);
        this.state = 496;
        this.ruleClauseDatapoint();
        this.state = 497;
        this.endDatapointRuleset();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RuleClauseDatapointContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_ruleClauseDatapoint;
    return this;
}

RuleClauseDatapointContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RuleClauseDatapointContext.prototype.constructor = RuleClauseDatapointContext;

RuleClauseDatapointContext.prototype.ruleItemDatapoint = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RuleItemDatapointContext);
    } else {
        return this.getTypedRuleContext(RuleItemDatapointContext,i);
    }
};

RuleClauseDatapointContext.prototype.EOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.EOL);
    } else {
        return this.getToken(VtlParser.EOL, i);
    }
};


RuleClauseDatapointContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterRuleClauseDatapoint(this);
	}
};

RuleClauseDatapointContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitRuleClauseDatapoint(this);
	}
};




VtlParser.RuleClauseDatapointContext = RuleClauseDatapointContext;

VtlParser.prototype.ruleClauseDatapoint = function() {

    var localctx = new RuleClauseDatapointContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, VtlParser.RULE_ruleClauseDatapoint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 499;
        this.ruleItemDatapoint();
        this.state = 504;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.EOL) {
            this.state = 500;
            this.match(VtlParser.EOL);
            this.state = 501;
            this.ruleItemDatapoint();
            this.state = 506;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RuleItemDatapointContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_ruleItemDatapoint;
    return this;
}

RuleItemDatapointContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RuleItemDatapointContext.prototype.constructor = RuleItemDatapointContext;

RuleItemDatapointContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

RuleItemDatapointContext.prototype.IDENTIFIER = function() {
    return this.getToken(VtlParser.IDENTIFIER, 0);
};

RuleItemDatapointContext.prototype.WHEN = function() {
    return this.getToken(VtlParser.WHEN, 0);
};

RuleItemDatapointContext.prototype.THEN = function() {
    return this.getToken(VtlParser.THEN, 0);
};

RuleItemDatapointContext.prototype.erCode = function() {
    return this.getTypedRuleContext(ErCodeContext,0);
};

RuleItemDatapointContext.prototype.erLevel = function() {
    return this.getTypedRuleContext(ErLevelContext,0);
};

RuleItemDatapointContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterRuleItemDatapoint(this);
	}
};

RuleItemDatapointContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitRuleItemDatapoint(this);
	}
};




VtlParser.RuleItemDatapointContext = RuleItemDatapointContext;

VtlParser.prototype.ruleItemDatapoint = function() {

    var localctx = new RuleItemDatapointContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, VtlParser.RULE_ruleItemDatapoint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 509;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
        if(la_===1) {
            this.state = 507;
            this.match(VtlParser.IDENTIFIER);
            this.state = 508;
            this.match(VtlParser.T__14);

        }
        this.state = 515;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.WHEN) {
            this.state = 511;
            this.match(VtlParser.WHEN);
            this.state = 512;
            this.expr(0);
            this.state = 513;
            this.match(VtlParser.THEN);
        }

        this.state = 517;
        this.expr(0);
        this.state = 519;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.ERRORCODE) {
            this.state = 518;
            this.erCode();
        }

        this.state = 522;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.ERRORLEVEL) {
            this.state = 521;
            this.erLevel();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RulesetSignatureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_rulesetSignature;
    return this;
}

RulesetSignatureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RulesetSignatureContext.prototype.constructor = RulesetSignatureContext;

RulesetSignatureContext.prototype.varSignature = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VarSignatureContext);
    } else {
        return this.getTypedRuleContext(VarSignatureContext,i);
    }
};

RulesetSignatureContext.prototype.VALUE_DOMAIN = function() {
    return this.getToken(VtlParser.VALUE_DOMAIN, 0);
};

RulesetSignatureContext.prototype.VARIABLE = function() {
    return this.getToken(VtlParser.VARIABLE, 0);
};

RulesetSignatureContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


RulesetSignatureContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterRulesetSignature(this);
	}
};

RulesetSignatureContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitRulesetSignature(this);
	}
};




VtlParser.RulesetSignatureContext = RulesetSignatureContext;

VtlParser.prototype.rulesetSignature = function() {

    var localctx = new RulesetSignatureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, VtlParser.RULE_rulesetSignature);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 524;
        _la = this._input.LA(1);
        if(!(_la===VtlParser.VALUE_DOMAIN || _la===VtlParser.VARIABLE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 525;
        this.varSignature();
        this.state = 530;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.CARTESIAN_PER) {
            this.state = 526;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 527;
            this.varSignature();
            this.state = 532;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VarSignatureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_varSignature;
    return this;
}

VarSignatureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarSignatureContext.prototype.constructor = VarSignatureContext;

VarSignatureContext.prototype.varID = function() {
    return this.getTypedRuleContext(VarIDContext,0);
};

VarSignatureContext.prototype.AS = function() {
    return this.getToken(VtlParser.AS, 0);
};

VarSignatureContext.prototype.IDENTIFIER = function() {
    return this.getToken(VtlParser.IDENTIFIER, 0);
};

VarSignatureContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterVarSignature(this);
	}
};

VarSignatureContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitVarSignature(this);
	}
};




VtlParser.VarSignatureContext = VarSignatureContext;

VtlParser.prototype.varSignature = function() {

    var localctx = new VarSignatureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, VtlParser.RULE_varSignature);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 533;
        this.varID();
        this.state = 536;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.AS) {
            this.state = 534;
            this.match(VtlParser.AS);
            this.state = 535;
            this.match(VtlParser.IDENTIFIER);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_defExpr;
    return this;
}

DefExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefExprContext.prototype.constructor = DefExprContext;

DefExprContext.prototype.defOperator = function() {
    return this.getTypedRuleContext(DefOperatorContext,0);
};

DefExprContext.prototype.defDatapoint = function() {
    return this.getTypedRuleContext(DefDatapointContext,0);
};

DefExprContext.prototype.defHierarchical = function() {
    return this.getTypedRuleContext(DefHierarchicalContext,0);
};

DefExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterDefExpr(this);
	}
};

DefExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitDefExpr(this);
	}
};




VtlParser.DefExprContext = DefExprContext;

VtlParser.prototype.defExpr = function() {

    var localctx = new DefExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, VtlParser.RULE_defExpr);
    try {
        this.state = 541;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 538;
            this.defOperator();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 539;
            this.defDatapoint();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 540;
            this.defHierarchical();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_defOperator;
    return this;
}

DefOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefOperatorContext.prototype.constructor = DefOperatorContext;

DefOperatorContext.prototype.DEFINE = function() {
    return this.getToken(VtlParser.DEFINE, 0);
};

DefOperatorContext.prototype.OPERATOR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.OPERATOR);
    } else {
        return this.getToken(VtlParser.OPERATOR, i);
    }
};


DefOperatorContext.prototype.operatorID = function() {
    return this.getTypedRuleContext(OperatorIDContext,0);
};

DefOperatorContext.prototype.IS = function() {
    return this.getToken(VtlParser.IS, 0);
};

DefOperatorContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

DefOperatorContext.prototype.END = function() {
    return this.getToken(VtlParser.END, 0);
};

DefOperatorContext.prototype.parameterItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterItemContext);
    } else {
        return this.getTypedRuleContext(ParameterItemContext,i);
    }
};

DefOperatorContext.prototype.RETURNS = function() {
    return this.getToken(VtlParser.RETURNS, 0);
};

DefOperatorContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

DefOperatorContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


DefOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterDefOperator(this);
	}
};

DefOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitDefOperator(this);
	}
};




VtlParser.DefOperatorContext = DefOperatorContext;

VtlParser.prototype.defOperator = function() {

    var localctx = new DefOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, VtlParser.RULE_defOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 543;
        this.match(VtlParser.DEFINE);
        this.state = 544;
        this.match(VtlParser.OPERATOR);
        this.state = 545;
        this.operatorID();
        this.state = 546;
        this.match(VtlParser.T__12);
        this.state = 555;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.IDENTIFIER) {
            this.state = 547;
            this.parameterItem();
            this.state = 552;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===VtlParser.CARTESIAN_PER) {
                this.state = 548;
                this.match(VtlParser.CARTESIAN_PER);
                this.state = 549;
                this.parameterItem();
                this.state = 554;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 557;
        this.match(VtlParser.T__13);
        this.state = 560;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.RETURNS) {
            this.state = 558;
            this.match(VtlParser.RETURNS);
            this.state = 559;
            this.dataType();
        }

        this.state = 562;
        this.match(VtlParser.IS);
        this.state = 563;
        this.expr(0);
        this.state = 564;
        this.match(VtlParser.END);
        this.state = 565;
        this.match(VtlParser.OPERATOR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_parameterItem;
    return this;
}

ParameterItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterItemContext.prototype.constructor = ParameterItemContext;

ParameterItemContext.prototype.varID = function() {
    return this.getTypedRuleContext(VarIDContext,0);
};

ParameterItemContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

ParameterItemContext.prototype.DEFAULT = function() {
    return this.getToken(VtlParser.DEFAULT, 0);
};

ParameterItemContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

ParameterItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterParameterItem(this);
	}
};

ParameterItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitParameterItem(this);
	}
};




VtlParser.ParameterItemContext = ParameterItemContext;

VtlParser.prototype.parameterItem = function() {

    var localctx = new ParameterItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, VtlParser.RULE_parameterItem);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 567;
        this.varID();
        this.state = 568;
        this.dataType();
        this.state = 571;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.DEFAULT) {
            this.state = 569;
            this.match(VtlParser.DEFAULT);
            this.state = 570;
            this.constant();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CallFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_callFunction;
    return this;
}

CallFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallFunctionContext.prototype.constructor = CallFunctionContext;

CallFunctionContext.prototype.operatorID = function() {
    return this.getTypedRuleContext(OperatorIDContext,0);
};

CallFunctionContext.prototype.constant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantContext);
    } else {
        return this.getTypedRuleContext(ConstantContext,i);
    }
};

CallFunctionContext.prototype.OPTIONAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.OPTIONAL);
    } else {
        return this.getToken(VtlParser.OPTIONAL, i);
    }
};


CallFunctionContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


CallFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterCallFunction(this);
	}
};

CallFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitCallFunction(this);
	}
};




VtlParser.CallFunctionContext = CallFunctionContext;

VtlParser.prototype.callFunction = function() {

    var localctx = new CallFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, VtlParser.RULE_callFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 573;
        this.operatorID();
        this.state = 574;
        this.match(VtlParser.T__12);
        this.state = 589;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.OPTIONAL || ((((_la - 226)) & ~0x1f) == 0 && ((1 << (_la - 226)) & ((1 << (VtlParser.INTEGER_CONSTANT - 226)) | (1 << (VtlParser.FLOAT_CONSTANT - 226)) | (1 << (VtlParser.BOOLEAN_CONSTANT - 226)) | (1 << (VtlParser.NULL_CONSTANT - 226)) | (1 << (VtlParser.STRING_CONSTANT - 226)))) !== 0)) {
            this.state = 577;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case VtlParser.INTEGER_CONSTANT:
            case VtlParser.FLOAT_CONSTANT:
            case VtlParser.BOOLEAN_CONSTANT:
            case VtlParser.NULL_CONSTANT:
            case VtlParser.STRING_CONSTANT:
                this.state = 575;
                this.constant();
                break;
            case VtlParser.OPTIONAL:
                this.state = 576;
                this.match(VtlParser.OPTIONAL);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 586;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===VtlParser.CARTESIAN_PER) {
                this.state = 579;
                this.match(VtlParser.CARTESIAN_PER);
                this.state = 582;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case VtlParser.INTEGER_CONSTANT:
                case VtlParser.FLOAT_CONSTANT:
                case VtlParser.BOOLEAN_CONSTANT:
                case VtlParser.NULL_CONSTANT:
                case VtlParser.STRING_CONSTANT:
                    this.state = 580;
                    this.constant();
                    break;
                case VtlParser.OPTIONAL:
                    this.state = 581;
                    this.match(VtlParser.OPTIONAL);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 588;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 591;
        this.match(VtlParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExprAtomContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_exprAtom;
    return this;
}

ExprAtomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprAtomContext.prototype.constructor = ExprAtomContext;


 
ExprAtomContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SqrtAtomContext(parser, ctx) {
	ExprAtomContext.call(this, parser);
    ExprAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SqrtAtomContext.prototype = Object.create(ExprAtomContext.prototype);
SqrtAtomContext.prototype.constructor = SqrtAtomContext;

VtlParser.SqrtAtomContext = SqrtAtomContext;

SqrtAtomContext.prototype.SQRT = function() {
    return this.getToken(VtlParser.SQRT, 0);
};

SqrtAtomContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};
SqrtAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterSqrtAtom(this);
	}
};

SqrtAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitSqrtAtom(this);
	}
};


function LtrimAtomContext(parser, ctx) {
	ExprAtomContext.call(this, parser);
    ExprAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LtrimAtomContext.prototype = Object.create(ExprAtomContext.prototype);
LtrimAtomContext.prototype.constructor = LtrimAtomContext;

VtlParser.LtrimAtomContext = LtrimAtomContext;

LtrimAtomContext.prototype.LTRIM = function() {
    return this.getToken(VtlParser.LTRIM, 0);
};

LtrimAtomContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};
LtrimAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterLtrimAtom(this);
	}
};

LtrimAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitLtrimAtom(this);
	}
};


function StockToFlowAtomContext(parser, ctx) {
	ExprAtomContext.call(this, parser);
    ExprAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StockToFlowAtomContext.prototype = Object.create(ExprAtomContext.prototype);
StockToFlowAtomContext.prototype.constructor = StockToFlowAtomContext;

VtlParser.StockToFlowAtomContext = StockToFlowAtomContext;

StockToFlowAtomContext.prototype.STOCK_TO_FLOW = function() {
    return this.getToken(VtlParser.STOCK_TO_FLOW, 0);
};

StockToFlowAtomContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};
StockToFlowAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterStockToFlowAtom(this);
	}
};

StockToFlowAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitStockToFlowAtom(this);
	}
};


function TrimAtomContext(parser, ctx) {
	ExprAtomContext.call(this, parser);
    ExprAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TrimAtomContext.prototype = Object.create(ExprAtomContext.prototype);
TrimAtomContext.prototype.constructor = TrimAtomContext;

VtlParser.TrimAtomContext = TrimAtomContext;

TrimAtomContext.prototype.TRIM = function() {
    return this.getToken(VtlParser.TRIM, 0);
};

TrimAtomContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};
TrimAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterTrimAtom(this);
	}
};

TrimAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitTrimAtom(this);
	}
};


function ValidateDPrulesetContext(parser, ctx) {
	ExprAtomContext.call(this, parser);
    ExprAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ValidateDPrulesetContext.prototype = Object.create(ExprAtomContext.prototype);
ValidateDPrulesetContext.prototype.constructor = ValidateDPrulesetContext;

VtlParser.ValidateDPrulesetContext = ValidateDPrulesetContext;

ValidateDPrulesetContext.prototype.validationDatapoint = function() {
    return this.getTypedRuleContext(ValidationDatapointContext,0);
};
ValidateDPrulesetContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterValidateDPruleset(this);
	}
};

ValidateDPrulesetContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitValidateDPruleset(this);
	}
};


function InstrAtomContext(parser, ctx) {
	ExprAtomContext.call(this, parser);
    ExprAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InstrAtomContext.prototype = Object.create(ExprAtomContext.prototype);
InstrAtomContext.prototype.constructor = InstrAtomContext;

VtlParser.InstrAtomContext = InstrAtomContext;

InstrAtomContext.prototype.INSTR = function() {
    return this.getToken(VtlParser.INSTR, 0);
};

InstrAtomContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

InstrAtomContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


InstrAtomContext.prototype.optionalExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OptionalExprContext);
    } else {
        return this.getTypedRuleContext(OptionalExprContext,i);
    }
};
InstrAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterInstrAtom(this);
	}
};

InstrAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitInstrAtom(this);
	}
};


function CharsetMatchAtomContext(parser, ctx) {
	ExprAtomContext.call(this, parser);
    ExprAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CharsetMatchAtomContext.prototype = Object.create(ExprAtomContext.prototype);
CharsetMatchAtomContext.prototype.constructor = CharsetMatchAtomContext;

VtlParser.CharsetMatchAtomContext = CharsetMatchAtomContext;

CharsetMatchAtomContext.prototype.CHARSET_MATCH = function() {
    return this.getToken(VtlParser.CHARSET_MATCH, 0);
};

CharsetMatchAtomContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

CharsetMatchAtomContext.prototype.CARTESIAN_PER = function() {
    return this.getToken(VtlParser.CARTESIAN_PER, 0);
};
CharsetMatchAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterCharsetMatchAtom(this);
	}
};

CharsetMatchAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitCharsetMatchAtom(this);
	}
};


function LnAtomContext(parser, ctx) {
	ExprAtomContext.call(this, parser);
    ExprAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LnAtomContext.prototype = Object.create(ExprAtomContext.prototype);
LnAtomContext.prototype.constructor = LnAtomContext;

VtlParser.LnAtomContext = LnAtomContext;

LnAtomContext.prototype.LN = function() {
    return this.getToken(VtlParser.LN, 0);
};

LnAtomContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

LnAtomContext.prototype.TRUNC = function() {
    return this.getToken(VtlParser.TRUNC, 0);
};

LnAtomContext.prototype.CARTESIAN_PER = function() {
    return this.getToken(VtlParser.CARTESIAN_PER, 0);
};

LnAtomContext.prototype.optionalExpr = function() {
    return this.getTypedRuleContext(OptionalExprContext,0);
};
LnAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterLnAtom(this);
	}
};

LnAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitLnAtom(this);
	}
};


function ValidationSimpleContext(parser, ctx) {
	ExprAtomContext.call(this, parser);
    ExprAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ValidationSimpleContext.prototype = Object.create(ExprAtomContext.prototype);
ValidationSimpleContext.prototype.constructor = ValidationSimpleContext;

VtlParser.ValidationSimpleContext = ValidationSimpleContext;

ValidationSimpleContext.prototype.validationExpr = function() {
    return this.getTypedRuleContext(ValidationExprContext,0);
};
ValidationSimpleContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterValidationSimple(this);
	}
};

ValidationSimpleContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitValidationSimple(this);
	}
};


function IsNullAtomContext(parser, ctx) {
	ExprAtomContext.call(this, parser);
    ExprAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IsNullAtomContext.prototype = Object.create(ExprAtomContext.prototype);
IsNullAtomContext.prototype.constructor = IsNullAtomContext;

VtlParser.IsNullAtomContext = IsNullAtomContext;

IsNullAtomContext.prototype.ISNULL = function() {
    return this.getToken(VtlParser.ISNULL, 0);
};

IsNullAtomContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};
IsNullAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterIsNullAtom(this);
	}
};

IsNullAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitIsNullAtom(this);
	}
};


function NvlAtomContext(parser, ctx) {
	ExprAtomContext.call(this, parser);
    ExprAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NvlAtomContext.prototype = Object.create(ExprAtomContext.prototype);
NvlAtomContext.prototype.constructor = NvlAtomContext;

VtlParser.NvlAtomContext = NvlAtomContext;

NvlAtomContext.prototype.NVL = function() {
    return this.getToken(VtlParser.NVL, 0);
};

NvlAtomContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

NvlAtomContext.prototype.CARTESIAN_PER = function() {
    return this.getToken(VtlParser.CARTESIAN_PER, 0);
};
NvlAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterNvlAtom(this);
	}
};

NvlAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitNvlAtom(this);
	}
};


function CeilAtomContext(parser, ctx) {
	ExprAtomContext.call(this, parser);
    ExprAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CeilAtomContext.prototype = Object.create(ExprAtomContext.prototype);
CeilAtomContext.prototype.constructor = CeilAtomContext;

VtlParser.CeilAtomContext = CeilAtomContext;

CeilAtomContext.prototype.CEIL = function() {
    return this.getToken(VtlParser.CEIL, 0);
};

CeilAtomContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};
CeilAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterCeilAtom(this);
	}
};

CeilAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitCeilAtom(this);
	}
};


function RtrimAtomContext(parser, ctx) {
	ExprAtomContext.call(this, parser);
    ExprAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RtrimAtomContext.prototype = Object.create(ExprAtomContext.prototype);
RtrimAtomContext.prototype.constructor = RtrimAtomContext;

VtlParser.RtrimAtomContext = RtrimAtomContext;

RtrimAtomContext.prototype.RTRIM = function() {
    return this.getToken(VtlParser.RTRIM, 0);
};

RtrimAtomContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};
RtrimAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterRtrimAtom(this);
	}
};

RtrimAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitRtrimAtom(this);
	}
};


function RoundAtomContext(parser, ctx) {
	ExprAtomContext.call(this, parser);
    ExprAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RoundAtomContext.prototype = Object.create(ExprAtomContext.prototype);
RoundAtomContext.prototype.constructor = RoundAtomContext;

VtlParser.RoundAtomContext = RoundAtomContext;

RoundAtomContext.prototype.ROUND = function() {
    return this.getToken(VtlParser.ROUND, 0);
};

RoundAtomContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

RoundAtomContext.prototype.CARTESIAN_PER = function() {
    return this.getToken(VtlParser.CARTESIAN_PER, 0);
};

RoundAtomContext.prototype.optionalExpr = function() {
    return this.getTypedRuleContext(OptionalExprContext,0);
};
RoundAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterRoundAtom(this);
	}
};

RoundAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitRoundAtom(this);
	}
};


function UcaseAtomContext(parser, ctx) {
	ExprAtomContext.call(this, parser);
    ExprAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UcaseAtomContext.prototype = Object.create(ExprAtomContext.prototype);
UcaseAtomContext.prototype.constructor = UcaseAtomContext;

VtlParser.UcaseAtomContext = UcaseAtomContext;

UcaseAtomContext.prototype.UCASE = function() {
    return this.getToken(VtlParser.UCASE, 0);
};

UcaseAtomContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};
UcaseAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterUcaseAtom(this);
	}
};

UcaseAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitUcaseAtom(this);
	}
};


function LcaseAtomContext(parser, ctx) {
	ExprAtomContext.call(this, parser);
    ExprAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LcaseAtomContext.prototype = Object.create(ExprAtomContext.prototype);
LcaseAtomContext.prototype.constructor = LcaseAtomContext;

VtlParser.LcaseAtomContext = LcaseAtomContext;

LcaseAtomContext.prototype.LCASE = function() {
    return this.getToken(VtlParser.LCASE, 0);
};

LcaseAtomContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};
LcaseAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterLcaseAtom(this);
	}
};

LcaseAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitLcaseAtom(this);
	}
};


function HierarchyExprAtomContext(parser, ctx) {
	ExprAtomContext.call(this, parser);
    ExprAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HierarchyExprAtomContext.prototype = Object.create(ExprAtomContext.prototype);
HierarchyExprAtomContext.prototype.constructor = HierarchyExprAtomContext;

VtlParser.HierarchyExprAtomContext = HierarchyExprAtomContext;

HierarchyExprAtomContext.prototype.hierarchyExpr = function() {
    return this.getTypedRuleContext(HierarchyExprContext,0);
};
HierarchyExprAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterHierarchyExprAtom(this);
	}
};

HierarchyExprAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitHierarchyExprAtom(this);
	}
};


function RefAtomContext(parser, ctx) {
	ExprAtomContext.call(this, parser);
    ExprAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RefAtomContext.prototype = Object.create(ExprAtomContext.prototype);
RefAtomContext.prototype.constructor = RefAtomContext;

VtlParser.RefAtomContext = RefAtomContext;

RefAtomContext.prototype.ref = function() {
    return this.getTypedRuleContext(RefContext,0);
};
RefAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterRefAtom(this);
	}
};

RefAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitRefAtom(this);
	}
};


function FloorAtomContext(parser, ctx) {
	ExprAtomContext.call(this, parser);
    ExprAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FloorAtomContext.prototype = Object.create(ExprAtomContext.prototype);
FloorAtomContext.prototype.constructor = FloorAtomContext;

VtlParser.FloorAtomContext = FloorAtomContext;

FloorAtomContext.prototype.FLOOR = function() {
    return this.getToken(VtlParser.FLOOR, 0);
};

FloorAtomContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};
FloorAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterFloorAtom(this);
	}
};

FloorAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitFloorAtom(this);
	}
};


function SubstrAtomContext(parser, ctx) {
	ExprAtomContext.call(this, parser);
    ExprAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubstrAtomContext.prototype = Object.create(ExprAtomContext.prototype);
SubstrAtomContext.prototype.constructor = SubstrAtomContext;

VtlParser.SubstrAtomContext = SubstrAtomContext;

SubstrAtomContext.prototype.SUBSTR = function() {
    return this.getToken(VtlParser.SUBSTR, 0);
};

SubstrAtomContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

SubstrAtomContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


SubstrAtomContext.prototype.optionalExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OptionalExprContext);
    } else {
        return this.getTypedRuleContext(OptionalExprContext,i);
    }
};
SubstrAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterSubstrAtom(this);
	}
};

SubstrAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitSubstrAtom(this);
	}
};


function LogAtomContext(parser, ctx) {
	ExprAtomContext.call(this, parser);
    ExprAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogAtomContext.prototype = Object.create(ExprAtomContext.prototype);
LogAtomContext.prototype.constructor = LogAtomContext;

VtlParser.LogAtomContext = LogAtomContext;

LogAtomContext.prototype.LOG = function() {
    return this.getToken(VtlParser.LOG, 0);
};

LogAtomContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

LogAtomContext.prototype.CARTESIAN_PER = function() {
    return this.getToken(VtlParser.CARTESIAN_PER, 0);
};
LogAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterLogAtom(this);
	}
};

LogAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitLogAtom(this);
	}
};


function PowerAtomContext(parser, ctx) {
	ExprAtomContext.call(this, parser);
    ExprAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PowerAtomContext.prototype = Object.create(ExprAtomContext.prototype);
PowerAtomContext.prototype.constructor = PowerAtomContext;

VtlParser.PowerAtomContext = PowerAtomContext;

PowerAtomContext.prototype.POWER = function() {
    return this.getToken(VtlParser.POWER, 0);
};

PowerAtomContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

PowerAtomContext.prototype.CARTESIAN_PER = function() {
    return this.getToken(VtlParser.CARTESIAN_PER, 0);
};
PowerAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterPowerAtom(this);
	}
};

PowerAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitPowerAtom(this);
	}
};


function LenAtomContext(parser, ctx) {
	ExprAtomContext.call(this, parser);
    ExprAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LenAtomContext.prototype = Object.create(ExprAtomContext.prototype);
LenAtomContext.prototype.constructor = LenAtomContext;

VtlParser.LenAtomContext = LenAtomContext;

LenAtomContext.prototype.LEN = function() {
    return this.getToken(VtlParser.LEN, 0);
};

LenAtomContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};
LenAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterLenAtom(this);
	}
};

LenAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitLenAtom(this);
	}
};


function MinAtomContext(parser, ctx) {
	ExprAtomContext.call(this, parser);
    ExprAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MinAtomContext.prototype = Object.create(ExprAtomContext.prototype);
MinAtomContext.prototype.constructor = MinAtomContext;

VtlParser.MinAtomContext = MinAtomContext;

MinAtomContext.prototype.ABS = function() {
    return this.getToken(VtlParser.ABS, 0);
};

MinAtomContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};
MinAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterMinAtom(this);
	}
};

MinAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitMinAtom(this);
	}
};


function ModAtomContext(parser, ctx) {
	ExprAtomContext.call(this, parser);
    ExprAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ModAtomContext.prototype = Object.create(ExprAtomContext.prototype);
ModAtomContext.prototype.constructor = ModAtomContext;

VtlParser.ModAtomContext = ModAtomContext;

ModAtomContext.prototype.MOD = function() {
    return this.getToken(VtlParser.MOD, 0);
};

ModAtomContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

ModAtomContext.prototype.CARTESIAN_PER = function() {
    return this.getToken(VtlParser.CARTESIAN_PER, 0);
};
ModAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterModAtom(this);
	}
};

ModAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitModAtom(this);
	}
};


function ValidateHRrulesetContext(parser, ctx) {
	ExprAtomContext.call(this, parser);
    ExprAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ValidateHRrulesetContext.prototype = Object.create(ExprAtomContext.prototype);
ValidateHRrulesetContext.prototype.constructor = ValidateHRrulesetContext;

VtlParser.ValidateHRrulesetContext = ValidateHRrulesetContext;

ValidateHRrulesetContext.prototype.validationHierarchical = function() {
    return this.getTypedRuleContext(ValidationHierarchicalContext,0);
};
ValidateHRrulesetContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterValidateHRruleset(this);
	}
};

ValidateHRrulesetContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitValidateHRruleset(this);
	}
};


function BetweenAtomContext(parser, ctx) {
	ExprAtomContext.call(this, parser);
    ExprAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BetweenAtomContext.prototype = Object.create(ExprAtomContext.prototype);
BetweenAtomContext.prototype.constructor = BetweenAtomContext;

VtlParser.BetweenAtomContext = BetweenAtomContext;

BetweenAtomContext.prototype.BETWEEN = function() {
    return this.getToken(VtlParser.BETWEEN, 0);
};

BetweenAtomContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

BetweenAtomContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};

BetweenAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterBetweenAtom(this);
	}
};

BetweenAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitBetweenAtom(this);
	}
};


function ExpAtomContext(parser, ctx) {
	ExprAtomContext.call(this, parser);
    ExprAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExpAtomContext.prototype = Object.create(ExprAtomContext.prototype);
ExpAtomContext.prototype.constructor = ExpAtomContext;

VtlParser.ExpAtomContext = ExpAtomContext;

ExpAtomContext.prototype.EXP = function() {
    return this.getToken(VtlParser.EXP, 0);
};

ExpAtomContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};
ExpAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterExpAtom(this);
	}
};

ExpAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitExpAtom(this);
	}
};


function EvalExprAtomContext(parser, ctx) {
	ExprAtomContext.call(this, parser);
    ExprAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EvalExprAtomContext.prototype = Object.create(ExprAtomContext.prototype);
EvalExprAtomContext.prototype.constructor = EvalExprAtomContext;

VtlParser.EvalExprAtomContext = EvalExprAtomContext;

EvalExprAtomContext.prototype.evalExpr = function() {
    return this.getTypedRuleContext(EvalExprContext,0);
};
EvalExprAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterEvalExprAtom(this);
	}
};

EvalExprAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitEvalExprAtom(this);
	}
};


function CastExprAtomContext(parser, ctx) {
	ExprAtomContext.call(this, parser);
    ExprAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CastExprAtomContext.prototype = Object.create(ExprAtomContext.prototype);
CastExprAtomContext.prototype.constructor = CastExprAtomContext;

VtlParser.CastExprAtomContext = CastExprAtomContext;

CastExprAtomContext.prototype.castExpr = function() {
    return this.getTypedRuleContext(CastExprContext,0);
};
CastExprAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterCastExprAtom(this);
	}
};

CastExprAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitCastExprAtom(this);
	}
};


function FlowToStockAtomContext(parser, ctx) {
	ExprAtomContext.call(this, parser);
    ExprAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FlowToStockAtomContext.prototype = Object.create(ExprAtomContext.prototype);
FlowToStockAtomContext.prototype.constructor = FlowToStockAtomContext;

VtlParser.FlowToStockAtomContext = FlowToStockAtomContext;

FlowToStockAtomContext.prototype.FLOW_TO_STOCK = function() {
    return this.getToken(VtlParser.FLOW_TO_STOCK, 0);
};

FlowToStockAtomContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};
FlowToStockAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterFlowToStockAtom(this);
	}
};

FlowToStockAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitFlowToStockAtom(this);
	}
};


function ReplaceAtomContext(parser, ctx) {
	ExprAtomContext.call(this, parser);
    ExprAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ReplaceAtomContext.prototype = Object.create(ExprAtomContext.prototype);
ReplaceAtomContext.prototype.constructor = ReplaceAtomContext;

VtlParser.ReplaceAtomContext = ReplaceAtomContext;

ReplaceAtomContext.prototype.REPLACE = function() {
    return this.getToken(VtlParser.REPLACE, 0);
};

ReplaceAtomContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

ReplaceAtomContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


ReplaceAtomContext.prototype.optionalExpr = function() {
    return this.getTypedRuleContext(OptionalExprContext,0);
};
ReplaceAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterReplaceAtom(this);
	}
};

ReplaceAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitReplaceAtom(this);
	}
};



VtlParser.ExprAtomContext = ExprAtomContext;

VtlParser.prototype.exprAtom = function() {

    var localctx = new ExprAtomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, VtlParser.RULE_exprAtom);
    var _la = 0; // Token type
    try {
        this.state = 776;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.ROUND:
            localctx = new RoundAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 593;
            this.match(VtlParser.ROUND);
            this.state = 594;
            this.match(VtlParser.T__12);
            this.state = 595;
            this.expr(0);
            this.state = 598;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.CARTESIAN_PER) {
                this.state = 596;
                this.match(VtlParser.CARTESIAN_PER);
                this.state = 597;
                this.optionalExpr();
            }

            this.state = 600;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.CEIL:
            localctx = new CeilAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 602;
            this.match(VtlParser.CEIL);
            this.state = 603;
            this.match(VtlParser.T__12);
            this.state = 604;
            this.expr(0);
            this.state = 605;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.FLOOR:
            localctx = new FloorAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 607;
            this.match(VtlParser.FLOOR);
            this.state = 608;
            this.match(VtlParser.T__12);
            this.state = 609;
            this.expr(0);
            this.state = 610;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.ABS:
            localctx = new MinAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 612;
            this.match(VtlParser.ABS);
            this.state = 613;
            this.match(VtlParser.T__12);
            this.state = 614;
            this.expr(0);
            this.state = 615;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.EXP:
            localctx = new ExpAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 617;
            this.match(VtlParser.EXP);
            this.state = 618;
            this.match(VtlParser.T__12);
            this.state = 619;
            this.expr(0);
            this.state = 620;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.LN:
            localctx = new LnAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 622;
            this.match(VtlParser.LN);
            this.state = 623;
            this.match(VtlParser.T__12);
            this.state = 624;
            this.expr(0);
            this.state = 625;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.LOG:
            localctx = new LogAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 627;
            this.match(VtlParser.LOG);
            this.state = 628;
            this.match(VtlParser.T__12);
            this.state = 629;
            this.expr(0);
            this.state = 630;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 631;
            this.expr(0);
            this.state = 632;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.TRUNC:
            localctx = new LnAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 634;
            this.match(VtlParser.TRUNC);
            this.state = 635;
            this.match(VtlParser.T__12);
            this.state = 636;
            this.expr(0);
            this.state = 639;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.CARTESIAN_PER) {
                this.state = 637;
                this.match(VtlParser.CARTESIAN_PER);
                this.state = 638;
                this.optionalExpr();
            }

            this.state = 641;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.POWER:
            localctx = new PowerAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 643;
            this.match(VtlParser.POWER);
            this.state = 644;
            this.match(VtlParser.T__12);
            this.state = 645;
            this.expr(0);
            this.state = 646;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 647;
            this.expr(0);
            this.state = 648;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.SQRT:
            localctx = new SqrtAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 650;
            this.match(VtlParser.SQRT);
            this.state = 651;
            this.match(VtlParser.T__12);
            this.state = 652;
            this.expr(0);
            this.state = 653;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.LEN:
            localctx = new LenAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 655;
            this.match(VtlParser.LEN);
            this.state = 656;
            this.match(VtlParser.T__12);
            this.state = 657;
            this.expr(0);
            this.state = 658;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.BETWEEN:
            localctx = new BetweenAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 660;
            this.match(VtlParser.BETWEEN);
            this.state = 661;
            this.match(VtlParser.T__12);
            this.state = 662;
            this.expr(0);
            this.state = 663;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 664;
            this.expr(0);
            this.state = 665;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 666;
            this.expr(0);
            this.state = 667;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.TRIM:
            localctx = new TrimAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 669;
            this.match(VtlParser.TRIM);
            this.state = 670;
            this.match(VtlParser.T__12);
            this.state = 671;
            this.expr(0);
            this.state = 672;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.LTRIM:
            localctx = new LtrimAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 674;
            this.match(VtlParser.LTRIM);
            this.state = 675;
            this.match(VtlParser.T__12);
            this.state = 676;
            this.expr(0);
            this.state = 677;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.RTRIM:
            localctx = new RtrimAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            this.state = 679;
            this.match(VtlParser.RTRIM);
            this.state = 680;
            this.match(VtlParser.T__12);
            this.state = 681;
            this.expr(0);
            this.state = 682;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.UCASE:
            localctx = new UcaseAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 16);
            this.state = 684;
            this.match(VtlParser.UCASE);
            this.state = 685;
            this.match(VtlParser.T__12);
            this.state = 686;
            this.expr(0);
            this.state = 687;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.LCASE:
            localctx = new LcaseAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 17);
            this.state = 689;
            this.match(VtlParser.LCASE);
            this.state = 690;
            this.match(VtlParser.T__12);
            this.state = 691;
            this.expr(0);
            this.state = 692;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.SUBSTR:
            localctx = new SubstrAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 18);
            this.state = 694;
            this.match(VtlParser.SUBSTR);
            this.state = 695;
            this.match(VtlParser.T__12);
            this.state = 696;
            this.expr(0);
            this.state = 699;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
            if(la_===1) {
                this.state = 697;
                this.match(VtlParser.CARTESIAN_PER);
                this.state = 698;
                this.optionalExpr();

            }
            this.state = 703;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.CARTESIAN_PER) {
                this.state = 701;
                this.match(VtlParser.CARTESIAN_PER);
                this.state = 702;
                this.optionalExpr();
            }

            this.state = 705;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.INSTR:
            localctx = new InstrAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 19);
            this.state = 707;
            this.match(VtlParser.INSTR);
            this.state = 708;
            this.match(VtlParser.T__12);
            this.state = 709;
            this.expr(0);
            this.state = 710;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 711;
            this.expr(0);
            this.state = 714;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
            if(la_===1) {
                this.state = 712;
                this.match(VtlParser.CARTESIAN_PER);
                this.state = 713;
                this.optionalExpr();

            }
            this.state = 718;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.CARTESIAN_PER) {
                this.state = 716;
                this.match(VtlParser.CARTESIAN_PER);
                this.state = 717;
                this.optionalExpr();
            }

            this.state = 720;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.REPLACE:
            localctx = new ReplaceAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 20);
            this.state = 722;
            this.match(VtlParser.REPLACE);
            this.state = 723;
            this.match(VtlParser.T__12);
            this.state = 724;
            this.expr(0);
            this.state = 725;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 726;
            this.expr(0);
            this.state = 729;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.CARTESIAN_PER) {
                this.state = 727;
                this.match(VtlParser.CARTESIAN_PER);
                this.state = 728;
                this.optionalExpr();
            }

            this.state = 731;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.CHARSET_MATCH:
            localctx = new CharsetMatchAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 21);
            this.state = 733;
            this.match(VtlParser.CHARSET_MATCH);
            this.state = 734;
            this.match(VtlParser.T__12);
            this.state = 735;
            this.expr(0);
            this.state = 736;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 737;
            this.expr(0);
            this.state = 738;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.ISNULL:
            localctx = new IsNullAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 22);
            this.state = 740;
            this.match(VtlParser.ISNULL);
            this.state = 741;
            this.match(VtlParser.T__12);
            this.state = 742;
            this.expr(0);
            this.state = 743;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.NVL:
            localctx = new NvlAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 23);
            this.state = 745;
            this.match(VtlParser.NVL);
            this.state = 746;
            this.match(VtlParser.T__12);
            this.state = 747;
            this.expr(0);
            this.state = 748;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 749;
            this.expr(0);
            this.state = 750;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.MOD:
            localctx = new ModAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 24);
            this.state = 752;
            this.match(VtlParser.MOD);
            this.state = 753;
            this.match(VtlParser.T__12);
            this.state = 754;
            this.expr(0);
            this.state = 755;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 756;
            this.expr(0);
            this.state = 757;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.T__12:
        case VtlParser.INTEGER_CONSTANT:
        case VtlParser.FLOAT_CONSTANT:
        case VtlParser.BOOLEAN_CONSTANT:
        case VtlParser.NULL_CONSTANT:
        case VtlParser.STRING_CONSTANT:
        case VtlParser.IDENTIFIER:
            localctx = new RefAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 25);
            this.state = 759;
            this.ref();
            break;
        case VtlParser.EVAL:
            localctx = new EvalExprAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 26);
            this.state = 760;
            this.evalExpr();
            break;
        case VtlParser.CAST:
            localctx = new CastExprAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 27);
            this.state = 761;
            this.castExpr();
            break;
        case VtlParser.HIERARCHY:
            localctx = new HierarchyExprAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 28);
            this.state = 762;
            this.hierarchyExpr();
            break;
        case VtlParser.FLOW_TO_STOCK:
            localctx = new FlowToStockAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 29);
            this.state = 763;
            this.match(VtlParser.FLOW_TO_STOCK);
            this.state = 764;
            this.match(VtlParser.T__12);
            this.state = 765;
            this.expr(0);
            this.state = 766;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.STOCK_TO_FLOW:
            localctx = new StockToFlowAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 30);
            this.state = 768;
            this.match(VtlParser.STOCK_TO_FLOW);
            this.state = 769;
            this.match(VtlParser.T__12);
            this.state = 770;
            this.expr(0);
            this.state = 771;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.CHECK_DATAPOINT:
            localctx = new ValidateDPrulesetContext(this, localctx);
            this.enterOuterAlt(localctx, 31);
            this.state = 773;
            this.validationDatapoint();
            break;
        case VtlParser.CHECK_HIERARCHY:
            localctx = new ValidateHRrulesetContext(this, localctx);
            this.enterOuterAlt(localctx, 32);
            this.state = 774;
            this.validationHierarchical();
            break;
        case VtlParser.CHECK:
            localctx = new ValidationSimpleContext(this, localctx);
            this.enterOuterAlt(localctx, 33);
            this.state = 775;
            this.validationExpr();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_ref;
    return this;
}

RefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RefContext.prototype.constructor = RefContext;


 
RefContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function VarIdRefContext(parser, ctx) {
	RefContext.call(this, parser);
    RefContext.prototype.copyFrom.call(this, ctx);
    return this;
}

VarIdRefContext.prototype = Object.create(RefContext.prototype);
VarIdRefContext.prototype.constructor = VarIdRefContext;

VtlParser.VarIdRefContext = VarIdRefContext;

VarIdRefContext.prototype.varID = function() {
    return this.getTypedRuleContext(VarIDContext,0);
};
VarIdRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterVarIdRef(this);
	}
};

VarIdRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitVarIdRef(this);
	}
};


function ParenthesisExprRefContext(parser, ctx) {
	RefContext.call(this, parser);
    RefContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParenthesisExprRefContext.prototype = Object.create(RefContext.prototype);
ParenthesisExprRefContext.prototype.constructor = ParenthesisExprRefContext;

VtlParser.ParenthesisExprRefContext = ParenthesisExprRefContext;

ParenthesisExprRefContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};
ParenthesisExprRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterParenthesisExprRef(this);
	}
};

ParenthesisExprRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitParenthesisExprRef(this);
	}
};


function ConstantRefContext(parser, ctx) {
	RefContext.call(this, parser);
    RefContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConstantRefContext.prototype = Object.create(RefContext.prototype);
ConstantRefContext.prototype.constructor = ConstantRefContext;

VtlParser.ConstantRefContext = ConstantRefContext;

ConstantRefContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};
ConstantRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterConstantRef(this);
	}
};

ConstantRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitConstantRef(this);
	}
};



VtlParser.RefContext = RefContext;

VtlParser.prototype.ref = function() {

    var localctx = new RefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, VtlParser.RULE_ref);
    try {
        this.state = 784;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.T__12:
            localctx = new ParenthesisExprRefContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 778;
            this.match(VtlParser.T__12);
            this.state = 779;
            this.expr(0);
            this.state = 780;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.IDENTIFIER:
            localctx = new VarIdRefContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 782;
            this.varID();
            break;
        case VtlParser.INTEGER_CONSTANT:
        case VtlParser.FLOAT_CONSTANT:
        case VtlParser.BOOLEAN_CONSTANT:
        case VtlParser.NULL_CONSTANT:
        case VtlParser.STRING_CONSTANT:
            localctx = new ConstantRefContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 783;
            this.constant();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_identifierList;
    return this;
}

IdentifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierListContext.prototype.constructor = IdentifierListContext;

IdentifierListContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.IDENTIFIER);
    } else {
        return this.getToken(VtlParser.IDENTIFIER, i);
    }
};


IdentifierListContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


IdentifierListContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterIdentifierList(this);
	}
};

IdentifierListContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitIdentifierList(this);
	}
};




VtlParser.IdentifierListContext = IdentifierListContext;

VtlParser.prototype.identifierList = function() {

    var localctx = new IdentifierListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, VtlParser.RULE_identifierList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 786;
        this.match(VtlParser.T__0);
        this.state = 787;
        this.match(VtlParser.IDENTIFIER);
        this.state = 792;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.CARTESIAN_PER) {
            this.state = 788;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 789;
            this.match(VtlParser.IDENTIFIER);
            this.state = 794;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 795;
        this.match(VtlParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ListsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_lists;
    return this;
}

ListsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ListsContext.prototype.constructor = ListsContext;

ListsContext.prototype.constant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantContext);
    } else {
        return this.getTypedRuleContext(ConstantContext,i);
    }
};

ListsContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


ListsContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterLists(this);
	}
};

ListsContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitLists(this);
	}
};




VtlParser.ListsContext = ListsContext;

VtlParser.prototype.lists = function() {

    var localctx = new ListsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, VtlParser.RULE_lists);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 797;
        this.match(VtlParser.T__15);
        this.state = 798;
        this.constant();
        this.state = 803;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.CARTESIAN_PER) {
            this.state = 799;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 800;
            this.constant();
            this.state = 805;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 806;
        this.match(VtlParser.T__16);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EvalExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_evalExpr;
    return this;
}

EvalExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EvalExprContext.prototype.constructor = EvalExprContext;

EvalExprContext.prototype.EVAL = function() {
    return this.getToken(VtlParser.EVAL, 0);
};

EvalExprContext.prototype.routineName = function() {
    return this.getTypedRuleContext(RoutineNameContext,0);
};

EvalExprContext.prototype.componentID = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ComponentIDContext);
    } else {
        return this.getTypedRuleContext(ComponentIDContext,i);
    }
};

EvalExprContext.prototype.constant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantContext);
    } else {
        return this.getTypedRuleContext(ConstantContext,i);
    }
};

EvalExprContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


EvalExprContext.prototype.LANGUAGE = function() {
    return this.getToken(VtlParser.LANGUAGE, 0);
};

EvalExprContext.prototype.STRING_CONSTANT = function() {
    return this.getToken(VtlParser.STRING_CONSTANT, 0);
};

EvalExprContext.prototype.RETURNS = function() {
    return this.getToken(VtlParser.RETURNS, 0);
};

EvalExprContext.prototype.outputParameterType = function() {
    return this.getTypedRuleContext(OutputParameterTypeContext,0);
};

EvalExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterEvalExpr(this);
	}
};

EvalExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitEvalExpr(this);
	}
};




VtlParser.EvalExprContext = EvalExprContext;

VtlParser.prototype.evalExpr = function() {

    var localctx = new EvalExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, VtlParser.RULE_evalExpr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 808;
        this.match(VtlParser.EVAL);
        this.state = 809;
        this.match(VtlParser.T__12);
        this.state = 810;
        this.routineName();
        this.state = 811;
        this.match(VtlParser.T__12);
        this.state = 814;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case VtlParser.IDENTIFIER:
        	this.state = 812;
        	this.componentID();
        	break;
        case VtlParser.INTEGER_CONSTANT:
        case VtlParser.FLOAT_CONSTANT:
        case VtlParser.BOOLEAN_CONSTANT:
        case VtlParser.NULL_CONSTANT:
        case VtlParser.STRING_CONSTANT:
        	this.state = 813;
        	this.constant();
        	break;
        case VtlParser.T__13:
        case VtlParser.CARTESIAN_PER:
        	break;
        default:
        	break;
        }
        this.state = 823;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.CARTESIAN_PER) {
            this.state = 816;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 819;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case VtlParser.IDENTIFIER:
                this.state = 817;
                this.componentID();
                break;
            case VtlParser.INTEGER_CONSTANT:
            case VtlParser.FLOAT_CONSTANT:
            case VtlParser.BOOLEAN_CONSTANT:
            case VtlParser.NULL_CONSTANT:
            case VtlParser.STRING_CONSTANT:
                this.state = 818;
                this.constant();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 825;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 826;
        this.match(VtlParser.T__13);
        this.state = 829;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.LANGUAGE) {
            this.state = 827;
            this.match(VtlParser.LANGUAGE);
            this.state = 828;
            this.match(VtlParser.STRING_CONSTANT);
        }

        this.state = 833;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.RETURNS) {
            this.state = 831;
            this.match(VtlParser.RETURNS);
            this.state = 832;
            this.outputParameterType();
        }

        this.state = 835;
        this.match(VtlParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CastExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_castExpr;
    return this;
}

CastExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CastExprContext.prototype.constructor = CastExprContext;

CastExprContext.prototype.CAST = function() {
    return this.getToken(VtlParser.CAST, 0);
};

CastExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

CastExprContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


CastExprContext.prototype.basicScalarType = function() {
    return this.getTypedRuleContext(BasicScalarTypeContext,0);
};

CastExprContext.prototype.valueDomainName = function() {
    return this.getTypedRuleContext(ValueDomainNameContext,0);
};

CastExprContext.prototype.STRING_CONSTANT = function() {
    return this.getToken(VtlParser.STRING_CONSTANT, 0);
};

CastExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterCastExpr(this);
	}
};

CastExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitCastExpr(this);
	}
};




VtlParser.CastExprContext = CastExprContext;

VtlParser.prototype.castExpr = function() {

    var localctx = new CastExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, VtlParser.RULE_castExpr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 837;
        this.match(VtlParser.CAST);
        this.state = 838;
        this.match(VtlParser.T__12);
        this.state = 839;
        this.expr(0);
        this.state = 840;
        this.match(VtlParser.CARTESIAN_PER);
        this.state = 843;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.BOOLEAN:
        case VtlParser.DATE:
        case VtlParser.TIME_PERIOD:
        case VtlParser.NUMBER:
        case VtlParser.STRING:
        case VtlParser.INTEGER:
        case VtlParser.DURATION:
        case VtlParser.SCALAR:
        case VtlParser.TIME:
            this.state = 841;
            this.basicScalarType();
            break;
        case VtlParser.IDENTIFIER:
            this.state = 842;
            this.valueDomainName();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 847;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.CARTESIAN_PER) {
            this.state = 845;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 846;
            this.match(VtlParser.STRING_CONSTANT);
        }

        this.state = 849;
        this.match(VtlParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PeriodExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_periodExpr;
    return this;
}

PeriodExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PeriodExprContext.prototype.constructor = PeriodExprContext;

PeriodExprContext.prototype.PERIOD_INDICATOR = function() {
    return this.getToken(VtlParser.PERIOD_INDICATOR, 0);
};

PeriodExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

PeriodExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterPeriodExpr(this);
	}
};

PeriodExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitPeriodExpr(this);
	}
};




VtlParser.PeriodExprContext = PeriodExprContext;

VtlParser.prototype.periodExpr = function() {

    var localctx = new PeriodExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, VtlParser.RULE_periodExpr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 851;
        this.match(VtlParser.PERIOD_INDICATOR);
        this.state = 852;
        this.match(VtlParser.T__12);
        this.state = 854;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VtlParser.T__2) | (1 << VtlParser.T__3) | (1 << VtlParser.T__12) | (1 << VtlParser.EVAL) | (1 << VtlParser.IF) | (1 << VtlParser.CURRENT_DATE))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (VtlParser.NOT - 38)) | (1 << (VtlParser.BETWEEN - 38)) | (1 << (VtlParser.ISNULL - 38)) | (1 << (VtlParser.UNION - 38)) | (1 << (VtlParser.SYMDIFF - 38)) | (1 << (VtlParser.INTERSECT - 38)) | (1 << (VtlParser.CHECK - 38)) | (1 << (VtlParser.EXISTS_IN - 38)) | (1 << (VtlParser.RANK - 38)) | (1 << (VtlParser.MIN - 38)) | (1 << (VtlParser.MAX - 38)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (VtlParser.ABS - 72)) | (1 << (VtlParser.LN - 72)) | (1 << (VtlParser.LOG - 72)) | (1 << (VtlParser.TRUNC - 72)) | (1 << (VtlParser.ROUND - 72)) | (1 << (VtlParser.POWER - 72)) | (1 << (VtlParser.MOD - 72)) | (1 << (VtlParser.LEN - 72)) | (1 << (VtlParser.TRIM - 72)) | (1 << (VtlParser.UCASE - 72)) | (1 << (VtlParser.LCASE - 72)) | (1 << (VtlParser.SUBSTR - 72)) | (1 << (VtlParser.SUM - 72)) | (1 << (VtlParser.AVG - 72)) | (1 << (VtlParser.MEDIAN - 72)) | (1 << (VtlParser.COUNT - 72)) | (1 << (VtlParser.EXP - 72)) | (1 << (VtlParser.CHARSET_MATCH - 72)) | (1 << (VtlParser.NVL - 72)) | (1 << (VtlParser.HIERARCHY - 72)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (VtlParser.DEFINE - 110)) | (1 << (VtlParser.LTRIM - 110)) | (1 << (VtlParser.RTRIM - 110)) | (1 << (VtlParser.INSTR - 110)) | (1 << (VtlParser.REPLACE - 110)) | (1 << (VtlParser.CEIL - 110)) | (1 << (VtlParser.FLOOR - 110)) | (1 << (VtlParser.SQRT - 110)) | (1 << (VtlParser.SETDIFF - 110)) | (1 << (VtlParser.STDDEV_POP - 110)) | (1 << (VtlParser.STDDEV_SAMP - 110)) | (1 << (VtlParser.VAR_POP - 110)) | (1 << (VtlParser.VAR_SAMP - 110)) | (1 << (VtlParser.FIRST_VALUE - 110)) | (1 << (VtlParser.LAST_VALUE - 110)) | (1 << (VtlParser.LAG - 110)) | (1 << (VtlParser.LEAD - 110)) | (1 << (VtlParser.RATIO_TO_REPORT - 110)))) !== 0) || ((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (VtlParser.FILL_TIME_SERIES - 148)) | (1 << (VtlParser.FLOW_TO_STOCK - 148)) | (1 << (VtlParser.STOCK_TO_FLOW - 148)) | (1 << (VtlParser.TIMESHIFT - 148)) | (1 << (VtlParser.INNER_JOIN - 148)))) !== 0) || ((((_la - 180)) & ~0x1f) == 0 && ((1 << (_la - 180)) & ((1 << (VtlParser.LEFT_JOIN - 180)) | (1 << (VtlParser.CROSS_JOIN - 180)) | (1 << (VtlParser.FULL_JOIN - 180)) | (1 << (VtlParser.PERIOD_INDICATOR - 180)) | (1 << (VtlParser.TIME_AGG - 180)) | (1 << (VtlParser.CAST - 180)) | (1 << (VtlParser.CHECK_DATAPOINT - 180)) | (1 << (VtlParser.CHECK_HIERARCHY - 180)))) !== 0) || ((((_la - 226)) & ~0x1f) == 0 && ((1 << (_la - 226)) & ((1 << (VtlParser.INTEGER_CONSTANT - 226)) | (1 << (VtlParser.FLOAT_CONSTANT - 226)) | (1 << (VtlParser.BOOLEAN_CONSTANT - 226)) | (1 << (VtlParser.NULL_CONSTANT - 226)) | (1 << (VtlParser.STRING_CONSTANT - 226)) | (1 << (VtlParser.IDENTIFIER - 226)))) !== 0)) {
            this.state = 853;
            this.expr(0);
        }

        this.state = 856;
        this.match(VtlParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TimeShiftExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_timeShiftExpr;
    return this;
}

TimeShiftExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TimeShiftExprContext.prototype.constructor = TimeShiftExprContext;

TimeShiftExprContext.prototype.TIMESHIFT = function() {
    return this.getToken(VtlParser.TIMESHIFT, 0);
};

TimeShiftExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

TimeShiftExprContext.prototype.CARTESIAN_PER = function() {
    return this.getToken(VtlParser.CARTESIAN_PER, 0);
};

TimeShiftExprContext.prototype.INTEGER_CONSTANT = function() {
    return this.getToken(VtlParser.INTEGER_CONSTANT, 0);
};

TimeShiftExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterTimeShiftExpr(this);
	}
};

TimeShiftExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitTimeShiftExpr(this);
	}
};




VtlParser.TimeShiftExprContext = TimeShiftExprContext;

VtlParser.prototype.timeShiftExpr = function() {

    var localctx = new TimeShiftExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, VtlParser.RULE_timeShiftExpr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 858;
        this.match(VtlParser.TIMESHIFT);
        this.state = 859;
        this.match(VtlParser.T__12);
        this.state = 860;
        this.expr(0);
        this.state = 861;
        this.match(VtlParser.CARTESIAN_PER);
        this.state = 862;
        this.match(VtlParser.INTEGER_CONSTANT);
        this.state = 863;
        this.match(VtlParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TimeSeriesExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_timeSeriesExpr;
    return this;
}

TimeSeriesExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TimeSeriesExprContext.prototype.constructor = TimeSeriesExprContext;

TimeSeriesExprContext.prototype.FILL_TIME_SERIES = function() {
    return this.getToken(VtlParser.FILL_TIME_SERIES, 0);
};

TimeSeriesExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

TimeSeriesExprContext.prototype.CARTESIAN_PER = function() {
    return this.getToken(VtlParser.CARTESIAN_PER, 0);
};

TimeSeriesExprContext.prototype.SINGLE = function() {
    return this.getToken(VtlParser.SINGLE, 0);
};

TimeSeriesExprContext.prototype.ALL = function() {
    return this.getToken(VtlParser.ALL, 0);
};

TimeSeriesExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterTimeSeriesExpr(this);
	}
};

TimeSeriesExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitTimeSeriesExpr(this);
	}
};




VtlParser.TimeSeriesExprContext = TimeSeriesExprContext;

VtlParser.prototype.timeSeriesExpr = function() {

    var localctx = new TimeSeriesExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, VtlParser.RULE_timeSeriesExpr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 865;
        this.match(VtlParser.FILL_TIME_SERIES);
        this.state = 866;
        this.match(VtlParser.T__12);
        this.state = 867;
        this.expr(0);
        this.state = 870;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.CARTESIAN_PER) {
            this.state = 868;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 869;
            _la = this._input.LA(1);
            if(!(_la===VtlParser.ALL || _la===VtlParser.SINGLE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 872;
        this.match(VtlParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TimeAggExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_timeAggExpr;
    return this;
}

TimeAggExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TimeAggExprContext.prototype.constructor = TimeAggExprContext;

TimeAggExprContext.prototype.TIME_AGG = function() {
    return this.getToken(VtlParser.TIME_AGG, 0);
};

TimeAggExprContext.prototype.STRING_CONSTANT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.STRING_CONSTANT);
    } else {
        return this.getToken(VtlParser.STRING_CONSTANT, i);
    }
};


TimeAggExprContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


TimeAggExprContext.prototype.OPTIONAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.OPTIONAL);
    } else {
        return this.getToken(VtlParser.OPTIONAL, i);
    }
};


TimeAggExprContext.prototype.FIRST = function() {
    return this.getToken(VtlParser.FIRST, 0);
};

TimeAggExprContext.prototype.LAST = function() {
    return this.getToken(VtlParser.LAST, 0);
};

TimeAggExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

TimeAggExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterTimeAggExpr(this);
	}
};

TimeAggExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitTimeAggExpr(this);
	}
};




VtlParser.TimeAggExprContext = TimeAggExprContext;

VtlParser.prototype.timeAggExpr = function() {

    var localctx = new TimeAggExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, VtlParser.RULE_timeAggExpr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 874;
        this.match(VtlParser.TIME_AGG);
        this.state = 875;
        this.match(VtlParser.T__12);
        this.state = 876;
        this.match(VtlParser.STRING_CONSTANT);
        this.state = 879;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
        if(la_===1) {
            this.state = 877;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 878;
            _la = this._input.LA(1);
            if(!(_la===VtlParser.OPTIONAL || _la===VtlParser.STRING_CONSTANT)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
        this.state = 886;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        if(la_===1) {
            this.state = 881;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 884;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case VtlParser.T__2:
            case VtlParser.T__3:
            case VtlParser.T__12:
            case VtlParser.EVAL:
            case VtlParser.IF:
            case VtlParser.CURRENT_DATE:
            case VtlParser.NOT:
            case VtlParser.BETWEEN:
            case VtlParser.ISNULL:
            case VtlParser.UNION:
            case VtlParser.SYMDIFF:
            case VtlParser.INTERSECT:
            case VtlParser.CHECK:
            case VtlParser.EXISTS_IN:
            case VtlParser.RANK:
            case VtlParser.MIN:
            case VtlParser.MAX:
            case VtlParser.ABS:
            case VtlParser.LN:
            case VtlParser.LOG:
            case VtlParser.TRUNC:
            case VtlParser.ROUND:
            case VtlParser.POWER:
            case VtlParser.MOD:
            case VtlParser.LEN:
            case VtlParser.TRIM:
            case VtlParser.UCASE:
            case VtlParser.LCASE:
            case VtlParser.SUBSTR:
            case VtlParser.SUM:
            case VtlParser.AVG:
            case VtlParser.MEDIAN:
            case VtlParser.COUNT:
            case VtlParser.EXP:
            case VtlParser.CHARSET_MATCH:
            case VtlParser.NVL:
            case VtlParser.HIERARCHY:
            case VtlParser.DEFINE:
            case VtlParser.LTRIM:
            case VtlParser.RTRIM:
            case VtlParser.INSTR:
            case VtlParser.REPLACE:
            case VtlParser.CEIL:
            case VtlParser.FLOOR:
            case VtlParser.SQRT:
            case VtlParser.SETDIFF:
            case VtlParser.STDDEV_POP:
            case VtlParser.STDDEV_SAMP:
            case VtlParser.VAR_POP:
            case VtlParser.VAR_SAMP:
            case VtlParser.FIRST_VALUE:
            case VtlParser.LAST_VALUE:
            case VtlParser.LAG:
            case VtlParser.LEAD:
            case VtlParser.RATIO_TO_REPORT:
            case VtlParser.FILL_TIME_SERIES:
            case VtlParser.FLOW_TO_STOCK:
            case VtlParser.STOCK_TO_FLOW:
            case VtlParser.TIMESHIFT:
            case VtlParser.INNER_JOIN:
            case VtlParser.LEFT_JOIN:
            case VtlParser.CROSS_JOIN:
            case VtlParser.FULL_JOIN:
            case VtlParser.PERIOD_INDICATOR:
            case VtlParser.TIME_AGG:
            case VtlParser.CAST:
            case VtlParser.CHECK_DATAPOINT:
            case VtlParser.CHECK_HIERARCHY:
            case VtlParser.INTEGER_CONSTANT:
            case VtlParser.FLOAT_CONSTANT:
            case VtlParser.BOOLEAN_CONSTANT:
            case VtlParser.NULL_CONSTANT:
            case VtlParser.STRING_CONSTANT:
            case VtlParser.IDENTIFIER:
                this.state = 882;
                this.expr(0);
                break;
            case VtlParser.OPTIONAL:
                this.state = 883;
                this.match(VtlParser.OPTIONAL);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }

        }
        this.state = 890;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.CARTESIAN_PER) {
            this.state = 888;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 889;
            _la = this._input.LA(1);
            if(!(_la===VtlParser.FIRST || _la===VtlParser.LAST)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 892;
        this.match(VtlParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValidationExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_validationExpr;
    return this;
}

ValidationExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValidationExprContext.prototype.constructor = ValidationExprContext;

ValidationExprContext.prototype.CHECK = function() {
    return this.getToken(VtlParser.CHECK, 0);
};

ValidationExprContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

ValidationExprContext.prototype.erCode = function() {
    return this.getTypedRuleContext(ErCodeContext,0);
};

ValidationExprContext.prototype.erLevel = function() {
    return this.getTypedRuleContext(ErLevelContext,0);
};

ValidationExprContext.prototype.IMBALANCE = function() {
    return this.getToken(VtlParser.IMBALANCE, 0);
};

ValidationExprContext.prototype.INVALID = function() {
    return this.getToken(VtlParser.INVALID, 0);
};

ValidationExprContext.prototype.ALL = function() {
    return this.getToken(VtlParser.ALL, 0);
};

ValidationExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterValidationExpr(this);
	}
};

ValidationExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitValidationExpr(this);
	}
};




VtlParser.ValidationExprContext = ValidationExprContext;

VtlParser.prototype.validationExpr = function() {

    var localctx = new ValidationExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, VtlParser.RULE_validationExpr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 894;
        this.match(VtlParser.CHECK);
        this.state = 895;
        this.match(VtlParser.T__12);
        this.state = 896;
        this.expr(0);
        this.state = 898;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.ERRORCODE) {
            this.state = 897;
            this.erCode();
        }

        this.state = 901;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.ERRORLEVEL) {
            this.state = 900;
            this.erLevel();
        }

        this.state = 905;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.IMBALANCE) {
            this.state = 903;
            this.match(VtlParser.IMBALANCE);
            this.state = 904;
            this.expr(0);
        }

        this.state = 908;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.ALL || _la===VtlParser.INVALID) {
            this.state = 907;
            _la = this._input.LA(1);
            if(!(_la===VtlParser.ALL || _la===VtlParser.INVALID)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 910;
        this.match(VtlParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValidationDatapointContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_validationDatapoint;
    return this;
}

ValidationDatapointContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValidationDatapointContext.prototype.constructor = ValidationDatapointContext;

ValidationDatapointContext.prototype.CHECK_DATAPOINT = function() {
    return this.getToken(VtlParser.CHECK_DATAPOINT, 0);
};

ValidationDatapointContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

ValidationDatapointContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


ValidationDatapointContext.prototype.IDENTIFIER = function() {
    return this.getToken(VtlParser.IDENTIFIER, 0);
};

ValidationDatapointContext.prototype.COMPONENTS = function() {
    return this.getToken(VtlParser.COMPONENTS, 0);
};

ValidationDatapointContext.prototype.componentID = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ComponentIDContext);
    } else {
        return this.getTypedRuleContext(ComponentIDContext,i);
    }
};

ValidationDatapointContext.prototype.INVALID = function() {
    return this.getToken(VtlParser.INVALID, 0);
};

ValidationDatapointContext.prototype.ALL_MEASURES = function() {
    return this.getToken(VtlParser.ALL_MEASURES, 0);
};

ValidationDatapointContext.prototype.ALL = function() {
    return this.getToken(VtlParser.ALL, 0);
};

ValidationDatapointContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterValidationDatapoint(this);
	}
};

ValidationDatapointContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitValidationDatapoint(this);
	}
};




VtlParser.ValidationDatapointContext = ValidationDatapointContext;

VtlParser.prototype.validationDatapoint = function() {

    var localctx = new ValidationDatapointContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, VtlParser.RULE_validationDatapoint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 912;
        this.match(VtlParser.CHECK_DATAPOINT);
        this.state = 913;
        this.match(VtlParser.T__12);
        this.state = 914;
        this.expr(0);
        this.state = 915;
        this.match(VtlParser.CARTESIAN_PER);
        this.state = 916;
        this.match(VtlParser.IDENTIFIER);
        this.state = 926;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.COMPONENTS) {
            this.state = 917;
            this.match(VtlParser.COMPONENTS);
            this.state = 918;
            this.componentID();
            this.state = 923;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===VtlParser.CARTESIAN_PER) {
                this.state = 919;
                this.match(VtlParser.CARTESIAN_PER);
                this.state = 920;
                this.componentID();
                this.state = 925;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 929;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.ALL || _la===VtlParser.INVALID || _la===VtlParser.ALL_MEASURES) {
            this.state = 928;
            _la = this._input.LA(1);
            if(!(_la===VtlParser.ALL || _la===VtlParser.INVALID || _la===VtlParser.ALL_MEASURES)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 931;
        this.match(VtlParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValidationHierarchicalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_validationHierarchical;
    return this;
}

ValidationHierarchicalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValidationHierarchicalContext.prototype.constructor = ValidationHierarchicalContext;

ValidationHierarchicalContext.prototype.CHECK_HIERARCHY = function() {
    return this.getToken(VtlParser.CHECK_HIERARCHY, 0);
};

ValidationHierarchicalContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

ValidationHierarchicalContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


ValidationHierarchicalContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.IDENTIFIER);
    } else {
        return this.getToken(VtlParser.IDENTIFIER, i);
    }
};


ValidationHierarchicalContext.prototype.CONDITION = function() {
    return this.getToken(VtlParser.CONDITION, 0);
};

ValidationHierarchicalContext.prototype.componentID = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ComponentIDContext);
    } else {
        return this.getTypedRuleContext(ComponentIDContext,i);
    }
};

ValidationHierarchicalContext.prototype.RULE = function() {
    return this.getToken(VtlParser.RULE, 0);
};

ValidationHierarchicalContext.prototype.NON_NULL = function() {
    return this.getToken(VtlParser.NON_NULL, 0);
};

ValidationHierarchicalContext.prototype.NON_ZERO = function() {
    return this.getToken(VtlParser.NON_ZERO, 0);
};

ValidationHierarchicalContext.prototype.PARTIAL_NULL = function() {
    return this.getToken(VtlParser.PARTIAL_NULL, 0);
};

ValidationHierarchicalContext.prototype.PARTIAL_ZERO = function() {
    return this.getToken(VtlParser.PARTIAL_ZERO, 0);
};

ValidationHierarchicalContext.prototype.ALWAYS_NULL = function() {
    return this.getToken(VtlParser.ALWAYS_NULL, 0);
};

ValidationHierarchicalContext.prototype.ALWAYS_ZERO = function() {
    return this.getToken(VtlParser.ALWAYS_ZERO, 0);
};

ValidationHierarchicalContext.prototype.DATASET = function() {
    return this.getToken(VtlParser.DATASET, 0);
};

ValidationHierarchicalContext.prototype.DATASET_PRIORITY = function() {
    return this.getToken(VtlParser.DATASET_PRIORITY, 0);
};

ValidationHierarchicalContext.prototype.INVALID = function() {
    return this.getToken(VtlParser.INVALID, 0);
};

ValidationHierarchicalContext.prototype.ALL = function() {
    return this.getToken(VtlParser.ALL, 0);
};

ValidationHierarchicalContext.prototype.ALL_MEASURES = function() {
    return this.getToken(VtlParser.ALL_MEASURES, 0);
};

ValidationHierarchicalContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterValidationHierarchical(this);
	}
};

ValidationHierarchicalContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitValidationHierarchical(this);
	}
};




VtlParser.ValidationHierarchicalContext = ValidationHierarchicalContext;

VtlParser.prototype.validationHierarchical = function() {

    var localctx = new ValidationHierarchicalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, VtlParser.RULE_validationHierarchical);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 933;
        this.match(VtlParser.CHECK_HIERARCHY);
        this.state = 934;
        this.match(VtlParser.T__12);
        this.state = 935;
        this.expr(0);
        this.state = 936;
        this.match(VtlParser.CARTESIAN_PER);
        this.state = 937;
        this.match(VtlParser.IDENTIFIER);
        this.state = 947;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.CONDITION) {
            this.state = 938;
            this.match(VtlParser.CONDITION);
            this.state = 939;
            this.componentID();
            this.state = 944;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===VtlParser.CARTESIAN_PER) {
                this.state = 940;
                this.match(VtlParser.CARTESIAN_PER);
                this.state = 941;
                this.componentID();
                this.state = 946;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 951;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.RULE) {
            this.state = 949;
            this.match(VtlParser.RULE);
            this.state = 950;
            this.match(VtlParser.IDENTIFIER);
        }

        this.state = 954;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 210)) & ~0x1f) == 0 && ((1 << (_la - 210)) & ((1 << (VtlParser.NON_NULL - 210)) | (1 << (VtlParser.NON_ZERO - 210)) | (1 << (VtlParser.PARTIAL_NULL - 210)) | (1 << (VtlParser.PARTIAL_ZERO - 210)) | (1 << (VtlParser.ALWAYS_NULL - 210)) | (1 << (VtlParser.ALWAYS_ZERO - 210)))) !== 0)) {
            this.state = 953;
            _la = this._input.LA(1);
            if(!(((((_la - 210)) & ~0x1f) == 0 && ((1 << (_la - 210)) & ((1 << (VtlParser.NON_NULL - 210)) | (1 << (VtlParser.NON_ZERO - 210)) | (1 << (VtlParser.PARTIAL_NULL - 210)) | (1 << (VtlParser.PARTIAL_ZERO - 210)) | (1 << (VtlParser.ALWAYS_NULL - 210)) | (1 << (VtlParser.ALWAYS_ZERO - 210)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 957;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.DATASET || _la===VtlParser.DATASET_PRIORITY) {
            this.state = 956;
            _la = this._input.LA(1);
            if(!(_la===VtlParser.DATASET || _la===VtlParser.DATASET_PRIORITY)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 960;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.ALL || _la===VtlParser.INVALID || _la===VtlParser.ALL_MEASURES) {
            this.state = 959;
            _la = this._input.LA(1);
            if(!(_la===VtlParser.ALL || _la===VtlParser.INVALID || _la===VtlParser.ALL_MEASURES)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 962;
        this.match(VtlParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ErCodeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_erCode;
    return this;
}

ErCodeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ErCodeContext.prototype.constructor = ErCodeContext;

ErCodeContext.prototype.ERRORCODE = function() {
    return this.getToken(VtlParser.ERRORCODE, 0);
};

ErCodeContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

ErCodeContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterErCode(this);
	}
};

ErCodeContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitErCode(this);
	}
};




VtlParser.ErCodeContext = ErCodeContext;

VtlParser.prototype.erCode = function() {

    var localctx = new ErCodeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, VtlParser.RULE_erCode);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 964;
        this.match(VtlParser.ERRORCODE);
        this.state = 965;
        this.constant();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ErLevelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_erLevel;
    return this;
}

ErLevelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ErLevelContext.prototype.constructor = ErLevelContext;

ErLevelContext.prototype.ERRORLEVEL = function() {
    return this.getToken(VtlParser.ERRORLEVEL, 0);
};

ErLevelContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

ErLevelContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterErLevel(this);
	}
};

ErLevelContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitErLevel(this);
	}
};




VtlParser.ErLevelContext = ErLevelContext;

VtlParser.prototype.erLevel = function() {

    var localctx = new ErLevelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, VtlParser.RULE_erLevel);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 967;
        this.match(VtlParser.ERRORLEVEL);
        this.state = 968;
        this.constant();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HierarchyExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_hierarchyExpr;
    return this;
}

HierarchyExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HierarchyExprContext.prototype.constructor = HierarchyExprContext;

HierarchyExprContext.prototype.HIERARCHY = function() {
    return this.getToken(VtlParser.HIERARCHY, 0);
};

HierarchyExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

HierarchyExprContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


HierarchyExprContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.IDENTIFIER);
    } else {
        return this.getToken(VtlParser.IDENTIFIER, i);
    }
};


HierarchyExprContext.prototype.CONDITION = function() {
    return this.getToken(VtlParser.CONDITION, 0);
};

HierarchyExprContext.prototype.componentID = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ComponentIDContext);
    } else {
        return this.getTypedRuleContext(ComponentIDContext,i);
    }
};

HierarchyExprContext.prototype.RULE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.RULE);
    } else {
        return this.getToken(VtlParser.RULE, i);
    }
};


HierarchyExprContext.prototype.OPTIONAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.OPTIONAL);
    } else {
        return this.getToken(VtlParser.OPTIONAL, i);
    }
};


HierarchyExprContext.prototype.NON_NULL = function() {
    return this.getToken(VtlParser.NON_NULL, 0);
};

HierarchyExprContext.prototype.NON_ZERO = function() {
    return this.getToken(VtlParser.NON_ZERO, 0);
};

HierarchyExprContext.prototype.PARTIAL_NULL = function() {
    return this.getToken(VtlParser.PARTIAL_NULL, 0);
};

HierarchyExprContext.prototype.PARTIAL_ZERO = function() {
    return this.getToken(VtlParser.PARTIAL_ZERO, 0);
};

HierarchyExprContext.prototype.ALWAYS_NULL = function() {
    return this.getToken(VtlParser.ALWAYS_NULL, 0);
};

HierarchyExprContext.prototype.ALWAYS_ZERO = function() {
    return this.getToken(VtlParser.ALWAYS_ZERO, 0);
};

HierarchyExprContext.prototype.DATASET = function() {
    return this.getToken(VtlParser.DATASET, 0);
};

HierarchyExprContext.prototype.RULE_PRIORITY = function() {
    return this.getToken(VtlParser.RULE_PRIORITY, 0);
};

HierarchyExprContext.prototype.COMPUTED = function() {
    return this.getToken(VtlParser.COMPUTED, 0);
};

HierarchyExprContext.prototype.ALL = function() {
    return this.getToken(VtlParser.ALL, 0);
};

HierarchyExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterHierarchyExpr(this);
	}
};

HierarchyExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitHierarchyExpr(this);
	}
};




VtlParser.HierarchyExprContext = HierarchyExprContext;

VtlParser.prototype.hierarchyExpr = function() {

    var localctx = new HierarchyExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, VtlParser.RULE_hierarchyExpr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 970;
        this.match(VtlParser.HIERARCHY);
        this.state = 971;
        this.match(VtlParser.T__12);
        this.state = 972;
        this.expr(0);
        this.state = 973;
        this.match(VtlParser.CARTESIAN_PER);
        this.state = 974;
        this.match(VtlParser.IDENTIFIER);
        this.state = 984;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.CONDITION) {
            this.state = 975;
            this.match(VtlParser.CONDITION);
            this.state = 976;
            this.componentID();
            this.state = 981;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===VtlParser.CARTESIAN_PER) {
                this.state = 977;
                this.match(VtlParser.CARTESIAN_PER);
                this.state = 978;
                this.componentID();
                this.state = 983;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 988;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
        if(la_===1) {
            this.state = 986;
            this.match(VtlParser.RULE);
            this.state = 987;
            this.match(VtlParser.IDENTIFIER);

        }
        this.state = 992;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
        if(la_===1) {
            this.state = 990;
            _la = this._input.LA(1);
            if(!(((((_la - 210)) & ~0x1f) == 0 && ((1 << (_la - 210)) & ((1 << (VtlParser.NON_NULL - 210)) | (1 << (VtlParser.NON_ZERO - 210)) | (1 << (VtlParser.PARTIAL_NULL - 210)) | (1 << (VtlParser.PARTIAL_ZERO - 210)) | (1 << (VtlParser.ALWAYS_NULL - 210)) | (1 << (VtlParser.ALWAYS_ZERO - 210)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        } else if(la_===2) {
            this.state = 991;
            this.match(VtlParser.OPTIONAL);

        }
        this.state = 996;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
        if(la_===1) {
            this.state = 994;
            _la = this._input.LA(1);
            if(!(_la===VtlParser.DATASET || _la===VtlParser.RULE || _la===VtlParser.RULE_PRIORITY)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        } else if(la_===2) {
            this.state = 995;
            this.match(VtlParser.OPTIONAL);

        }
        this.state = 1000;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case VtlParser.ALL:
        case VtlParser.COMPUTED:
        	this.state = 998;
        	_la = this._input.LA(1);
        	if(!(_la===VtlParser.ALL || _la===VtlParser.COMPUTED)) {
        	this._errHandler.recoverInline(this);
        	}
        	else {
        		this._errHandler.reportMatch(this);
        	    this.consume();
        	}
        	break;
        case VtlParser.OPTIONAL:
        	this.state = 999;
        	this.match(VtlParser.OPTIONAL);
        	break;
        case VtlParser.T__13:
        	break;
        default:
        	break;
        }
        this.state = 1002;
        this.match(VtlParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DatasetClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_datasetClause;
    return this;
}

DatasetClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DatasetClauseContext.prototype.constructor = DatasetClauseContext;

DatasetClauseContext.prototype.RENAME = function() {
    return this.getToken(VtlParser.RENAME, 0);
};

DatasetClauseContext.prototype.renameClause = function() {
    return this.getTypedRuleContext(RenameClauseContext,0);
};

DatasetClauseContext.prototype.aggrClause = function() {
    return this.getTypedRuleContext(AggrClauseContext,0);
};

DatasetClauseContext.prototype.filterClause = function() {
    return this.getTypedRuleContext(FilterClauseContext,0);
};

DatasetClauseContext.prototype.calcClause = function() {
    return this.getTypedRuleContext(CalcClauseContext,0);
};

DatasetClauseContext.prototype.keepClause = function() {
    return this.getTypedRuleContext(KeepClauseContext,0);
};

DatasetClauseContext.prototype.dropClause = function() {
    return this.getTypedRuleContext(DropClauseContext,0);
};

DatasetClauseContext.prototype.pivotExpr = function() {
    return this.getTypedRuleContext(PivotExprContext,0);
};

DatasetClauseContext.prototype.unpivotExpr = function() {
    return this.getTypedRuleContext(UnpivotExprContext,0);
};

DatasetClauseContext.prototype.subspaceExpr = function() {
    return this.getTypedRuleContext(SubspaceExprContext,0);
};

DatasetClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterDatasetClause(this);
	}
};

DatasetClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitDatasetClause(this);
	}
};




VtlParser.DatasetClauseContext = DatasetClauseContext;

VtlParser.prototype.datasetClause = function() {

    var localctx = new DatasetClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, VtlParser.RULE_datasetClause);
    try {
        this.state = 1014;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.RENAME:
            this.enterOuterAlt(localctx, 1);
            this.state = 1004;
            this.match(VtlParser.RENAME);
            this.state = 1005;
            this.renameClause();
            break;
        case VtlParser.AGGREGATE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1006;
            this.aggrClause();
            break;
        case VtlParser.FILTER:
            this.enterOuterAlt(localctx, 3);
            this.state = 1007;
            this.filterClause();
            break;
        case VtlParser.CALC:
            this.enterOuterAlt(localctx, 4);
            this.state = 1008;
            this.calcClause();
            break;
        case VtlParser.KEEP:
            this.enterOuterAlt(localctx, 5);
            this.state = 1009;
            this.keepClause();
            break;
        case VtlParser.DROP:
            this.enterOuterAlt(localctx, 6);
            this.state = 1010;
            this.dropClause();
            break;
        case VtlParser.PIVOT:
            this.enterOuterAlt(localctx, 7);
            this.state = 1011;
            this.pivotExpr();
            break;
        case VtlParser.UNPIVOT:
            this.enterOuterAlt(localctx, 8);
            this.state = 1012;
            this.unpivotExpr();
            break;
        case VtlParser.SUBSPACE:
            this.enterOuterAlt(localctx, 9);
            this.state = 1013;
            this.subspaceExpr();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnFunctionClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_anFunctionClause;
    return this;
}

AnFunctionClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnFunctionClauseContext.prototype.constructor = AnFunctionClauseContext;

AnFunctionClauseContext.prototype.OVER = function() {
    return this.getToken(VtlParser.OVER, 0);
};

AnFunctionClauseContext.prototype.aggrFunctionName = function() {
    return this.getTypedRuleContext(AggrFunctionNameContext,0);
};

AnFunctionClauseContext.prototype.anFunction = function() {
    return this.getTypedRuleContext(AnFunctionContext,0);
};

AnFunctionClauseContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

AnFunctionClauseContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


AnFunctionClauseContext.prototype.partitionByClause = function() {
    return this.getTypedRuleContext(PartitionByClauseContext,0);
};

AnFunctionClauseContext.prototype.orderByClause = function() {
    return this.getTypedRuleContext(OrderByClauseContext,0);
};

AnFunctionClauseContext.prototype.windowingClause = function() {
    return this.getTypedRuleContext(WindowingClauseContext,0);
};

AnFunctionClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterAnFunctionClause(this);
	}
};

AnFunctionClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitAnFunctionClause(this);
	}
};




VtlParser.AnFunctionClauseContext = AnFunctionClauseContext;

VtlParser.prototype.anFunctionClause = function() {

    var localctx = new AnFunctionClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, VtlParser.RULE_anFunctionClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1018;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case VtlParser.MIN:
        case VtlParser.MAX:
        case VtlParser.SUM:
        case VtlParser.AVG:
        case VtlParser.MEDIAN:
        case VtlParser.COUNT:
        case VtlParser.STDDEV_POP:
        case VtlParser.STDDEV_SAMP:
        case VtlParser.VAR_POP:
        case VtlParser.VAR_SAMP:
        	this.state = 1016;
        	this.aggrFunctionName();
        	break;
        case VtlParser.RANK:
        case VtlParser.FIRST_VALUE:
        case VtlParser.LAST_VALUE:
        case VtlParser.LAG:
        case VtlParser.LEAD:
        case VtlParser.RATIO_TO_REPORT:
        	this.state = 1017;
        	this.anFunction();
        	break;
        case VtlParser.T__12:
        	break;
        default:
        	break;
        }
        this.state = 1020;
        this.match(VtlParser.T__12);
        this.state = 1022;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VtlParser.T__2) | (1 << VtlParser.T__3) | (1 << VtlParser.T__12) | (1 << VtlParser.EVAL) | (1 << VtlParser.IF) | (1 << VtlParser.CURRENT_DATE))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (VtlParser.NOT - 38)) | (1 << (VtlParser.BETWEEN - 38)) | (1 << (VtlParser.ISNULL - 38)) | (1 << (VtlParser.UNION - 38)) | (1 << (VtlParser.SYMDIFF - 38)) | (1 << (VtlParser.INTERSECT - 38)) | (1 << (VtlParser.CHECK - 38)) | (1 << (VtlParser.EXISTS_IN - 38)) | (1 << (VtlParser.RANK - 38)) | (1 << (VtlParser.MIN - 38)) | (1 << (VtlParser.MAX - 38)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (VtlParser.ABS - 72)) | (1 << (VtlParser.LN - 72)) | (1 << (VtlParser.LOG - 72)) | (1 << (VtlParser.TRUNC - 72)) | (1 << (VtlParser.ROUND - 72)) | (1 << (VtlParser.POWER - 72)) | (1 << (VtlParser.MOD - 72)) | (1 << (VtlParser.LEN - 72)) | (1 << (VtlParser.TRIM - 72)) | (1 << (VtlParser.UCASE - 72)) | (1 << (VtlParser.LCASE - 72)) | (1 << (VtlParser.SUBSTR - 72)) | (1 << (VtlParser.SUM - 72)) | (1 << (VtlParser.AVG - 72)) | (1 << (VtlParser.MEDIAN - 72)) | (1 << (VtlParser.COUNT - 72)) | (1 << (VtlParser.EXP - 72)) | (1 << (VtlParser.CHARSET_MATCH - 72)) | (1 << (VtlParser.NVL - 72)) | (1 << (VtlParser.HIERARCHY - 72)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (VtlParser.DEFINE - 110)) | (1 << (VtlParser.LTRIM - 110)) | (1 << (VtlParser.RTRIM - 110)) | (1 << (VtlParser.INSTR - 110)) | (1 << (VtlParser.REPLACE - 110)) | (1 << (VtlParser.CEIL - 110)) | (1 << (VtlParser.FLOOR - 110)) | (1 << (VtlParser.SQRT - 110)) | (1 << (VtlParser.SETDIFF - 110)) | (1 << (VtlParser.STDDEV_POP - 110)) | (1 << (VtlParser.STDDEV_SAMP - 110)) | (1 << (VtlParser.VAR_POP - 110)) | (1 << (VtlParser.VAR_SAMP - 110)) | (1 << (VtlParser.FIRST_VALUE - 110)) | (1 << (VtlParser.LAST_VALUE - 110)) | (1 << (VtlParser.LAG - 110)) | (1 << (VtlParser.LEAD - 110)) | (1 << (VtlParser.RATIO_TO_REPORT - 110)))) !== 0) || ((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (VtlParser.FILL_TIME_SERIES - 148)) | (1 << (VtlParser.FLOW_TO_STOCK - 148)) | (1 << (VtlParser.STOCK_TO_FLOW - 148)) | (1 << (VtlParser.TIMESHIFT - 148)) | (1 << (VtlParser.INNER_JOIN - 148)))) !== 0) || ((((_la - 180)) & ~0x1f) == 0 && ((1 << (_la - 180)) & ((1 << (VtlParser.LEFT_JOIN - 180)) | (1 << (VtlParser.CROSS_JOIN - 180)) | (1 << (VtlParser.FULL_JOIN - 180)) | (1 << (VtlParser.PERIOD_INDICATOR - 180)) | (1 << (VtlParser.TIME_AGG - 180)) | (1 << (VtlParser.CAST - 180)) | (1 << (VtlParser.CHECK_DATAPOINT - 180)) | (1 << (VtlParser.CHECK_HIERARCHY - 180)))) !== 0) || ((((_la - 226)) & ~0x1f) == 0 && ((1 << (_la - 226)) & ((1 << (VtlParser.INTEGER_CONSTANT - 226)) | (1 << (VtlParser.FLOAT_CONSTANT - 226)) | (1 << (VtlParser.BOOLEAN_CONSTANT - 226)) | (1 << (VtlParser.NULL_CONSTANT - 226)) | (1 << (VtlParser.STRING_CONSTANT - 226)) | (1 << (VtlParser.IDENTIFIER - 226)))) !== 0)) {
            this.state = 1021;
            this.expr(0);
        }

        this.state = 1028;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.CARTESIAN_PER) {
            this.state = 1024;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 1025;
            this.expr(0);
            this.state = 1030;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1031;
        this.match(VtlParser.OVER);
        this.state = 1032;
        this.match(VtlParser.T__12);
        this.state = 1034;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.PARTITION) {
            this.state = 1033;
            this.partitionByClause();
        }

        this.state = 1037;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.ORDER) {
            this.state = 1036;
            this.orderByClause();
        }

        this.state = 1040;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.DATA || _la===VtlParser.RANGE) {
            this.state = 1039;
            this.windowingClause();
        }

        this.state = 1042;
        this.match(VtlParser.T__13);
        this.state = 1043;
        this.match(VtlParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PartitionByClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_partitionByClause;
    return this;
}

PartitionByClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionByClauseContext.prototype.constructor = PartitionByClauseContext;

PartitionByClauseContext.prototype.PARTITION = function() {
    return this.getToken(VtlParser.PARTITION, 0);
};

PartitionByClauseContext.prototype.BY = function() {
    return this.getToken(VtlParser.BY, 0);
};

PartitionByClauseContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.IDENTIFIER);
    } else {
        return this.getToken(VtlParser.IDENTIFIER, i);
    }
};


PartitionByClauseContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


PartitionByClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterPartitionByClause(this);
	}
};

PartitionByClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitPartitionByClause(this);
	}
};




VtlParser.PartitionByClauseContext = PartitionByClauseContext;

VtlParser.prototype.partitionByClause = function() {

    var localctx = new PartitionByClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, VtlParser.RULE_partitionByClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1045;
        this.match(VtlParser.PARTITION);
        this.state = 1046;
        this.match(VtlParser.BY);
        this.state = 1047;
        this.match(VtlParser.IDENTIFIER);
        this.state = 1052;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.CARTESIAN_PER) {
            this.state = 1048;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 1049;
            this.match(VtlParser.IDENTIFIER);
            this.state = 1054;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OrderByClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_orderByClause;
    return this;
}

OrderByClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderByClauseContext.prototype.constructor = OrderByClauseContext;

OrderByClauseContext.prototype.ORDER = function() {
    return this.getToken(VtlParser.ORDER, 0);
};

OrderByClauseContext.prototype.BY = function() {
    return this.getToken(VtlParser.BY, 0);
};

OrderByClauseContext.prototype.componentID = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ComponentIDContext);
    } else {
        return this.getTypedRuleContext(ComponentIDContext,i);
    }
};

OrderByClauseContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


OrderByClauseContext.prototype.ASC = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.ASC);
    } else {
        return this.getToken(VtlParser.ASC, i);
    }
};


OrderByClauseContext.prototype.DESC = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.DESC);
    } else {
        return this.getToken(VtlParser.DESC, i);
    }
};


OrderByClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterOrderByClause(this);
	}
};

OrderByClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitOrderByClause(this);
	}
};




VtlParser.OrderByClauseContext = OrderByClauseContext;

VtlParser.prototype.orderByClause = function() {

    var localctx = new OrderByClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, VtlParser.RULE_orderByClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1055;
        this.match(VtlParser.ORDER);
        this.state = 1056;
        this.match(VtlParser.BY);
        this.state = 1057;
        this.componentID();
        this.state = 1059;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.ASC || _la===VtlParser.DESC) {
            this.state = 1058;
            _la = this._input.LA(1);
            if(!(_la===VtlParser.ASC || _la===VtlParser.DESC)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 1068;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.CARTESIAN_PER) {
            this.state = 1061;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 1062;
            this.componentID();
            this.state = 1064;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.ASC || _la===VtlParser.DESC) {
                this.state = 1063;
                _la = this._input.LA(1);
                if(!(_la===VtlParser.ASC || _la===VtlParser.DESC)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 1070;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WindowingClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_windowingClause;
    return this;
}

WindowingClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowingClauseContext.prototype.constructor = WindowingClauseContext;

WindowingClauseContext.prototype.BETWEEN = function() {
    return this.getToken(VtlParser.BETWEEN, 0);
};

WindowingClauseContext.prototype.limitClauseItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LimitClauseItemContext);
    } else {
        return this.getTypedRuleContext(LimitClauseItemContext,i);
    }
};

WindowingClauseContext.prototype.AND = function() {
    return this.getToken(VtlParser.AND, 0);
};

WindowingClauseContext.prototype.RANGE = function() {
    return this.getToken(VtlParser.RANGE, 0);
};

WindowingClauseContext.prototype.DATA = function() {
    return this.getToken(VtlParser.DATA, 0);
};

WindowingClauseContext.prototype.POINTS = function() {
    return this.getToken(VtlParser.POINTS, 0);
};

WindowingClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterWindowingClause(this);
	}
};

WindowingClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitWindowingClause(this);
	}
};




VtlParser.WindowingClauseContext = WindowingClauseContext;

VtlParser.prototype.windowingClause = function() {

    var localctx = new WindowingClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, VtlParser.RULE_windowingClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1074;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.DATA:
            this.state = 1071;
            this.match(VtlParser.DATA);
            this.state = 1072;
            this.match(VtlParser.POINTS);
            break;
        case VtlParser.RANGE:
            this.state = 1073;
            this.match(VtlParser.RANGE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1076;
        this.match(VtlParser.BETWEEN);
        this.state = 1077;
        this.limitClauseItem();
        this.state = 1078;
        this.match(VtlParser.AND);
        this.state = 1079;
        this.limitClauseItem();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LimitClauseItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_limitClauseItem;
    return this;
}

LimitClauseItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LimitClauseItemContext.prototype.constructor = LimitClauseItemContext;

LimitClauseItemContext.prototype.INTEGER_CONSTANT = function() {
    return this.getToken(VtlParser.INTEGER_CONSTANT, 0);
};

LimitClauseItemContext.prototype.PRECEDING = function() {
    return this.getToken(VtlParser.PRECEDING, 0);
};

LimitClauseItemContext.prototype.FOLLOWING = function() {
    return this.getToken(VtlParser.FOLLOWING, 0);
};

LimitClauseItemContext.prototype.CURRENT = function() {
    return this.getToken(VtlParser.CURRENT, 0);
};

LimitClauseItemContext.prototype.DATA = function() {
    return this.getToken(VtlParser.DATA, 0);
};

LimitClauseItemContext.prototype.POINT = function() {
    return this.getToken(VtlParser.POINT, 0);
};

LimitClauseItemContext.prototype.UNBOUNDED = function() {
    return this.getToken(VtlParser.UNBOUNDED, 0);
};

LimitClauseItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterLimitClauseItem(this);
	}
};

LimitClauseItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitLimitClauseItem(this);
	}
};




VtlParser.LimitClauseItemContext = LimitClauseItemContext;

VtlParser.prototype.limitClauseItem = function() {

    var localctx = new LimitClauseItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, VtlParser.RULE_limitClauseItem);
    try {
        this.state = 1092;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1081;
            this.match(VtlParser.INTEGER_CONSTANT);
            this.state = 1082;
            this.match(VtlParser.PRECEDING);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1083;
            this.match(VtlParser.INTEGER_CONSTANT);
            this.state = 1084;
            this.match(VtlParser.FOLLOWING);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1085;
            this.match(VtlParser.CURRENT);
            this.state = 1086;
            this.match(VtlParser.DATA);
            this.state = 1087;
            this.match(VtlParser.POINT);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1088;
            this.match(VtlParser.UNBOUNDED);
            this.state = 1089;
            this.match(VtlParser.PRECEDING);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1090;
            this.match(VtlParser.UNBOUNDED);
            this.state = 1091;
            this.match(VtlParser.FOLLOWING);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_joinExpr;
    return this;
}

JoinExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinExprContext.prototype.constructor = JoinExprContext;

JoinExprContext.prototype.joinKeyword = function() {
    return this.getTypedRuleContext(JoinKeywordContext,0);
};

JoinExprContext.prototype.joinClause = function() {
    return this.getTypedRuleContext(JoinClauseContext,0);
};

JoinExprContext.prototype.joinBody = function() {
    return this.getTypedRuleContext(JoinBodyContext,0);
};

JoinExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterJoinExpr(this);
	}
};

JoinExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitJoinExpr(this);
	}
};




VtlParser.JoinExprContext = JoinExprContext;

VtlParser.prototype.joinExpr = function() {

    var localctx = new JoinExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, VtlParser.RULE_joinExpr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1094;
        this.joinKeyword();
        this.state = 1095;
        this.match(VtlParser.T__12);
        this.state = 1096;
        this.joinClause();
        this.state = 1098;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
        if(la_===1) {
            this.state = 1097;
            this.joinBody();

        }
        this.state = 1100;
        this.match(VtlParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_joinClause;
    return this;
}

JoinClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinClauseContext.prototype.constructor = JoinClauseContext;

JoinClauseContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

JoinClauseContext.prototype.AS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.AS);
    } else {
        return this.getToken(VtlParser.AS, i);
    }
};


JoinClauseContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.IDENTIFIER);
    } else {
        return this.getToken(VtlParser.IDENTIFIER, i);
    }
};


JoinClauseContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


JoinClauseContext.prototype.USING = function() {
    return this.getToken(VtlParser.USING, 0);
};

JoinClauseContext.prototype.componentID = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ComponentIDContext);
    } else {
        return this.getTypedRuleContext(ComponentIDContext,i);
    }
};

JoinClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterJoinClause(this);
	}
};

JoinClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitJoinClause(this);
	}
};




VtlParser.JoinClauseContext = JoinClauseContext;

VtlParser.prototype.joinClause = function() {

    var localctx = new JoinClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, VtlParser.RULE_joinClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1102;
        this.expr(0);
        this.state = 1105;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.AS) {
            this.state = 1103;
            this.match(VtlParser.AS);
            this.state = 1104;
            this.match(VtlParser.IDENTIFIER);
        }

        this.state = 1115;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.CARTESIAN_PER) {
            this.state = 1107;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 1108;
            this.expr(0);
            this.state = 1111;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.AS) {
                this.state = 1109;
                this.match(VtlParser.AS);
                this.state = 1110;
                this.match(VtlParser.IDENTIFIER);
            }

            this.state = 1117;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1127;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.USING) {
            this.state = 1118;
            this.match(VtlParser.USING);
            this.state = 1119;
            this.componentID();
            this.state = 1124;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===VtlParser.CARTESIAN_PER) {
                this.state = 1120;
                this.match(VtlParser.CARTESIAN_PER);
                this.state = 1121;
                this.componentID();
                this.state = 1126;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_joinBody;
    return this;
}

JoinBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinBodyContext.prototype.constructor = JoinBodyContext;

JoinBodyContext.prototype.joinFilterClause = function() {
    return this.getTypedRuleContext(JoinFilterClauseContext,0);
};

JoinBodyContext.prototype.joinCalcClause = function() {
    return this.getTypedRuleContext(JoinCalcClauseContext,0);
};

JoinBodyContext.prototype.joinApplyClause = function() {
    return this.getTypedRuleContext(JoinApplyClauseContext,0);
};

JoinBodyContext.prototype.joinAggClause = function() {
    return this.getTypedRuleContext(JoinAggClauseContext,0);
};

JoinBodyContext.prototype.joinKeepClause = function() {
    return this.getTypedRuleContext(JoinKeepClauseContext,0);
};

JoinBodyContext.prototype.joinDropClause = function() {
    return this.getTypedRuleContext(JoinDropClauseContext,0);
};

JoinBodyContext.prototype.joinRenameClause = function() {
    return this.getTypedRuleContext(JoinRenameClauseContext,0);
};

JoinBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterJoinBody(this);
	}
};

JoinBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitJoinBody(this);
	}
};




VtlParser.JoinBodyContext = JoinBodyContext;

VtlParser.prototype.joinBody = function() {

    var localctx = new JoinBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, VtlParser.RULE_joinBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1130;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.FILTER || _la===VtlParser.IDENTIFIER) {
            this.state = 1129;
            this.joinFilterClause();
        }

        this.state = 1135;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
        if(la_===1) {
            this.state = 1132;
            this.joinCalcClause();

        } else if(la_===2) {
            this.state = 1133;
            this.joinApplyClause();

        } else if(la_===3) {
            this.state = 1134;
            this.joinAggClause();

        }
        this.state = 1139;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case VtlParser.KEEP:
        	this.state = 1137;
        	this.joinKeepClause();
        	break;
        case VtlParser.DROP:
        	this.state = 1138;
        	this.joinDropClause();
        	break;
        case VtlParser.T__13:
        case VtlParser.RENAME:
        	break;
        default:
        	break;
        }
        this.state = 1142;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.RENAME) {
            this.state = 1141;
            this.joinRenameClause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinCalcClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_joinCalcClause;
    return this;
}

JoinCalcClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinCalcClauseContext.prototype.constructor = JoinCalcClauseContext;

JoinCalcClauseContext.prototype.joinCalcClauseItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JoinCalcClauseItemContext);
    } else {
        return this.getTypedRuleContext(JoinCalcClauseItemContext,i);
    }
};

JoinCalcClauseContext.prototype.componentRole = function() {
    return this.getTypedRuleContext(ComponentRoleContext,0);
};

JoinCalcClauseContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


JoinCalcClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterJoinCalcClause(this);
	}
};

JoinCalcClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitJoinCalcClause(this);
	}
};




VtlParser.JoinCalcClauseContext = JoinCalcClauseContext;

VtlParser.prototype.joinCalcClause = function() {

    var localctx = new JoinCalcClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, VtlParser.RULE_joinCalcClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1145;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 90)) & ~0x1f) == 0 && ((1 << (_la - 90)) & ((1 << (VtlParser.DIMENSION - 90)) | (1 << (VtlParser.MEASURE - 90)) | (1 << (VtlParser.ATTRIBUTE - 90)) | (1 << (VtlParser.VIRAL - 90)))) !== 0) || _la===VtlParser.COMPONENT) {
            this.state = 1144;
            this.componentRole();
        }

        this.state = 1147;
        this.joinCalcClauseItem();
        this.state = 1152;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.CARTESIAN_PER) {
            this.state = 1148;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 1149;
            this.joinCalcClauseItem();
            this.state = 1154;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinCalcClauseItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_joinCalcClauseItem;
    return this;
}

JoinCalcClauseItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinCalcClauseItemContext.prototype.constructor = JoinCalcClauseItemContext;

JoinCalcClauseItemContext.prototype.CALC = function() {
    return this.getToken(VtlParser.CALC, 0);
};

JoinCalcClauseItemContext.prototype.joinCalcExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JoinCalcExprContext);
    } else {
        return this.getTypedRuleContext(JoinCalcExprContext,i);
    }
};

JoinCalcClauseItemContext.prototype.componentRole = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ComponentRoleContext);
    } else {
        return this.getTypedRuleContext(ComponentRoleContext,i);
    }
};

JoinCalcClauseItemContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


JoinCalcClauseItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterJoinCalcClauseItem(this);
	}
};

JoinCalcClauseItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitJoinCalcClauseItem(this);
	}
};




VtlParser.JoinCalcClauseItemContext = JoinCalcClauseItemContext;

VtlParser.prototype.joinCalcClauseItem = function() {

    var localctx = new JoinCalcClauseItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, VtlParser.RULE_joinCalcClauseItem);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1155;
        this.match(VtlParser.CALC);
        this.state = 1157;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 90)) & ~0x1f) == 0 && ((1 << (_la - 90)) & ((1 << (VtlParser.DIMENSION - 90)) | (1 << (VtlParser.MEASURE - 90)) | (1 << (VtlParser.ATTRIBUTE - 90)) | (1 << (VtlParser.VIRAL - 90)))) !== 0) || _la===VtlParser.COMPONENT) {
            this.state = 1156;
            this.componentRole();
        }

        this.state = 1159;
        this.joinCalcExpr();
        this.state = 1167;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,120,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1160;
                this.match(VtlParser.CARTESIAN_PER);
                this.state = 1162;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(((((_la - 90)) & ~0x1f) == 0 && ((1 << (_la - 90)) & ((1 << (VtlParser.DIMENSION - 90)) | (1 << (VtlParser.MEASURE - 90)) | (1 << (VtlParser.ATTRIBUTE - 90)) | (1 << (VtlParser.VIRAL - 90)))) !== 0) || _la===VtlParser.COMPONENT) {
                    this.state = 1161;
                    this.componentRole();
                }

                this.state = 1164;
                this.joinCalcExpr(); 
            }
            this.state = 1169;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,120,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinCalcExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_joinCalcExpr;
    return this;
}

JoinCalcExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinCalcExprContext.prototype.constructor = JoinCalcExprContext;

JoinCalcExprContext.prototype.componentID = function() {
    return this.getTypedRuleContext(ComponentIDContext,0);
};

JoinCalcExprContext.prototype.ASSIGN = function() {
    return this.getToken(VtlParser.ASSIGN, 0);
};

JoinCalcExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

JoinCalcExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterJoinCalcExpr(this);
	}
};

JoinCalcExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitJoinCalcExpr(this);
	}
};




VtlParser.JoinCalcExprContext = JoinCalcExprContext;

VtlParser.prototype.joinCalcExpr = function() {

    var localctx = new JoinCalcExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, VtlParser.RULE_joinCalcExpr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1170;
        this.componentID();
        this.state = 1171;
        this.match(VtlParser.ASSIGN);
        this.state = 1172;
        this.expr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinAggClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_joinAggClause;
    return this;
}

JoinAggClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinAggClauseContext.prototype.constructor = JoinAggClauseContext;

JoinAggClauseContext.prototype.AGGREGATE = function() {
    return this.getToken(VtlParser.AGGREGATE, 0);
};

JoinAggClauseContext.prototype.joinAggClauseItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JoinAggClauseItemContext);
    } else {
        return this.getTypedRuleContext(JoinAggClauseItemContext,i);
    }
};

JoinAggClauseContext.prototype.componentRole = function() {
    return this.getTypedRuleContext(ComponentRoleContext,0);
};

JoinAggClauseContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


JoinAggClauseContext.prototype.groupingClause = function() {
    return this.getTypedRuleContext(GroupingClauseContext,0);
};

JoinAggClauseContext.prototype.havingClause = function() {
    return this.getTypedRuleContext(HavingClauseContext,0);
};

JoinAggClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterJoinAggClause(this);
	}
};

JoinAggClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitJoinAggClause(this);
	}
};




VtlParser.JoinAggClauseContext = JoinAggClauseContext;

VtlParser.prototype.joinAggClause = function() {

    var localctx = new JoinAggClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, VtlParser.RULE_joinAggClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1175;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 90)) & ~0x1f) == 0 && ((1 << (_la - 90)) & ((1 << (VtlParser.DIMENSION - 90)) | (1 << (VtlParser.MEASURE - 90)) | (1 << (VtlParser.ATTRIBUTE - 90)) | (1 << (VtlParser.VIRAL - 90)))) !== 0) || _la===VtlParser.COMPONENT) {
            this.state = 1174;
            this.componentRole();
        }

        this.state = 1177;
        this.match(VtlParser.AGGREGATE);
        this.state = 1178;
        this.joinAggClauseItem();
        this.state = 1183;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.CARTESIAN_PER) {
            this.state = 1179;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 1180;
            this.joinAggClauseItem();
            this.state = 1185;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1187;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.GROUP) {
            this.state = 1186;
            this.groupingClause();
        }

        this.state = 1190;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.HAVING) {
            this.state = 1189;
            this.havingClause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinAggClauseItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_joinAggClauseItem;
    return this;
}

JoinAggClauseItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinAggClauseItemContext.prototype.constructor = JoinAggClauseItemContext;

JoinAggClauseItemContext.prototype.joinAggExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JoinAggExprContext);
    } else {
        return this.getTypedRuleContext(JoinAggExprContext,i);
    }
};

JoinAggClauseItemContext.prototype.componentRole = function() {
    return this.getTypedRuleContext(ComponentRoleContext,0);
};

JoinAggClauseItemContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


JoinAggClauseItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterJoinAggClauseItem(this);
	}
};

JoinAggClauseItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitJoinAggClauseItem(this);
	}
};




VtlParser.JoinAggClauseItemContext = JoinAggClauseItemContext;

VtlParser.prototype.joinAggClauseItem = function() {

    var localctx = new JoinAggClauseItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, VtlParser.RULE_joinAggClauseItem);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1193;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 90)) & ~0x1f) == 0 && ((1 << (_la - 90)) & ((1 << (VtlParser.DIMENSION - 90)) | (1 << (VtlParser.MEASURE - 90)) | (1 << (VtlParser.ATTRIBUTE - 90)) | (1 << (VtlParser.VIRAL - 90)))) !== 0) || _la===VtlParser.COMPONENT) {
            this.state = 1192;
            this.componentRole();
        }

        this.state = 1195;
        this.joinAggExpr();
        this.state = 1200;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,126,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1196;
                this.match(VtlParser.CARTESIAN_PER);
                this.state = 1197;
                this.joinAggExpr(); 
            }
            this.state = 1202;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,126,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinAggExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_joinAggExpr;
    return this;
}

JoinAggExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinAggExprContext.prototype.constructor = JoinAggExprContext;

JoinAggExprContext.prototype.componentID = function() {
    return this.getTypedRuleContext(ComponentIDContext,0);
};

JoinAggExprContext.prototype.ASSIGN = function() {
    return this.getToken(VtlParser.ASSIGN, 0);
};

JoinAggExprContext.prototype.aggrFunction = function() {
    return this.getTypedRuleContext(AggrFunctionContext,0);
};

JoinAggExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterJoinAggExpr(this);
	}
};

JoinAggExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitJoinAggExpr(this);
	}
};




VtlParser.JoinAggExprContext = JoinAggExprContext;

VtlParser.prototype.joinAggExpr = function() {

    var localctx = new JoinAggExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, VtlParser.RULE_joinAggExpr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1203;
        this.componentID();
        this.state = 1204;
        this.match(VtlParser.ASSIGN);
        this.state = 1205;
        this.aggrFunction();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinKeepClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_joinKeepClause;
    return this;
}

JoinKeepClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinKeepClauseContext.prototype.constructor = JoinKeepClauseContext;

JoinKeepClauseContext.prototype.KEEP = function() {
    return this.getToken(VtlParser.KEEP, 0);
};

JoinKeepClauseContext.prototype.keepClauseItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(KeepClauseItemContext);
    } else {
        return this.getTypedRuleContext(KeepClauseItemContext,i);
    }
};

JoinKeepClauseContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


JoinKeepClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterJoinKeepClause(this);
	}
};

JoinKeepClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitJoinKeepClause(this);
	}
};




VtlParser.JoinKeepClauseContext = JoinKeepClauseContext;

VtlParser.prototype.joinKeepClause = function() {

    var localctx = new JoinKeepClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, VtlParser.RULE_joinKeepClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1207;
        this.match(VtlParser.KEEP);
        this.state = 1208;
        this.keepClauseItem();
        this.state = 1213;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.CARTESIAN_PER) {
            this.state = 1209;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 1210;
            this.keepClauseItem();
            this.state = 1215;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinDropClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_joinDropClause;
    return this;
}

JoinDropClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinDropClauseContext.prototype.constructor = JoinDropClauseContext;

JoinDropClauseContext.prototype.DROP = function() {
    return this.getToken(VtlParser.DROP, 0);
};

JoinDropClauseContext.prototype.dropClauseItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DropClauseItemContext);
    } else {
        return this.getTypedRuleContext(DropClauseItemContext,i);
    }
};

JoinDropClauseContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


JoinDropClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterJoinDropClause(this);
	}
};

JoinDropClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitJoinDropClause(this);
	}
};




VtlParser.JoinDropClauseContext = JoinDropClauseContext;

VtlParser.prototype.joinDropClause = function() {

    var localctx = new JoinDropClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, VtlParser.RULE_joinDropClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1216;
        this.match(VtlParser.DROP);
        this.state = 1217;
        this.dropClauseItem();
        this.state = 1222;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.CARTESIAN_PER) {
            this.state = 1218;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 1219;
            this.dropClauseItem();
            this.state = 1224;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinFilterClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_joinFilterClause;
    return this;
}

JoinFilterClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinFilterClauseContext.prototype.constructor = JoinFilterClauseContext;

JoinFilterClauseContext.prototype.FILTER = function() {
    return this.getToken(VtlParser.FILTER, 0);
};

JoinFilterClauseContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

JoinFilterClauseContext.prototype.rulesetID = function() {
    return this.getTypedRuleContext(RulesetIDContext,0);
};

JoinFilterClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterJoinFilterClause(this);
	}
};

JoinFilterClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitJoinFilterClause(this);
	}
};




VtlParser.JoinFilterClauseContext = JoinFilterClauseContext;

VtlParser.prototype.joinFilterClause = function() {

    var localctx = new JoinFilterClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, VtlParser.RULE_joinFilterClause);
    try {
        this.state = 1228;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.FILTER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1225;
            this.match(VtlParser.FILTER);
            this.state = 1226;
            this.expr(0);
            break;
        case VtlParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 1227;
            this.rulesetID();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinRenameClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_joinRenameClause;
    return this;
}

JoinRenameClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinRenameClauseContext.prototype.constructor = JoinRenameClauseContext;

JoinRenameClauseContext.prototype.RENAME = function() {
    return this.getToken(VtlParser.RENAME, 0);
};

JoinRenameClauseContext.prototype.varID = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VarIDContext);
    } else {
        return this.getTypedRuleContext(VarIDContext,i);
    }
};

JoinRenameClauseContext.prototype.TO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.TO);
    } else {
        return this.getToken(VtlParser.TO, i);
    }
};


JoinRenameClauseContext.prototype.componentID = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ComponentIDContext);
    } else {
        return this.getTypedRuleContext(ComponentIDContext,i);
    }
};

JoinRenameClauseContext.prototype.MEMBERSHIP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.MEMBERSHIP);
    } else {
        return this.getToken(VtlParser.MEMBERSHIP, i);
    }
};


JoinRenameClauseContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


JoinRenameClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterJoinRenameClause(this);
	}
};

JoinRenameClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitJoinRenameClause(this);
	}
};




VtlParser.JoinRenameClauseContext = JoinRenameClauseContext;

VtlParser.prototype.joinRenameClause = function() {

    var localctx = new JoinRenameClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, VtlParser.RULE_joinRenameClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1230;
        this.match(VtlParser.RENAME);
        this.state = 1234;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,130,this._ctx);
        if(la_===1) {
            this.state = 1231;
            this.componentID();
            this.state = 1232;
            this.match(VtlParser.MEMBERSHIP);

        }
        this.state = 1236;
        this.varID();
        this.state = 1237;
        this.match(VtlParser.TO);
        this.state = 1241;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
        if(la_===1) {
            this.state = 1238;
            this.componentID();
            this.state = 1239;
            this.match(VtlParser.MEMBERSHIP);

        }
        this.state = 1243;
        this.varID();
        this.state = 1261;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,134,this._ctx)
        while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1+1) {
                this.state = 1244;
                this.match(VtlParser.CARTESIAN_PER);
                this.state = 1248;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
                if(la_===1) {
                    this.state = 1245;
                    this.componentID();
                    this.state = 1246;
                    this.match(VtlParser.MEMBERSHIP);

                }
                this.state = 1250;
                this.varID();
                this.state = 1251;
                this.match(VtlParser.TO);
                this.state = 1255;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,133,this._ctx);
                if(la_===1) {
                    this.state = 1252;
                    this.componentID();
                    this.state = 1253;
                    this.match(VtlParser.MEMBERSHIP);

                }
                this.state = 1257;
                this.varID(); 
            }
            this.state = 1263;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,134,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinApplyClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_joinApplyClause;
    return this;
}

JoinApplyClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinApplyClauseContext.prototype.constructor = JoinApplyClauseContext;

JoinApplyClauseContext.prototype.APPLY = function() {
    return this.getToken(VtlParser.APPLY, 0);
};

JoinApplyClauseContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

JoinApplyClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterJoinApplyClause(this);
	}
};

JoinApplyClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitJoinApplyClause(this);
	}
};




VtlParser.JoinApplyClauseContext = JoinApplyClauseContext;

VtlParser.prototype.joinApplyClause = function() {

    var localctx = new JoinApplyClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, VtlParser.RULE_joinApplyClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1264;
        this.match(VtlParser.APPLY);
        this.state = 1265;
        this.expr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_anFunction;
    return this;
}

AnFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnFunctionContext.prototype.constructor = AnFunctionContext;

AnFunctionContext.prototype.FIRST_VALUE = function() {
    return this.getToken(VtlParser.FIRST_VALUE, 0);
};

AnFunctionContext.prototype.LAG = function() {
    return this.getToken(VtlParser.LAG, 0);
};

AnFunctionContext.prototype.LAST_VALUE = function() {
    return this.getToken(VtlParser.LAST_VALUE, 0);
};

AnFunctionContext.prototype.RANK = function() {
    return this.getToken(VtlParser.RANK, 0);
};

AnFunctionContext.prototype.RATIO_TO_REPORT = function() {
    return this.getToken(VtlParser.RATIO_TO_REPORT, 0);
};

AnFunctionContext.prototype.LEAD = function() {
    return this.getToken(VtlParser.LEAD, 0);
};

AnFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterAnFunction(this);
	}
};

AnFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitAnFunction(this);
	}
};




VtlParser.AnFunctionContext = AnFunctionContext;

VtlParser.prototype.anFunction = function() {

    var localctx = new AnFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, VtlParser.RULE_anFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1267;
        _la = this._input.LA(1);
        if(!(_la===VtlParser.RANK || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (VtlParser.FIRST_VALUE - 134)) | (1 << (VtlParser.LAST_VALUE - 134)) | (1 << (VtlParser.LAG - 134)) | (1 << (VtlParser.LEAD - 134)) | (1 << (VtlParser.RATIO_TO_REPORT - 134)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AggregateClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_aggregateClause;
    return this;
}

AggregateClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AggregateClauseContext.prototype.constructor = AggregateClauseContext;

AggregateClauseContext.prototype.aggrFunctionClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AggrFunctionClauseContext);
    } else {
        return this.getTypedRuleContext(AggrFunctionClauseContext,i);
    }
};

AggregateClauseContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


AggregateClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterAggregateClause(this);
	}
};

AggregateClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitAggregateClause(this);
	}
};




VtlParser.AggregateClauseContext = AggregateClauseContext;

VtlParser.prototype.aggregateClause = function() {

    var localctx = new AggregateClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, VtlParser.RULE_aggregateClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1269;
        this.aggrFunctionClause();
        this.state = 1274;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.CARTESIAN_PER) {
            this.state = 1270;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 1271;
            this.aggrFunctionClause();
            this.state = 1276;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AggrFunctionClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_aggrFunctionClause;
    return this;
}

AggrFunctionClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AggrFunctionClauseContext.prototype.constructor = AggrFunctionClauseContext;

AggrFunctionClauseContext.prototype.componentID = function() {
    return this.getTypedRuleContext(ComponentIDContext,0);
};

AggrFunctionClauseContext.prototype.ASSIGN = function() {
    return this.getToken(VtlParser.ASSIGN, 0);
};

AggrFunctionClauseContext.prototype.aggrFunction = function() {
    return this.getTypedRuleContext(AggrFunctionContext,0);
};

AggrFunctionClauseContext.prototype.componentRole = function() {
    return this.getTypedRuleContext(ComponentRoleContext,0);
};

AggrFunctionClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterAggrFunctionClause(this);
	}
};

AggrFunctionClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitAggrFunctionClause(this);
	}
};




VtlParser.AggrFunctionClauseContext = AggrFunctionClauseContext;

VtlParser.prototype.aggrFunctionClause = function() {

    var localctx = new AggrFunctionClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, VtlParser.RULE_aggrFunctionClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1278;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 90)) & ~0x1f) == 0 && ((1 << (_la - 90)) & ((1 << (VtlParser.DIMENSION - 90)) | (1 << (VtlParser.MEASURE - 90)) | (1 << (VtlParser.ATTRIBUTE - 90)) | (1 << (VtlParser.VIRAL - 90)))) !== 0) || _la===VtlParser.COMPONENT) {
            this.state = 1277;
            this.componentRole();
        }

        this.state = 1280;
        this.componentID();
        this.state = 1281;
        this.match(VtlParser.ASSIGN);
        this.state = 1282;
        this.aggrFunction();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GetFiltersClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_getFiltersClause;
    return this;
}

GetFiltersClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GetFiltersClauseContext.prototype.constructor = GetFiltersClauseContext;

GetFiltersClauseContext.prototype.getFilterClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GetFilterClauseContext);
    } else {
        return this.getTypedRuleContext(GetFilterClauseContext,i);
    }
};

GetFiltersClauseContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


GetFiltersClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterGetFiltersClause(this);
	}
};

GetFiltersClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitGetFiltersClause(this);
	}
};




VtlParser.GetFiltersClauseContext = GetFiltersClauseContext;

VtlParser.prototype.getFiltersClause = function() {

    var localctx = new GetFiltersClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, VtlParser.RULE_getFiltersClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1284;
        this.getFilterClause();
        this.state = 1289;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.CARTESIAN_PER) {
            this.state = 1285;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 1286;
            this.getFilterClause();
            this.state = 1291;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GetFilterClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_getFilterClause;
    return this;
}

GetFilterClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GetFilterClauseContext.prototype.constructor = GetFilterClauseContext;

GetFilterClauseContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

GetFilterClauseContext.prototype.FILTER = function() {
    return this.getToken(VtlParser.FILTER, 0);
};

GetFilterClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterGetFilterClause(this);
	}
};

GetFilterClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitGetFilterClause(this);
	}
};




VtlParser.GetFilterClauseContext = GetFilterClauseContext;

VtlParser.prototype.getFilterClause = function() {

    var localctx = new GetFilterClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, VtlParser.RULE_getFilterClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1293;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.FILTER) {
            this.state = 1292;
            this.match(VtlParser.FILTER);
        }

        this.state = 1295;
        this.expr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AggrClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_aggrClause;
    return this;
}

AggrClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AggrClauseContext.prototype.constructor = AggrClauseContext;

AggrClauseContext.prototype.AGGREGATE = function() {
    return this.getToken(VtlParser.AGGREGATE, 0);
};

AggrClauseContext.prototype.aggregateClause = function() {
    return this.getTypedRuleContext(AggregateClauseContext,0);
};

AggrClauseContext.prototype.groupingClause = function() {
    return this.getTypedRuleContext(GroupingClauseContext,0);
};

AggrClauseContext.prototype.havingClause = function() {
    return this.getTypedRuleContext(HavingClauseContext,0);
};

AggrClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterAggrClause(this);
	}
};

AggrClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitAggrClause(this);
	}
};




VtlParser.AggrClauseContext = AggrClauseContext;

VtlParser.prototype.aggrClause = function() {

    var localctx = new AggrClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, VtlParser.RULE_aggrClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1297;
        this.match(VtlParser.AGGREGATE);
        this.state = 1298;
        this.aggregateClause();
        this.state = 1300;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.GROUP) {
            this.state = 1299;
            this.groupingClause();
        }

        this.state = 1303;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.HAVING) {
            this.state = 1302;
            this.havingClause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FilterClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_filterClause;
    return this;
}

FilterClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FilterClauseContext.prototype.constructor = FilterClauseContext;

FilterClauseContext.prototype.FILTER = function() {
    return this.getToken(VtlParser.FILTER, 0);
};

FilterClauseContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

FilterClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterFilterClause(this);
	}
};

FilterClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitFilterClause(this);
	}
};




VtlParser.FilterClauseContext = FilterClauseContext;

VtlParser.prototype.filterClause = function() {

    var localctx = new FilterClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, VtlParser.RULE_filterClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1305;
        this.match(VtlParser.FILTER);
        this.state = 1306;
        this.expr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RenameClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_renameClause;
    return this;
}

RenameClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RenameClauseContext.prototype.constructor = RenameClauseContext;

RenameClauseContext.prototype.varID = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VarIDContext);
    } else {
        return this.getTypedRuleContext(VarIDContext,i);
    }
};

RenameClauseContext.prototype.TO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.TO);
    } else {
        return this.getToken(VtlParser.TO, i);
    }
};


RenameClauseContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


RenameClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterRenameClause(this);
	}
};

RenameClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitRenameClause(this);
	}
};




VtlParser.RenameClauseContext = RenameClauseContext;

VtlParser.prototype.renameClause = function() {

    var localctx = new RenameClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, VtlParser.RULE_renameClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1308;
        this.varID();
        this.state = 1309;
        this.match(VtlParser.TO);
        this.state = 1310;
        this.varID();
        this.state = 1318;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.CARTESIAN_PER) {
            this.state = 1311;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 1312;
            this.varID();
            this.state = 1313;
            this.match(VtlParser.TO);
            this.state = 1314;
            this.varID();
            this.state = 1320;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AggrFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_aggrFunction;
    return this;
}

AggrFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AggrFunctionContext.prototype.constructor = AggrFunctionContext;

AggrFunctionContext.prototype.SUM = function() {
    return this.getToken(VtlParser.SUM, 0);
};

AggrFunctionContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

AggrFunctionContext.prototype.AVG = function() {
    return this.getToken(VtlParser.AVG, 0);
};

AggrFunctionContext.prototype.COUNT = function() {
    return this.getToken(VtlParser.COUNT, 0);
};

AggrFunctionContext.prototype.MEDIAN = function() {
    return this.getToken(VtlParser.MEDIAN, 0);
};

AggrFunctionContext.prototype.MIN = function() {
    return this.getToken(VtlParser.MIN, 0);
};

AggrFunctionContext.prototype.MAX = function() {
    return this.getToken(VtlParser.MAX, 0);
};

AggrFunctionContext.prototype.RANK = function() {
    return this.getToken(VtlParser.RANK, 0);
};

AggrFunctionContext.prototype.STDDEV_POP = function() {
    return this.getToken(VtlParser.STDDEV_POP, 0);
};

AggrFunctionContext.prototype.STDDEV_SAMP = function() {
    return this.getToken(VtlParser.STDDEV_SAMP, 0);
};

AggrFunctionContext.prototype.VAR_POP = function() {
    return this.getToken(VtlParser.VAR_POP, 0);
};

AggrFunctionContext.prototype.VAR_SAMP = function() {
    return this.getToken(VtlParser.VAR_SAMP, 0);
};

AggrFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterAggrFunction(this);
	}
};

AggrFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitAggrFunction(this);
	}
};




VtlParser.AggrFunctionContext = AggrFunctionContext;

VtlParser.prototype.aggrFunction = function() {

    var localctx = new AggrFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, VtlParser.RULE_aggrFunction);
    var _la = 0; // Token type
    try {
        this.state = 1377;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.SUM:
            this.enterOuterAlt(localctx, 1);
            this.state = 1321;
            this.match(VtlParser.SUM);
            this.state = 1322;
            this.match(VtlParser.T__12);
            this.state = 1323;
            this.expr(0);
            this.state = 1324;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.AVG:
            this.enterOuterAlt(localctx, 2);
            this.state = 1326;
            this.match(VtlParser.AVG);
            this.state = 1327;
            this.match(VtlParser.T__12);
            this.state = 1328;
            this.expr(0);
            this.state = 1329;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.COUNT:
            this.enterOuterAlt(localctx, 3);
            this.state = 1331;
            this.match(VtlParser.COUNT);
            this.state = 1332;
            this.match(VtlParser.T__12);
            this.state = 1334;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << VtlParser.T__2) | (1 << VtlParser.T__3) | (1 << VtlParser.T__12) | (1 << VtlParser.EVAL) | (1 << VtlParser.IF) | (1 << VtlParser.CURRENT_DATE))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (VtlParser.NOT - 38)) | (1 << (VtlParser.BETWEEN - 38)) | (1 << (VtlParser.ISNULL - 38)) | (1 << (VtlParser.UNION - 38)) | (1 << (VtlParser.SYMDIFF - 38)) | (1 << (VtlParser.INTERSECT - 38)) | (1 << (VtlParser.CHECK - 38)) | (1 << (VtlParser.EXISTS_IN - 38)) | (1 << (VtlParser.RANK - 38)) | (1 << (VtlParser.MIN - 38)) | (1 << (VtlParser.MAX - 38)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (VtlParser.ABS - 72)) | (1 << (VtlParser.LN - 72)) | (1 << (VtlParser.LOG - 72)) | (1 << (VtlParser.TRUNC - 72)) | (1 << (VtlParser.ROUND - 72)) | (1 << (VtlParser.POWER - 72)) | (1 << (VtlParser.MOD - 72)) | (1 << (VtlParser.LEN - 72)) | (1 << (VtlParser.TRIM - 72)) | (1 << (VtlParser.UCASE - 72)) | (1 << (VtlParser.LCASE - 72)) | (1 << (VtlParser.SUBSTR - 72)) | (1 << (VtlParser.SUM - 72)) | (1 << (VtlParser.AVG - 72)) | (1 << (VtlParser.MEDIAN - 72)) | (1 << (VtlParser.COUNT - 72)) | (1 << (VtlParser.EXP - 72)) | (1 << (VtlParser.CHARSET_MATCH - 72)) | (1 << (VtlParser.NVL - 72)) | (1 << (VtlParser.HIERARCHY - 72)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (VtlParser.DEFINE - 110)) | (1 << (VtlParser.LTRIM - 110)) | (1 << (VtlParser.RTRIM - 110)) | (1 << (VtlParser.INSTR - 110)) | (1 << (VtlParser.REPLACE - 110)) | (1 << (VtlParser.CEIL - 110)) | (1 << (VtlParser.FLOOR - 110)) | (1 << (VtlParser.SQRT - 110)) | (1 << (VtlParser.SETDIFF - 110)) | (1 << (VtlParser.STDDEV_POP - 110)) | (1 << (VtlParser.STDDEV_SAMP - 110)) | (1 << (VtlParser.VAR_POP - 110)) | (1 << (VtlParser.VAR_SAMP - 110)) | (1 << (VtlParser.FIRST_VALUE - 110)) | (1 << (VtlParser.LAST_VALUE - 110)) | (1 << (VtlParser.LAG - 110)) | (1 << (VtlParser.LEAD - 110)) | (1 << (VtlParser.RATIO_TO_REPORT - 110)))) !== 0) || ((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (VtlParser.FILL_TIME_SERIES - 148)) | (1 << (VtlParser.FLOW_TO_STOCK - 148)) | (1 << (VtlParser.STOCK_TO_FLOW - 148)) | (1 << (VtlParser.TIMESHIFT - 148)) | (1 << (VtlParser.INNER_JOIN - 148)))) !== 0) || ((((_la - 180)) & ~0x1f) == 0 && ((1 << (_la - 180)) & ((1 << (VtlParser.LEFT_JOIN - 180)) | (1 << (VtlParser.CROSS_JOIN - 180)) | (1 << (VtlParser.FULL_JOIN - 180)) | (1 << (VtlParser.PERIOD_INDICATOR - 180)) | (1 << (VtlParser.TIME_AGG - 180)) | (1 << (VtlParser.CAST - 180)) | (1 << (VtlParser.CHECK_DATAPOINT - 180)) | (1 << (VtlParser.CHECK_HIERARCHY - 180)))) !== 0) || ((((_la - 226)) & ~0x1f) == 0 && ((1 << (_la - 226)) & ((1 << (VtlParser.INTEGER_CONSTANT - 226)) | (1 << (VtlParser.FLOAT_CONSTANT - 226)) | (1 << (VtlParser.BOOLEAN_CONSTANT - 226)) | (1 << (VtlParser.NULL_CONSTANT - 226)) | (1 << (VtlParser.STRING_CONSTANT - 226)) | (1 << (VtlParser.IDENTIFIER - 226)))) !== 0)) {
                this.state = 1333;
                this.expr(0);
            }

            this.state = 1336;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.MEDIAN:
            this.enterOuterAlt(localctx, 4);
            this.state = 1337;
            this.match(VtlParser.MEDIAN);
            this.state = 1338;
            this.match(VtlParser.T__12);
            this.state = 1339;
            this.expr(0);
            this.state = 1340;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.MIN:
            this.enterOuterAlt(localctx, 5);
            this.state = 1342;
            this.match(VtlParser.MIN);
            this.state = 1343;
            this.match(VtlParser.T__12);
            this.state = 1344;
            this.expr(0);
            this.state = 1345;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.MAX:
            this.enterOuterAlt(localctx, 6);
            this.state = 1347;
            this.match(VtlParser.MAX);
            this.state = 1348;
            this.match(VtlParser.T__12);
            this.state = 1349;
            this.expr(0);
            this.state = 1350;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.RANK:
            this.enterOuterAlt(localctx, 7);
            this.state = 1352;
            this.match(VtlParser.RANK);
            this.state = 1353;
            this.match(VtlParser.T__12);
            this.state = 1354;
            this.expr(0);
            this.state = 1355;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.STDDEV_POP:
            this.enterOuterAlt(localctx, 8);
            this.state = 1357;
            this.match(VtlParser.STDDEV_POP);
            this.state = 1358;
            this.match(VtlParser.T__12);
            this.state = 1359;
            this.expr(0);
            this.state = 1360;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.STDDEV_SAMP:
            this.enterOuterAlt(localctx, 9);
            this.state = 1362;
            this.match(VtlParser.STDDEV_SAMP);
            this.state = 1363;
            this.match(VtlParser.T__12);
            this.state = 1364;
            this.expr(0);
            this.state = 1365;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.VAR_POP:
            this.enterOuterAlt(localctx, 10);
            this.state = 1367;
            this.match(VtlParser.VAR_POP);
            this.state = 1368;
            this.match(VtlParser.T__12);
            this.state = 1369;
            this.expr(0);
            this.state = 1370;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.VAR_SAMP:
            this.enterOuterAlt(localctx, 11);
            this.state = 1372;
            this.match(VtlParser.VAR_SAMP);
            this.state = 1373;
            this.match(VtlParser.T__12);
            this.state = 1374;
            this.expr(0);
            this.state = 1375;
            this.match(VtlParser.T__13);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CalcClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_calcClause;
    return this;
}

CalcClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CalcClauseContext.prototype.constructor = CalcClauseContext;

CalcClauseContext.prototype.CALC = function() {
    return this.getToken(VtlParser.CALC, 0);
};

CalcClauseContext.prototype.calcClauseItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CalcClauseItemContext);
    } else {
        return this.getTypedRuleContext(CalcClauseItemContext,i);
    }
};

CalcClauseContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


CalcClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterCalcClause(this);
	}
};

CalcClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitCalcClause(this);
	}
};




VtlParser.CalcClauseContext = CalcClauseContext;

VtlParser.prototype.calcClause = function() {

    var localctx = new CalcClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, VtlParser.RULE_calcClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1379;
        this.match(VtlParser.CALC);
        this.state = 1380;
        this.calcClauseItem();
        this.state = 1385;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.CARTESIAN_PER) {
            this.state = 1381;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 1382;
            this.calcClauseItem();
            this.state = 1387;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CalcClauseItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_calcClauseItem;
    return this;
}

CalcClauseItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CalcClauseItemContext.prototype.constructor = CalcClauseItemContext;

CalcClauseItemContext.prototype.componentID = function() {
    return this.getTypedRuleContext(ComponentIDContext,0);
};

CalcClauseItemContext.prototype.ASSIGN = function() {
    return this.getToken(VtlParser.ASSIGN, 0);
};

CalcClauseItemContext.prototype.calcExpr = function() {
    return this.getTypedRuleContext(CalcExprContext,0);
};

CalcClauseItemContext.prototype.componentRole = function() {
    return this.getTypedRuleContext(ComponentRoleContext,0);
};

CalcClauseItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterCalcClauseItem(this);
	}
};

CalcClauseItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitCalcClauseItem(this);
	}
};




VtlParser.CalcClauseItemContext = CalcClauseItemContext;

VtlParser.prototype.calcClauseItem = function() {

    var localctx = new CalcClauseItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, VtlParser.RULE_calcClauseItem);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1389;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 90)) & ~0x1f) == 0 && ((1 << (_la - 90)) & ((1 << (VtlParser.DIMENSION - 90)) | (1 << (VtlParser.MEASURE - 90)) | (1 << (VtlParser.ATTRIBUTE - 90)) | (1 << (VtlParser.VIRAL - 90)))) !== 0) || _la===VtlParser.COMPONENT) {
            this.state = 1388;
            this.componentRole();
        }

        this.state = 1391;
        this.componentID();
        this.state = 1392;
        this.match(VtlParser.ASSIGN);
        this.state = 1393;
        this.calcExpr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CalcExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_calcExpr;
    return this;
}

CalcExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CalcExprContext.prototype.constructor = CalcExprContext;

CalcExprContext.prototype.aggrFunction = function() {
    return this.getTypedRuleContext(AggrFunctionContext,0);
};

CalcExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

CalcExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterCalcExpr(this);
	}
};

CalcExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitCalcExpr(this);
	}
};




VtlParser.CalcExprContext = CalcExprContext;

VtlParser.prototype.calcExpr = function() {

    var localctx = new CalcExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, VtlParser.RULE_calcExpr);
    try {
        this.state = 1401;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1395;
            this.aggrFunction();
            this.state = 1396;
            this.match(VtlParser.T__12);
            this.state = 1397;
            this.expr(0);
            this.state = 1398;
            this.match(VtlParser.T__13);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1400;
            this.expr(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_dropClause;
    return this;
}

DropClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropClauseContext.prototype.constructor = DropClauseContext;

DropClauseContext.prototype.DROP = function() {
    return this.getToken(VtlParser.DROP, 0);
};

DropClauseContext.prototype.dropClauseItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DropClauseItemContext);
    } else {
        return this.getTypedRuleContext(DropClauseItemContext,i);
    }
};

DropClauseContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


DropClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterDropClause(this);
	}
};

DropClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitDropClause(this);
	}
};




VtlParser.DropClauseContext = DropClauseContext;

VtlParser.prototype.dropClause = function() {

    var localctx = new DropClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, VtlParser.RULE_dropClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1403;
        this.match(VtlParser.DROP);
        this.state = 1404;
        this.dropClauseItem();
        this.state = 1409;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.CARTESIAN_PER) {
            this.state = 1405;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 1406;
            this.dropClauseItem();
            this.state = 1411;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropClauseItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_dropClauseItem;
    return this;
}

DropClauseItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropClauseItemContext.prototype.constructor = DropClauseItemContext;

DropClauseItemContext.prototype.componentID = function() {
    return this.getTypedRuleContext(ComponentIDContext,0);
};

DropClauseItemContext.prototype.datasetID = function() {
    return this.getTypedRuleContext(DatasetIDContext,0);
};

DropClauseItemContext.prototype.MEMBERSHIP = function() {
    return this.getToken(VtlParser.MEMBERSHIP, 0);
};

DropClauseItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterDropClauseItem(this);
	}
};

DropClauseItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitDropClauseItem(this);
	}
};




VtlParser.DropClauseItemContext = DropClauseItemContext;

VtlParser.prototype.dropClauseItem = function() {

    var localctx = new DropClauseItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, VtlParser.RULE_dropClauseItem);
    try {
        this.state = 1417;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,148,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1412;
            this.componentID();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1413;
            this.datasetID();
            this.state = 1414;
            this.match(VtlParser.MEMBERSHIP);
            this.state = 1415;
            this.componentID();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KeepClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_keepClause;
    return this;
}

KeepClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeepClauseContext.prototype.constructor = KeepClauseContext;

KeepClauseContext.prototype.KEEP = function() {
    return this.getToken(VtlParser.KEEP, 0);
};

KeepClauseContext.prototype.keepClauseItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(KeepClauseItemContext);
    } else {
        return this.getTypedRuleContext(KeepClauseItemContext,i);
    }
};

KeepClauseContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


KeepClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterKeepClause(this);
	}
};

KeepClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitKeepClause(this);
	}
};




VtlParser.KeepClauseContext = KeepClauseContext;

VtlParser.prototype.keepClause = function() {

    var localctx = new KeepClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, VtlParser.RULE_keepClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1419;
        this.match(VtlParser.KEEP);
        this.state = 1420;
        this.keepClauseItem();
        this.state = 1425;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.CARTESIAN_PER) {
            this.state = 1421;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 1422;
            this.keepClauseItem();
            this.state = 1427;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KeepClauseItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_keepClauseItem;
    return this;
}

KeepClauseItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeepClauseItemContext.prototype.constructor = KeepClauseItemContext;

KeepClauseItemContext.prototype.componentID = function() {
    return this.getTypedRuleContext(ComponentIDContext,0);
};

KeepClauseItemContext.prototype.datasetID = function() {
    return this.getTypedRuleContext(DatasetIDContext,0);
};

KeepClauseItemContext.prototype.MEMBERSHIP = function() {
    return this.getToken(VtlParser.MEMBERSHIP, 0);
};

KeepClauseItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterKeepClauseItem(this);
	}
};

KeepClauseItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitKeepClauseItem(this);
	}
};




VtlParser.KeepClauseItemContext = KeepClauseItemContext;

VtlParser.prototype.keepClauseItem = function() {

    var localctx = new KeepClauseItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, VtlParser.RULE_keepClauseItem);
    try {
        this.state = 1433;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,150,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1428;
            this.componentID();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1429;
            this.datasetID();
            this.state = 1430;
            this.match(VtlParser.MEMBERSHIP);
            this.state = 1431;
            this.componentID();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnpivotExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_unpivotExpr;
    return this;
}

UnpivotExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnpivotExprContext.prototype.constructor = UnpivotExprContext;

UnpivotExprContext.prototype.UNPIVOT = function() {
    return this.getToken(VtlParser.UNPIVOT, 0);
};

UnpivotExprContext.prototype.varID = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VarIDContext);
    } else {
        return this.getTypedRuleContext(VarIDContext,i);
    }
};

UnpivotExprContext.prototype.CARTESIAN_PER = function() {
    return this.getToken(VtlParser.CARTESIAN_PER, 0);
};

UnpivotExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterUnpivotExpr(this);
	}
};

UnpivotExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitUnpivotExpr(this);
	}
};




VtlParser.UnpivotExprContext = UnpivotExprContext;

VtlParser.prototype.unpivotExpr = function() {

    var localctx = new UnpivotExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, VtlParser.RULE_unpivotExpr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1435;
        this.match(VtlParser.UNPIVOT);
        this.state = 1436;
        this.varID();
        this.state = 1437;
        this.match(VtlParser.CARTESIAN_PER);
        this.state = 1438;
        this.varID();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PivotExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_pivotExpr;
    return this;
}

PivotExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PivotExprContext.prototype.constructor = PivotExprContext;

PivotExprContext.prototype.PIVOT = function() {
    return this.getToken(VtlParser.PIVOT, 0);
};

PivotExprContext.prototype.varID = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VarIDContext);
    } else {
        return this.getTypedRuleContext(VarIDContext,i);
    }
};

PivotExprContext.prototype.CARTESIAN_PER = function() {
    return this.getToken(VtlParser.CARTESIAN_PER, 0);
};

PivotExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterPivotExpr(this);
	}
};

PivotExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitPivotExpr(this);
	}
};




VtlParser.PivotExprContext = PivotExprContext;

VtlParser.prototype.pivotExpr = function() {

    var localctx = new PivotExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, VtlParser.RULE_pivotExpr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1440;
        this.match(VtlParser.PIVOT);
        this.state = 1441;
        this.varID();
        this.state = 1442;
        this.match(VtlParser.CARTESIAN_PER);
        this.state = 1443;
        this.varID();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SubspaceExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_subspaceExpr;
    return this;
}

SubspaceExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubspaceExprContext.prototype.constructor = SubspaceExprContext;

SubspaceExprContext.prototype.SUBSPACE = function() {
    return this.getToken(VtlParser.SUBSPACE, 0);
};

SubspaceExprContext.prototype.varID = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VarIDContext);
    } else {
        return this.getTypedRuleContext(VarIDContext,i);
    }
};

SubspaceExprContext.prototype.constant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantContext);
    } else {
        return this.getTypedRuleContext(ConstantContext,i);
    }
};

SubspaceExprContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


SubspaceExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterSubspaceExpr(this);
	}
};

SubspaceExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitSubspaceExpr(this);
	}
};




VtlParser.SubspaceExprContext = SubspaceExprContext;

VtlParser.prototype.subspaceExpr = function() {

    var localctx = new SubspaceExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, VtlParser.RULE_subspaceExpr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1445;
        this.match(VtlParser.SUBSPACE);
        this.state = 1446;
        this.varID();
        this.state = 1447;
        this.match(VtlParser.T__10);
        this.state = 1448;
        this.constant();
        this.state = 1456;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.CARTESIAN_PER) {
            this.state = 1449;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 1450;
            this.varID();
            this.state = 1451;
            this.match(VtlParser.T__10);
            this.state = 1452;
            this.constant();
            this.state = 1458;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InBetweenClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_inBetweenClause;
    return this;
}

InBetweenClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InBetweenClauseContext.prototype.constructor = InBetweenClauseContext;

InBetweenClauseContext.prototype.IN = function() {
    return this.getToken(VtlParser.IN, 0);
};

InBetweenClauseContext.prototype.setExpr = function() {
    return this.getTypedRuleContext(SetExprContext,0);
};

InBetweenClauseContext.prototype.IDENTIFIER = function() {
    return this.getToken(VtlParser.IDENTIFIER, 0);
};

InBetweenClauseContext.prototype.NOT_IN = function() {
    return this.getToken(VtlParser.NOT_IN, 0);
};

InBetweenClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterInBetweenClause(this);
	}
};

InBetweenClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitInBetweenClause(this);
	}
};




VtlParser.InBetweenClauseContext = InBetweenClauseContext;

VtlParser.prototype.inBetweenClause = function() {

    var localctx = new InBetweenClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, VtlParser.RULE_inBetweenClause);
    try {
        this.state = 1469;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.IN:
            this.enterOuterAlt(localctx, 1);
            this.state = 1459;
            this.match(VtlParser.IN);
            this.state = 1462;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case VtlParser.UNION:
            case VtlParser.SYMDIFF:
            case VtlParser.INTERSECT:
            case VtlParser.SETDIFF:
                this.state = 1460;
                this.setExpr();
                break;
            case VtlParser.IDENTIFIER:
                this.state = 1461;
                this.match(VtlParser.IDENTIFIER);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case VtlParser.NOT_IN:
            this.enterOuterAlt(localctx, 2);
            this.state = 1464;
            this.match(VtlParser.NOT_IN);
            this.state = 1467;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case VtlParser.UNION:
            case VtlParser.SYMDIFF:
            case VtlParser.INTERSECT:
            case VtlParser.SETDIFF:
                this.state = 1465;
                this.setExpr();
                break;
            case VtlParser.IDENTIFIER:
                this.state = 1466;
                this.match(VtlParser.IDENTIFIER);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_setExpr;
    return this;
}

SetExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetExprContext.prototype.constructor = SetExprContext;

SetExprContext.prototype.UNION = function() {
    return this.getToken(VtlParser.UNION, 0);
};

SetExprContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

SetExprContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


SetExprContext.prototype.SYMDIFF = function() {
    return this.getToken(VtlParser.SYMDIFF, 0);
};

SetExprContext.prototype.SETDIFF = function() {
    return this.getToken(VtlParser.SETDIFF, 0);
};

SetExprContext.prototype.INTERSECT = function() {
    return this.getToken(VtlParser.INTERSECT, 0);
};

SetExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterSetExpr(this);
	}
};

SetExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitSetExpr(this);
	}
};




VtlParser.SetExprContext = SetExprContext;

VtlParser.prototype.setExpr = function() {

    var localctx = new SetExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, VtlParser.RULE_setExpr);
    var _la = 0; // Token type
    try {
        this.state = 1509;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.UNION:
            this.enterOuterAlt(localctx, 1);
            this.state = 1471;
            this.match(VtlParser.UNION);
            this.state = 1472;
            this.match(VtlParser.T__12);
            this.state = 1473;
            this.expr(0);
            this.state = 1478;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===VtlParser.CARTESIAN_PER) {
                this.state = 1474;
                this.match(VtlParser.CARTESIAN_PER);
                this.state = 1475;
                this.expr(0);
                this.state = 1480;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1481;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.SYMDIFF:
            this.enterOuterAlt(localctx, 2);
            this.state = 1483;
            this.match(VtlParser.SYMDIFF);
            this.state = 1484;
            this.match(VtlParser.T__12);
            this.state = 1485;
            this.expr(0);
            this.state = 1486;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 1487;
            this.expr(0);
            this.state = 1488;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.SETDIFF:
            this.enterOuterAlt(localctx, 3);
            this.state = 1490;
            this.match(VtlParser.SETDIFF);
            this.state = 1491;
            this.match(VtlParser.T__12);
            this.state = 1492;
            this.expr(0);
            this.state = 1493;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 1494;
            this.expr(0);
            this.state = 1495;
            this.match(VtlParser.T__13);
            break;
        case VtlParser.INTERSECT:
            this.enterOuterAlt(localctx, 4);
            this.state = 1497;
            this.match(VtlParser.INTERSECT);
            this.state = 1498;
            this.match(VtlParser.T__12);
            this.state = 1499;
            this.expr(0);
            this.state = 1504;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===VtlParser.CARTESIAN_PER) {
                this.state = 1500;
                this.match(VtlParser.CARTESIAN_PER);
                this.state = 1501;
                this.expr(0);
                this.state = 1506;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1507;
            this.match(VtlParser.T__13);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SubscriptExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_subscriptExpr;
    return this;
}

SubscriptExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubscriptExprContext.prototype.constructor = SubscriptExprContext;

SubscriptExprContext.prototype.persistentDatasetID = function() {
    return this.getTypedRuleContext(PersistentDatasetIDContext,0);
};

SubscriptExprContext.prototype.componentID = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ComponentIDContext);
    } else {
        return this.getTypedRuleContext(ComponentIDContext,i);
    }
};

SubscriptExprContext.prototype.constant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantContext);
    } else {
        return this.getTypedRuleContext(ConstantContext,i);
    }
};

SubscriptExprContext.prototype.CARTESIAN_PER = function() {
    return this.getToken(VtlParser.CARTESIAN_PER, 0);
};

SubscriptExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterSubscriptExpr(this);
	}
};

SubscriptExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitSubscriptExpr(this);
	}
};




VtlParser.SubscriptExprContext = SubscriptExprContext;

VtlParser.prototype.subscriptExpr = function() {

    var localctx = new SubscriptExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, VtlParser.RULE_subscriptExpr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1511;
        this.persistentDatasetID();
        this.state = 1512;
        this.match(VtlParser.T__0);
        this.state = 1513;
        this.componentID();
        this.state = 1514;
        this.match(VtlParser.T__10);
        this.state = 1515;
        this.constant();
        this.state = 1521;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.CARTESIAN_PER) {
            this.state = 1516;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 1517;
            this.componentID();
            this.state = 1518;
            this.match(VtlParser.T__10);
            this.state = 1519;
            this.constant();
        }

        this.state = 1523;
        this.match(VtlParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AggrInvocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_aggrInvocation;
    return this;
}

AggrInvocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AggrInvocationContext.prototype.constructor = AggrInvocationContext;

AggrInvocationContext.prototype.aggrFunctionName = function() {
    return this.getTypedRuleContext(AggrFunctionNameContext,0);
};

AggrInvocationContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.IDENTIFIER);
    } else {
        return this.getToken(VtlParser.IDENTIFIER, i);
    }
};


AggrInvocationContext.prototype.MEMBERSHIP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.MEMBERSHIP);
    } else {
        return this.getToken(VtlParser.MEMBERSHIP, i);
    }
};


AggrInvocationContext.prototype.componentID = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ComponentIDContext);
    } else {
        return this.getTypedRuleContext(ComponentIDContext,i);
    }
};

AggrInvocationContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


AggrInvocationContext.prototype.groupingClause = function() {
    return this.getTypedRuleContext(GroupingClauseContext,0);
};

AggrInvocationContext.prototype.havingClause = function() {
    return this.getTypedRuleContext(HavingClauseContext,0);
};

AggrInvocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterAggrInvocation(this);
	}
};

AggrInvocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitAggrInvocation(this);
	}
};




VtlParser.AggrInvocationContext = AggrInvocationContext;

VtlParser.prototype.aggrInvocation = function() {

    var localctx = new AggrInvocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, VtlParser.RULE_aggrInvocation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1525;
        this.aggrFunctionName();
        this.state = 1526;
        this.match(VtlParser.T__12);
        this.state = 1527;
        this.match(VtlParser.IDENTIFIER);
        this.state = 1530;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.MEMBERSHIP) {
            this.state = 1528;
            this.match(VtlParser.MEMBERSHIP);
            this.state = 1529;
            this.componentID();
        }

        this.state = 1540;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.CARTESIAN_PER) {
            this.state = 1532;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 1533;
            this.match(VtlParser.IDENTIFIER);
            this.state = 1536;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.MEMBERSHIP) {
                this.state = 1534;
                this.match(VtlParser.MEMBERSHIP);
                this.state = 1535;
                this.componentID();
            }

            this.state = 1542;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1544;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.GROUP) {
            this.state = 1543;
            this.groupingClause();
        }

        this.state = 1547;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.HAVING) {
            this.state = 1546;
            this.havingClause();
        }

        this.state = 1549;
        this.match(VtlParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AggrInvocationCompExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_aggrInvocationCompExpr;
    return this;
}

AggrInvocationCompExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AggrInvocationCompExprContext.prototype.constructor = AggrInvocationCompExprContext;

AggrInvocationCompExprContext.prototype.aggrFunctionName = function() {
    return this.getTypedRuleContext(AggrFunctionNameContext,0);
};

AggrInvocationCompExprContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.IDENTIFIER);
    } else {
        return this.getToken(VtlParser.IDENTIFIER, i);
    }
};


AggrInvocationCompExprContext.prototype.MEMBERSHIP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.MEMBERSHIP);
    } else {
        return this.getToken(VtlParser.MEMBERSHIP, i);
    }
};


AggrInvocationCompExprContext.prototype.componentID = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ComponentIDContext);
    } else {
        return this.getTypedRuleContext(ComponentIDContext,i);
    }
};

AggrInvocationCompExprContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


AggrInvocationCompExprContext.prototype.groupingClause = function() {
    return this.getTypedRuleContext(GroupingClauseContext,0);
};

AggrInvocationCompExprContext.prototype.havingClause = function() {
    return this.getTypedRuleContext(HavingClauseContext,0);
};

AggrInvocationCompExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterAggrInvocationCompExpr(this);
	}
};

AggrInvocationCompExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitAggrInvocationCompExpr(this);
	}
};




VtlParser.AggrInvocationCompExprContext = AggrInvocationCompExprContext;

VtlParser.prototype.aggrInvocationCompExpr = function() {

    var localctx = new AggrInvocationCompExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, VtlParser.RULE_aggrInvocationCompExpr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1551;
        this.aggrFunctionName();
        this.state = 1552;
        this.match(VtlParser.T__12);
        this.state = 1553;
        this.match(VtlParser.IDENTIFIER);
        this.state = 1556;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.MEMBERSHIP) {
            this.state = 1554;
            this.match(VtlParser.MEMBERSHIP);
            this.state = 1555;
            this.componentID();
        }

        this.state = 1566;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.CARTESIAN_PER) {
            this.state = 1558;
            this.match(VtlParser.CARTESIAN_PER);
            this.state = 1559;
            this.match(VtlParser.IDENTIFIER);
            this.state = 1562;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.MEMBERSHIP) {
                this.state = 1560;
                this.match(VtlParser.MEMBERSHIP);
                this.state = 1561;
                this.componentID();
            }

            this.state = 1568;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1569;
        this.match(VtlParser.T__13);
        this.state = 1571;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,167,this._ctx);
        if(la_===1) {
            this.state = 1570;
            this.groupingClause();

        }
        this.state = 1574;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,168,this._ctx);
        if(la_===1) {
            this.state = 1573;
            this.havingClause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AggrFunctionNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_aggrFunctionName;
    return this;
}

AggrFunctionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AggrFunctionNameContext.prototype.constructor = AggrFunctionNameContext;

AggrFunctionNameContext.prototype.SUM = function() {
    return this.getToken(VtlParser.SUM, 0);
};

AggrFunctionNameContext.prototype.AVG = function() {
    return this.getToken(VtlParser.AVG, 0);
};

AggrFunctionNameContext.prototype.COUNT = function() {
    return this.getToken(VtlParser.COUNT, 0);
};

AggrFunctionNameContext.prototype.MEDIAN = function() {
    return this.getToken(VtlParser.MEDIAN, 0);
};

AggrFunctionNameContext.prototype.MIN = function() {
    return this.getToken(VtlParser.MIN, 0);
};

AggrFunctionNameContext.prototype.MAX = function() {
    return this.getToken(VtlParser.MAX, 0);
};

AggrFunctionNameContext.prototype.STDDEV_POP = function() {
    return this.getToken(VtlParser.STDDEV_POP, 0);
};

AggrFunctionNameContext.prototype.STDDEV_SAMP = function() {
    return this.getToken(VtlParser.STDDEV_SAMP, 0);
};

AggrFunctionNameContext.prototype.VAR_POP = function() {
    return this.getToken(VtlParser.VAR_POP, 0);
};

AggrFunctionNameContext.prototype.VAR_SAMP = function() {
    return this.getToken(VtlParser.VAR_SAMP, 0);
};

AggrFunctionNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterAggrFunctionName(this);
	}
};

AggrFunctionNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitAggrFunctionName(this);
	}
};




VtlParser.AggrFunctionNameContext = AggrFunctionNameContext;

VtlParser.prototype.aggrFunctionName = function() {

    var localctx = new AggrFunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, VtlParser.RULE_aggrFunctionName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1576;
        _la = this._input.LA(1);
        if(!(((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (VtlParser.MIN - 67)) | (1 << (VtlParser.MAX - 67)) | (1 << (VtlParser.SUM - 67)) | (1 << (VtlParser.AVG - 67)) | (1 << (VtlParser.MEDIAN - 67)) | (1 << (VtlParser.COUNT - 67)))) !== 0) || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (VtlParser.STDDEV_POP - 127)) | (1 << (VtlParser.STDDEV_SAMP - 127)) | (1 << (VtlParser.VAR_POP - 127)) | (1 << (VtlParser.VAR_SAMP - 127)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GroupingClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_groupingClause;
    return this;
}

GroupingClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupingClauseContext.prototype.constructor = GroupingClauseContext;

GroupingClauseContext.prototype.groupKeyword = function() {
    return this.getTypedRuleContext(GroupKeywordContext,0);
};

GroupingClauseContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.IDENTIFIER);
    } else {
        return this.getToken(VtlParser.IDENTIFIER, i);
    }
};


GroupingClauseContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

GroupingClauseContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


GroupingClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterGroupingClause(this);
	}
};

GroupingClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitGroupingClause(this);
	}
};




VtlParser.GroupingClauseContext = GroupingClauseContext;

VtlParser.prototype.groupingClause = function() {

    var localctx = new GroupingClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, VtlParser.RULE_groupingClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1578;
        this.groupKeyword();
        this.state = 1588;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1579;
            this.match(VtlParser.IDENTIFIER);
            this.state = 1584;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,169,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1580;
                    this.match(VtlParser.CARTESIAN_PER);
                    this.state = 1581;
                    this.match(VtlParser.IDENTIFIER); 
                }
                this.state = 1586;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,169,this._ctx);
            }

            break;

        case 2:
            this.state = 1587;
            this.expr(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HavingClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_havingClause;
    return this;
}

HavingClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HavingClauseContext.prototype.constructor = HavingClauseContext;

HavingClauseContext.prototype.HAVING = function() {
    return this.getToken(VtlParser.HAVING, 0);
};

HavingClauseContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

HavingClauseContext.prototype.aggrFunction = function() {
    return this.getTypedRuleContext(AggrFunctionContext,0);
};

HavingClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterHavingClause(this);
	}
};

HavingClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitHavingClause(this);
	}
};




VtlParser.HavingClauseContext = HavingClauseContext;

VtlParser.prototype.havingClause = function() {

    var localctx = new HavingClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, VtlParser.RULE_havingClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1590;
        this.match(VtlParser.HAVING);
        this.state = 1592;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,171,this._ctx);
        if(la_===1) {
            this.state = 1591;
            this.match(VtlParser.T__12);

        }
        this.state = 1595;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,172,this._ctx);
        if(la_===1) {
            this.state = 1594;
            this.aggrFunction();

        }
        this.state = 1597;
        this.expr(0);
        this.state = 1599;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,173,this._ctx);
        if(la_===1) {
            this.state = 1598;
            this.match(VtlParser.T__13);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReturnAllContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_returnAll;
    return this;
}

ReturnAllContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnAllContext.prototype.constructor = ReturnAllContext;

ReturnAllContext.prototype.RETURN = function() {
    return this.getToken(VtlParser.RETURN, 0);
};

ReturnAllContext.prototype.ALL = function() {
    return this.getToken(VtlParser.ALL, 0);
};

ReturnAllContext.prototype.DATA = function() {
    return this.getToken(VtlParser.DATA, 0);
};

ReturnAllContext.prototype.POINTS = function() {
    return this.getToken(VtlParser.POINTS, 0);
};

ReturnAllContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterReturnAll(this);
	}
};

ReturnAllContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitReturnAll(this);
	}
};




VtlParser.ReturnAllContext = ReturnAllContext;

VtlParser.prototype.returnAll = function() {

    var localctx = new ReturnAllContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, VtlParser.RULE_returnAll);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1601;
        this.match(VtlParser.RETURN);
        this.state = 1602;
        this.match(VtlParser.ALL);
        this.state = 1603;
        this.match(VtlParser.DATA);
        this.state = 1604;
        this.match(VtlParser.POINTS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComponentRoleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_componentRole;
    return this;
}

ComponentRoleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComponentRoleContext.prototype.constructor = ComponentRoleContext;

ComponentRoleContext.prototype.MEASURE = function() {
    return this.getToken(VtlParser.MEASURE, 0);
};

ComponentRoleContext.prototype.COMPONENT = function() {
    return this.getToken(VtlParser.COMPONENT, 0);
};

ComponentRoleContext.prototype.DIMENSION = function() {
    return this.getToken(VtlParser.DIMENSION, 0);
};

ComponentRoleContext.prototype.ATTRIBUTE = function() {
    return this.getToken(VtlParser.ATTRIBUTE, 0);
};

ComponentRoleContext.prototype.viralAttribute = function() {
    return this.getTypedRuleContext(ViralAttributeContext,0);
};

ComponentRoleContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterComponentRole(this);
	}
};

ComponentRoleContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitComponentRole(this);
	}
};




VtlParser.ComponentRoleContext = ComponentRoleContext;

VtlParser.prototype.componentRole = function() {

    var localctx = new ComponentRoleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, VtlParser.RULE_componentRole);
    try {
        this.state = 1611;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.MEASURE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1606;
            this.match(VtlParser.MEASURE);
            break;
        case VtlParser.COMPONENT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1607;
            this.match(VtlParser.COMPONENT);
            break;
        case VtlParser.DIMENSION:
            this.enterOuterAlt(localctx, 3);
            this.state = 1608;
            this.match(VtlParser.DIMENSION);
            break;
        case VtlParser.ATTRIBUTE:
            this.enterOuterAlt(localctx, 4);
            this.state = 1609;
            this.match(VtlParser.ATTRIBUTE);
            break;
        case VtlParser.VIRAL:
            this.enterOuterAlt(localctx, 5);
            this.state = 1610;
            this.viralAttribute();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ViralAttributeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_viralAttribute;
    return this;
}

ViralAttributeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ViralAttributeContext.prototype.constructor = ViralAttributeContext;

ViralAttributeContext.prototype.VIRAL = function() {
    return this.getToken(VtlParser.VIRAL, 0);
};

ViralAttributeContext.prototype.ATTRIBUTE = function() {
    return this.getToken(VtlParser.ATTRIBUTE, 0);
};

ViralAttributeContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterViralAttribute(this);
	}
};

ViralAttributeContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitViralAttribute(this);
	}
};




VtlParser.ViralAttributeContext = ViralAttributeContext;

VtlParser.prototype.viralAttribute = function() {

    var localctx = new ViralAttributeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, VtlParser.RULE_viralAttribute);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1613;
        this.match(VtlParser.VIRAL);
        this.state = 1614;
        this.match(VtlParser.ATTRIBUTE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LogBaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_logBase;
    return this;
}

LogBaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LogBaseContext.prototype.constructor = LogBaseContext;

LogBaseContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

LogBaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterLogBase(this);
	}
};

LogBaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitLogBase(this);
	}
};




VtlParser.LogBaseContext = LogBaseContext;

VtlParser.prototype.logBase = function() {

    var localctx = new LogBaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, VtlParser.RULE_logBase);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1616;
        this.expr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExponentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_exponent;
    return this;
}

ExponentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExponentContext.prototype.constructor = ExponentContext;

ExponentContext.prototype.INTEGER_CONSTANT = function() {
    return this.getToken(VtlParser.INTEGER_CONSTANT, 0);
};

ExponentContext.prototype.FLOAT_CONSTANT = function() {
    return this.getToken(VtlParser.FLOAT_CONSTANT, 0);
};

ExponentContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterExponent(this);
	}
};

ExponentContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitExponent(this);
	}
};




VtlParser.ExponentContext = ExponentContext;

VtlParser.prototype.exponent = function() {

    var localctx = new ExponentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, VtlParser.RULE_exponent);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1618;
        _la = this._input.LA(1);
        if(!(_la===VtlParser.INTEGER_CONSTANT || _la===VtlParser.FLOAT_CONSTANT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PersistentDatasetIDContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_persistentDatasetID;
    return this;
}

PersistentDatasetIDContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PersistentDatasetIDContext.prototype.constructor = PersistentDatasetIDContext;

PersistentDatasetIDContext.prototype.STRING_CONSTANT = function() {
    return this.getToken(VtlParser.STRING_CONSTANT, 0);
};

PersistentDatasetIDContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterPersistentDatasetID(this);
	}
};

PersistentDatasetIDContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitPersistentDatasetID(this);
	}
};




VtlParser.PersistentDatasetIDContext = PersistentDatasetIDContext;

VtlParser.prototype.persistentDatasetID = function() {

    var localctx = new PersistentDatasetIDContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, VtlParser.RULE_persistentDatasetID);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1620;
        this.match(VtlParser.STRING_CONSTANT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DatasetIDContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_datasetID;
    return this;
}

DatasetIDContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DatasetIDContext.prototype.constructor = DatasetIDContext;

DatasetIDContext.prototype.IDENTIFIER = function() {
    return this.getToken(VtlParser.IDENTIFIER, 0);
};

DatasetIDContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterDatasetID(this);
	}
};

DatasetIDContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitDatasetID(this);
	}
};




VtlParser.DatasetIDContext = DatasetIDContext;

VtlParser.prototype.datasetID = function() {

    var localctx = new DatasetIDContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, VtlParser.RULE_datasetID);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1622;
        this.match(VtlParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RulesetIDContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_rulesetID;
    return this;
}

RulesetIDContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RulesetIDContext.prototype.constructor = RulesetIDContext;

RulesetIDContext.prototype.IDENTIFIER = function() {
    return this.getToken(VtlParser.IDENTIFIER, 0);
};

RulesetIDContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterRulesetID(this);
	}
};

RulesetIDContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitRulesetID(this);
	}
};




VtlParser.RulesetIDContext = RulesetIDContext;

VtlParser.prototype.rulesetID = function() {

    var localctx = new RulesetIDContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, VtlParser.RULE_rulesetID);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1624;
        this.match(VtlParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VarIDContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_varID;
    return this;
}

VarIDContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarIDContext.prototype.constructor = VarIDContext;

VarIDContext.prototype.IDENTIFIER = function() {
    return this.getToken(VtlParser.IDENTIFIER, 0);
};

VarIDContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterVarID(this);
	}
};

VarIDContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitVarID(this);
	}
};




VtlParser.VarIDContext = VarIDContext;

VtlParser.prototype.varID = function() {

    var localctx = new VarIDContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, VtlParser.RULE_varID);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1626;
        this.match(VtlParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComponentIDContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_componentID;
    return this;
}

ComponentIDContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComponentIDContext.prototype.constructor = ComponentIDContext;

ComponentIDContext.prototype.IDENTIFIER = function() {
    return this.getToken(VtlParser.IDENTIFIER, 0);
};

ComponentIDContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterComponentID(this);
	}
};

ComponentIDContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitComponentID(this);
	}
};




VtlParser.ComponentIDContext = ComponentIDContext;

VtlParser.prototype.componentID = function() {

    var localctx = new ComponentIDContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, VtlParser.RULE_componentID);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1628;
        this.match(VtlParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OperatorIDContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_operatorID;
    return this;
}

OperatorIDContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperatorIDContext.prototype.constructor = OperatorIDContext;

OperatorIDContext.prototype.IDENTIFIER = function() {
    return this.getToken(VtlParser.IDENTIFIER, 0);
};

OperatorIDContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterOperatorID(this);
	}
};

OperatorIDContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitOperatorID(this);
	}
};




VtlParser.OperatorIDContext = OperatorIDContext;

VtlParser.prototype.operatorID = function() {

    var localctx = new OperatorIDContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, VtlParser.RULE_operatorID);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1630;
        this.match(VtlParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RoutineNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_routineName;
    return this;
}

RoutineNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RoutineNameContext.prototype.constructor = RoutineNameContext;

RoutineNameContext.prototype.IDENTIFIER = function() {
    return this.getToken(VtlParser.IDENTIFIER, 0);
};

RoutineNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterRoutineName(this);
	}
};

RoutineNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitRoutineName(this);
	}
};




VtlParser.RoutineNameContext = RoutineNameContext;

VtlParser.prototype.routineName = function() {

    var localctx = new RoutineNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, VtlParser.RULE_routineName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1632;
        this.match(VtlParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinKeywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_joinKeyword;
    return this;
}

JoinKeywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinKeywordContext.prototype.constructor = JoinKeywordContext;

JoinKeywordContext.prototype.INNER_JOIN = function() {
    return this.getToken(VtlParser.INNER_JOIN, 0);
};

JoinKeywordContext.prototype.LEFT_JOIN = function() {
    return this.getToken(VtlParser.LEFT_JOIN, 0);
};

JoinKeywordContext.prototype.FULL_JOIN = function() {
    return this.getToken(VtlParser.FULL_JOIN, 0);
};

JoinKeywordContext.prototype.CROSS_JOIN = function() {
    return this.getToken(VtlParser.CROSS_JOIN, 0);
};

JoinKeywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterJoinKeyword(this);
	}
};

JoinKeywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitJoinKeyword(this);
	}
};




VtlParser.JoinKeywordContext = JoinKeywordContext;

VtlParser.prototype.joinKeyword = function() {

    var localctx = new JoinKeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, VtlParser.RULE_joinKeyword);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1634;
        _la = this._input.LA(1);
        if(!(((((_la - 179)) & ~0x1f) == 0 && ((1 << (_la - 179)) & ((1 << (VtlParser.INNER_JOIN - 179)) | (1 << (VtlParser.LEFT_JOIN - 179)) | (1 << (VtlParser.CROSS_JOIN - 179)) | (1 << (VtlParser.FULL_JOIN - 179)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GroupKeywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_groupKeyword;
    return this;
}

GroupKeywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupKeywordContext.prototype.constructor = GroupKeywordContext;

GroupKeywordContext.prototype.GROUP = function() {
    return this.getToken(VtlParser.GROUP, 0);
};

GroupKeywordContext.prototype.BY = function() {
    return this.getToken(VtlParser.BY, 0);
};

GroupKeywordContext.prototype.EXCEPT = function() {
    return this.getToken(VtlParser.EXCEPT, 0);
};

GroupKeywordContext.prototype.ALL = function() {
    return this.getToken(VtlParser.ALL, 0);
};

GroupKeywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterGroupKeyword(this);
	}
};

GroupKeywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitGroupKeyword(this);
	}
};




VtlParser.GroupKeywordContext = GroupKeywordContext;

VtlParser.prototype.groupKeyword = function() {

    var localctx = new GroupKeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, VtlParser.RULE_groupKeyword);
    try {
        this.state = 1642;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,175,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1636;
            this.match(VtlParser.GROUP);
            this.state = 1637;
            this.match(VtlParser.BY);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1638;
            this.match(VtlParser.GROUP);
            this.state = 1639;
            this.match(VtlParser.EXCEPT);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1640;
            this.match(VtlParser.GROUP);
            this.state = 1641;
            this.match(VtlParser.ALL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_constant;
    return this;
}

ConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantContext.prototype.constructor = ConstantContext;

ConstantContext.prototype.INTEGER_CONSTANT = function() {
    return this.getToken(VtlParser.INTEGER_CONSTANT, 0);
};

ConstantContext.prototype.FLOAT_CONSTANT = function() {
    return this.getToken(VtlParser.FLOAT_CONSTANT, 0);
};

ConstantContext.prototype.BOOLEAN_CONSTANT = function() {
    return this.getToken(VtlParser.BOOLEAN_CONSTANT, 0);
};

ConstantContext.prototype.STRING_CONSTANT = function() {
    return this.getToken(VtlParser.STRING_CONSTANT, 0);
};

ConstantContext.prototype.NULL_CONSTANT = function() {
    return this.getToken(VtlParser.NULL_CONSTANT, 0);
};

ConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterConstant(this);
	}
};

ConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitConstant(this);
	}
};




VtlParser.ConstantContext = ConstantContext;

VtlParser.prototype.constant = function() {

    var localctx = new ConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, VtlParser.RULE_constant);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1644;
        _la = this._input.LA(1);
        if(!(((((_la - 226)) & ~0x1f) == 0 && ((1 << (_la - 226)) & ((1 << (VtlParser.INTEGER_CONSTANT - 226)) | (1 << (VtlParser.FLOAT_CONSTANT - 226)) | (1 << (VtlParser.BOOLEAN_CONSTANT - 226)) | (1 << (VtlParser.NULL_CONSTANT - 226)) | (1 << (VtlParser.STRING_CONSTANT - 226)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComponentType2Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_componentType2;
    return this;
}

ComponentType2Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComponentType2Context.prototype.constructor = ComponentType2Context;

ComponentType2Context.prototype.STRING = function() {
    return this.getToken(VtlParser.STRING, 0);
};

ComponentType2Context.prototype.INTEGER = function() {
    return this.getToken(VtlParser.INTEGER, 0);
};

ComponentType2Context.prototype.FLOAT = function() {
    return this.getToken(VtlParser.FLOAT, 0);
};

ComponentType2Context.prototype.BOOLEAN = function() {
    return this.getToken(VtlParser.BOOLEAN, 0);
};

ComponentType2Context.prototype.DATE = function() {
    return this.getToken(VtlParser.DATE, 0);
};

ComponentType2Context.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterComponentType2(this);
	}
};

ComponentType2Context.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitComponentType2(this);
	}
};




VtlParser.ComponentType2Context = ComponentType2Context;

VtlParser.prototype.componentType2 = function() {

    var localctx = new ComponentType2Context(this, this._ctx, this.state);
    this.enterRule(localctx, 204, VtlParser.RULE_componentType2);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1646;
        _la = this._input.LA(1);
        if(!(((((_la - 155)) & ~0x1f) == 0 && ((1 << (_la - 155)) & ((1 << (VtlParser.BOOLEAN - 155)) | (1 << (VtlParser.DATE - 155)) | (1 << (VtlParser.STRING - 155)) | (1 << (VtlParser.INTEGER - 155)) | (1 << (VtlParser.FLOAT - 155)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ScalarTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_scalarType;
    return this;
}

ScalarTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ScalarTypeContext.prototype.constructor = ScalarTypeContext;

ScalarTypeContext.prototype.basicScalarType = function() {
    return this.getTypedRuleContext(BasicScalarTypeContext,0);
};

ScalarTypeContext.prototype.valueDomainName = function() {
    return this.getTypedRuleContext(ValueDomainNameContext,0);
};

ScalarTypeContext.prototype.setName = function() {
    return this.getTypedRuleContext(SetNameContext,0);
};

ScalarTypeContext.prototype.scalarTypeConstraint = function() {
    return this.getTypedRuleContext(ScalarTypeConstraintContext,0);
};

ScalarTypeContext.prototype.NULL_CONSTANT = function() {
    return this.getToken(VtlParser.NULL_CONSTANT, 0);
};

ScalarTypeContext.prototype.NOT = function() {
    return this.getToken(VtlParser.NOT, 0);
};

ScalarTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterScalarType(this);
	}
};

ScalarTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitScalarType(this);
	}
};




VtlParser.ScalarTypeContext = ScalarTypeContext;

VtlParser.prototype.scalarType = function() {

    var localctx = new ScalarTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, VtlParser.RULE_scalarType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1651;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,176,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1648;
            this.basicScalarType();
            break;

        case 2:
            this.state = 1649;
            this.valueDomainName();
            break;

        case 3:
            this.state = 1650;
            this.setName();
            break;

        }
        this.state = 1654;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.T__0 || _la===VtlParser.T__15) {
            this.state = 1653;
            this.scalarTypeConstraint();
        }

        this.state = 1660;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.NOT || _la===VtlParser.NULL_CONSTANT) {
            this.state = 1657;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.NOT) {
                this.state = 1656;
                this.match(VtlParser.NOT);
            }

            this.state = 1659;
            this.match(VtlParser.NULL_CONSTANT);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BasicScalarTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_basicScalarType;
    return this;
}

BasicScalarTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BasicScalarTypeContext.prototype.constructor = BasicScalarTypeContext;

BasicScalarTypeContext.prototype.STRING = function() {
    return this.getToken(VtlParser.STRING, 0);
};

BasicScalarTypeContext.prototype.INTEGER = function() {
    return this.getToken(VtlParser.INTEGER, 0);
};

BasicScalarTypeContext.prototype.NUMBER = function() {
    return this.getToken(VtlParser.NUMBER, 0);
};

BasicScalarTypeContext.prototype.BOOLEAN = function() {
    return this.getToken(VtlParser.BOOLEAN, 0);
};

BasicScalarTypeContext.prototype.DATE = function() {
    return this.getToken(VtlParser.DATE, 0);
};

BasicScalarTypeContext.prototype.TIME_PERIOD = function() {
    return this.getToken(VtlParser.TIME_PERIOD, 0);
};

BasicScalarTypeContext.prototype.DURATION = function() {
    return this.getToken(VtlParser.DURATION, 0);
};

BasicScalarTypeContext.prototype.SCALAR = function() {
    return this.getToken(VtlParser.SCALAR, 0);
};

BasicScalarTypeContext.prototype.TIME = function() {
    return this.getToken(VtlParser.TIME, 0);
};

BasicScalarTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterBasicScalarType(this);
	}
};

BasicScalarTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitBasicScalarType(this);
	}
};




VtlParser.BasicScalarTypeContext = BasicScalarTypeContext;

VtlParser.prototype.basicScalarType = function() {

    var localctx = new BasicScalarTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, VtlParser.RULE_basicScalarType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1662;
        _la = this._input.LA(1);
        if(!(((((_la - 155)) & ~0x1f) == 0 && ((1 << (_la - 155)) & ((1 << (VtlParser.BOOLEAN - 155)) | (1 << (VtlParser.DATE - 155)) | (1 << (VtlParser.TIME_PERIOD - 155)) | (1 << (VtlParser.NUMBER - 155)) | (1 << (VtlParser.STRING - 155)) | (1 << (VtlParser.INTEGER - 155)))) !== 0) || _la===VtlParser.DURATION || _la===VtlParser.SCALAR || _la===VtlParser.TIME)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValueDomainNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_valueDomainName;
    return this;
}

ValueDomainNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueDomainNameContext.prototype.constructor = ValueDomainNameContext;

ValueDomainNameContext.prototype.IDENTIFIER = function() {
    return this.getToken(VtlParser.IDENTIFIER, 0);
};

ValueDomainNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterValueDomainName(this);
	}
};

ValueDomainNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitValueDomainName(this);
	}
};




VtlParser.ValueDomainNameContext = ValueDomainNameContext;

VtlParser.prototype.valueDomainName = function() {

    var localctx = new ValueDomainNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, VtlParser.RULE_valueDomainName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1664;
        this.match(VtlParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_setName;
    return this;
}

SetNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetNameContext.prototype.constructor = SetNameContext;

SetNameContext.prototype.IDENTIFIER = function() {
    return this.getToken(VtlParser.IDENTIFIER, 0);
};

SetNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterSetName(this);
	}
};

SetNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitSetName(this);
	}
};




VtlParser.SetNameContext = SetNameContext;

VtlParser.prototype.setName = function() {

    var localctx = new SetNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, VtlParser.RULE_setName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1666;
        this.match(VtlParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ScalarTypeConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_scalarTypeConstraint;
    return this;
}

ScalarTypeConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ScalarTypeConstraintContext.prototype.constructor = ScalarTypeConstraintContext;

ScalarTypeConstraintContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

ScalarTypeConstraintContext.prototype.constant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantContext);
    } else {
        return this.getTypedRuleContext(ConstantContext,i);
    }
};

ScalarTypeConstraintContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


ScalarTypeConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterScalarTypeConstraint(this);
	}
};

ScalarTypeConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitScalarTypeConstraint(this);
	}
};




VtlParser.ScalarTypeConstraintContext = ScalarTypeConstraintContext;

VtlParser.prototype.scalarTypeConstraint = function() {

    var localctx = new ScalarTypeConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, VtlParser.RULE_scalarTypeConstraint);
    var _la = 0; // Token type
    try {
        this.state = 1683;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.T__0:
            this.enterOuterAlt(localctx, 1);
            this.state = 1668;
            this.match(VtlParser.T__0);
            this.state = 1669;
            this.expr(0);
            this.state = 1670;
            this.match(VtlParser.T__1);
            break;
        case VtlParser.T__15:
            this.enterOuterAlt(localctx, 2);
            this.state = 1672;
            this.match(VtlParser.T__15);
            this.state = 1673;
            this.constant();
            this.state = 1678;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===VtlParser.CARTESIAN_PER) {
                this.state = 1674;
                this.match(VtlParser.CARTESIAN_PER);
                this.state = 1675;
                this.constant();
                this.state = 1680;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1681;
            this.match(VtlParser.T__16);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DataTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_dataType;
    return this;
}

DataTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeContext.prototype.constructor = DataTypeContext;

DataTypeContext.prototype.scalarType = function() {
    return this.getTypedRuleContext(ScalarTypeContext,0);
};

DataTypeContext.prototype.componentType = function() {
    return this.getTypedRuleContext(ComponentTypeContext,0);
};

DataTypeContext.prototype.datasetType = function() {
    return this.getTypedRuleContext(DatasetTypeContext,0);
};

DataTypeContext.prototype.scalarSetType = function() {
    return this.getTypedRuleContext(ScalarSetTypeContext,0);
};

DataTypeContext.prototype.operatorType = function() {
    return this.getTypedRuleContext(OperatorTypeContext,0);
};

DataTypeContext.prototype.rulesetType = function() {
    return this.getTypedRuleContext(RulesetTypeContext,0);
};

DataTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterDataType(this);
	}
};

DataTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitDataType(this);
	}
};




VtlParser.DataTypeContext = DataTypeContext;

VtlParser.prototype.dataType = function() {

    var localctx = new DataTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, VtlParser.RULE_dataType);
    try {
        this.state = 1691;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,182,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1685;
            this.scalarType();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1686;
            this.componentType();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1687;
            this.datasetType();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1688;
            this.scalarSetType();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1689;
            this.operatorType();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1690;
            this.rulesetType();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComponentTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_componentType;
    return this;
}

ComponentTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComponentTypeContext.prototype.constructor = ComponentTypeContext;

ComponentTypeContext.prototype.componentRole = function() {
    return this.getTypedRuleContext(ComponentRoleContext,0);
};

ComponentTypeContext.prototype.scalarType = function() {
    return this.getTypedRuleContext(ScalarTypeContext,0);
};

ComponentTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterComponentType(this);
	}
};

ComponentTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitComponentType(this);
	}
};




VtlParser.ComponentTypeContext = ComponentTypeContext;

VtlParser.prototype.componentType = function() {

    var localctx = new ComponentTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, VtlParser.RULE_componentType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1693;
        this.componentRole();
        this.state = 1698;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.T__7) {
            this.state = 1694;
            this.match(VtlParser.T__7);
            this.state = 1695;
            this.scalarType();
            this.state = 1696;
            this.match(VtlParser.T__6);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DatasetTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_datasetType;
    return this;
}

DatasetTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DatasetTypeContext.prototype.constructor = DatasetTypeContext;

DatasetTypeContext.prototype.DATASET = function() {
    return this.getToken(VtlParser.DATASET, 0);
};

DatasetTypeContext.prototype.compConstraint = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CompConstraintContext);
    } else {
        return this.getTypedRuleContext(CompConstraintContext,i);
    }
};

DatasetTypeContext.prototype.CARTESIAN_PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.CARTESIAN_PER);
    } else {
        return this.getToken(VtlParser.CARTESIAN_PER, i);
    }
};


DatasetTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterDatasetType(this);
	}
};

DatasetTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitDatasetType(this);
	}
};




VtlParser.DatasetTypeContext = DatasetTypeContext;

VtlParser.prototype.datasetType = function() {

    var localctx = new DatasetTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, VtlParser.RULE_datasetType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1700;
        this.match(VtlParser.DATASET);
        this.state = 1712;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.T__15) {
            this.state = 1701;
            this.match(VtlParser.T__15);
            this.state = 1702;
            this.compConstraint();
            this.state = 1707;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===VtlParser.CARTESIAN_PER) {
                this.state = 1703;
                this.match(VtlParser.CARTESIAN_PER);
                this.state = 1704;
                this.compConstraint();
                this.state = 1709;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1710;
            this.match(VtlParser.T__16);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CompConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_compConstraint;
    return this;
}

CompConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CompConstraintContext.prototype.constructor = CompConstraintContext;

CompConstraintContext.prototype.componentType = function() {
    return this.getTypedRuleContext(ComponentTypeContext,0);
};

CompConstraintContext.prototype.componentID = function() {
    return this.getTypedRuleContext(ComponentIDContext,0);
};

CompConstraintContext.prototype.multModifier = function() {
    return this.getTypedRuleContext(MultModifierContext,0);
};

CompConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterCompConstraint(this);
	}
};

CompConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitCompConstraint(this);
	}
};




VtlParser.CompConstraintContext = CompConstraintContext;

VtlParser.prototype.compConstraint = function() {

    var localctx = new CompConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, VtlParser.RULE_compConstraint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1714;
        this.componentType();
        this.state = 1717;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.IDENTIFIER:
            this.state = 1715;
            this.componentID();
            break;
        case VtlParser.OPTIONAL:
            this.state = 1716;
            this.multModifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MultModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_multModifier;
    return this;
}

MultModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultModifierContext.prototype.constructor = MultModifierContext;

MultModifierContext.prototype.OPTIONAL = function() {
    return this.getToken(VtlParser.OPTIONAL, 0);
};

MultModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterMultModifier(this);
	}
};

MultModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitMultModifier(this);
	}
};




VtlParser.MultModifierContext = MultModifierContext;

VtlParser.prototype.multModifier = function() {

    var localctx = new MultModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, VtlParser.RULE_multModifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1719;
        this.match(VtlParser.OPTIONAL);
        this.state = 1721;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.T__2 || _la===VtlParser.T__4) {
            this.state = 1720;
            _la = this._input.LA(1);
            if(!(_la===VtlParser.T__2 || _la===VtlParser.T__4)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RulesetTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_rulesetType;
    return this;
}

RulesetTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RulesetTypeContext.prototype.constructor = RulesetTypeContext;

RulesetTypeContext.prototype.RULESET = function() {
    return this.getToken(VtlParser.RULESET, 0);
};

RulesetTypeContext.prototype.dpRuleset = function() {
    return this.getTypedRuleContext(DpRulesetContext,0);
};

RulesetTypeContext.prototype.hrRuleset = function() {
    return this.getTypedRuleContext(HrRulesetContext,0);
};

RulesetTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterRulesetType(this);
	}
};

RulesetTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitRulesetType(this);
	}
};




VtlParser.RulesetTypeContext = RulesetTypeContext;

VtlParser.prototype.rulesetType = function() {

    var localctx = new RulesetTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, VtlParser.RULE_rulesetType);
    try {
        this.state = 1726;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.RULESET:
            this.enterOuterAlt(localctx, 1);
            this.state = 1723;
            this.match(VtlParser.RULESET);
            break;
        case VtlParser.DATAPOINT:
        case VtlParser.DATAPOINT_ON_VD:
        case VtlParser.DATAPOINT_ON_VAR:
            this.enterOuterAlt(localctx, 2);
            this.state = 1724;
            this.dpRuleset();
            break;
        case VtlParser.HIERARCHICAL:
        case VtlParser.HIERARCHICAL_ON_VD:
        case VtlParser.HIERARCHICAL_ON_VAR:
            this.enterOuterAlt(localctx, 3);
            this.state = 1725;
            this.hrRuleset();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DpRulesetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_dpRuleset;
    return this;
}

DpRulesetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DpRulesetContext.prototype.constructor = DpRulesetContext;

DpRulesetContext.prototype.DATAPOINT = function() {
    return this.getToken(VtlParser.DATAPOINT, 0);
};

DpRulesetContext.prototype.DATAPOINT_ON_VD = function() {
    return this.getToken(VtlParser.DATAPOINT_ON_VD, 0);
};

DpRulesetContext.prototype.prodValueDomains = function() {
    return this.getTypedRuleContext(ProdValueDomainsContext,0);
};

DpRulesetContext.prototype.DATAPOINT_ON_VAR = function() {
    return this.getToken(VtlParser.DATAPOINT_ON_VAR, 0);
};

DpRulesetContext.prototype.prodVariables = function() {
    return this.getTypedRuleContext(ProdVariablesContext,0);
};

DpRulesetContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterDpRuleset(this);
	}
};

DpRulesetContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitDpRuleset(this);
	}
};




VtlParser.DpRulesetContext = DpRulesetContext;

VtlParser.prototype.dpRuleset = function() {

    var localctx = new DpRulesetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, VtlParser.RULE_dpRuleset);
    try {
        this.state = 1739;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.DATAPOINT:
            this.enterOuterAlt(localctx, 1);
            this.state = 1728;
            this.match(VtlParser.DATAPOINT);
            break;
        case VtlParser.DATAPOINT_ON_VD:
            this.enterOuterAlt(localctx, 2);
            this.state = 1729;
            this.match(VtlParser.DATAPOINT_ON_VD);
            this.state = 1730;
            this.match(VtlParser.T__15);
            this.state = 1731;
            this.prodValueDomains();
            this.state = 1732;
            this.match(VtlParser.T__16);
            break;
        case VtlParser.DATAPOINT_ON_VAR:
            this.enterOuterAlt(localctx, 3);
            this.state = 1734;
            this.match(VtlParser.DATAPOINT_ON_VAR);
            this.state = 1735;
            this.match(VtlParser.T__15);
            this.state = 1736;
            this.prodVariables();
            this.state = 1737;
            this.match(VtlParser.T__16);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HrRulesetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_hrRuleset;
    return this;
}

HrRulesetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HrRulesetContext.prototype.constructor = HrRulesetContext;

HrRulesetContext.prototype.HIERARCHICAL = function() {
    return this.getToken(VtlParser.HIERARCHICAL, 0);
};

HrRulesetContext.prototype.HIERARCHICAL_ON_VD = function() {
    return this.getToken(VtlParser.HIERARCHICAL_ON_VD, 0);
};

HrRulesetContext.prototype.IDENTIFIER = function() {
    return this.getToken(VtlParser.IDENTIFIER, 0);
};

HrRulesetContext.prototype.prodValueDomains = function() {
    return this.getTypedRuleContext(ProdValueDomainsContext,0);
};

HrRulesetContext.prototype.HIERARCHICAL_ON_VAR = function() {
    return this.getToken(VtlParser.HIERARCHICAL_ON_VAR, 0);
};

HrRulesetContext.prototype.varID = function() {
    return this.getTypedRuleContext(VarIDContext,0);
};

HrRulesetContext.prototype.prodVariables = function() {
    return this.getTypedRuleContext(ProdVariablesContext,0);
};

HrRulesetContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterHrRuleset(this);
	}
};

HrRulesetContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitHrRuleset(this);
	}
};




VtlParser.HrRulesetContext = HrRulesetContext;

VtlParser.prototype.hrRuleset = function() {

    var localctx = new HrRulesetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, VtlParser.RULE_hrRuleset);
    var _la = 0; // Token type
    try {
        this.state = 1767;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.HIERARCHICAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 1741;
            this.match(VtlParser.HIERARCHICAL);
            break;
        case VtlParser.HIERARCHICAL_ON_VD:
            this.enterOuterAlt(localctx, 2);
            this.state = 1742;
            this.match(VtlParser.HIERARCHICAL_ON_VD);
            this.state = 1752;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.T__15) {
                this.state = 1743;
                this.match(VtlParser.T__15);
                this.state = 1744;
                this.match(VtlParser.IDENTIFIER);
                this.state = 1749;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===VtlParser.T__12) {
                    this.state = 1745;
                    this.match(VtlParser.T__12);
                    this.state = 1746;
                    this.prodValueDomains();
                    this.state = 1747;
                    this.match(VtlParser.T__13);
                }

                this.state = 1751;
                this.match(VtlParser.T__16);
            }

            break;
        case VtlParser.HIERARCHICAL_ON_VAR:
            this.enterOuterAlt(localctx, 3);
            this.state = 1754;
            this.match(VtlParser.HIERARCHICAL_ON_VAR);
            this.state = 1765;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===VtlParser.T__15) {
                this.state = 1755;
                this.match(VtlParser.T__15);
                this.state = 1756;
                this.varID();
                this.state = 1761;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===VtlParser.T__12) {
                    this.state = 1757;
                    this.match(VtlParser.T__12);
                    this.state = 1758;
                    this.prodVariables();
                    this.state = 1759;
                    this.match(VtlParser.T__13);
                }

                this.state = 1763;
                this.match(VtlParser.T__16);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProdValueDomainsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_prodValueDomains;
    return this;
}

ProdValueDomainsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProdValueDomainsContext.prototype.constructor = ProdValueDomainsContext;

ProdValueDomainsContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(VtlParser.IDENTIFIER);
    } else {
        return this.getToken(VtlParser.IDENTIFIER, i);
    }
};


ProdValueDomainsContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterProdValueDomains(this);
	}
};

ProdValueDomainsContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitProdValueDomains(this);
	}
};




VtlParser.ProdValueDomainsContext = ProdValueDomainsContext;

VtlParser.prototype.prodValueDomains = function() {

    var localctx = new ProdValueDomainsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, VtlParser.RULE_prodValueDomains);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1769;
        this.match(VtlParser.IDENTIFIER);
        this.state = 1774;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.T__4) {
            this.state = 1770;
            this.match(VtlParser.T__4);
            this.state = 1771;
            this.match(VtlParser.IDENTIFIER);
            this.state = 1776;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProdVariablesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_prodVariables;
    return this;
}

ProdVariablesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProdVariablesContext.prototype.constructor = ProdVariablesContext;

ProdVariablesContext.prototype.varID = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VarIDContext);
    } else {
        return this.getTypedRuleContext(VarIDContext,i);
    }
};

ProdVariablesContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterProdVariables(this);
	}
};

ProdVariablesContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitProdVariables(this);
	}
};




VtlParser.ProdVariablesContext = ProdVariablesContext;

VtlParser.prototype.prodVariables = function() {

    var localctx = new ProdVariablesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, VtlParser.RULE_prodVariables);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1777;
        this.varID();
        this.state = 1782;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.T__4) {
            this.state = 1778;
            this.match(VtlParser.T__4);
            this.state = 1779;
            this.varID();
            this.state = 1784;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OperatorTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_operatorType;
    return this;
}

OperatorTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperatorTypeContext.prototype.constructor = OperatorTypeContext;

OperatorTypeContext.prototype.inputParameterType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InputParameterTypeContext);
    } else {
        return this.getTypedRuleContext(InputParameterTypeContext,i);
    }
};

OperatorTypeContext.prototype.outputParameterType = function() {
    return this.getTypedRuleContext(OutputParameterTypeContext,0);
};

OperatorTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterOperatorType(this);
	}
};

OperatorTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitOperatorType(this);
	}
};




VtlParser.OperatorTypeContext = OperatorTypeContext;

VtlParser.prototype.operatorType = function() {

    var localctx = new OperatorTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, VtlParser.RULE_operatorType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1785;
        this.inputParameterType();
        this.state = 1790;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===VtlParser.T__4) {
            this.state = 1786;
            this.match(VtlParser.T__4);
            this.state = 1787;
            this.inputParameterType();
            this.state = 1792;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1793;
        this.match(VtlParser.T__17);
        this.state = 1794;
        this.outputParameterType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InputParameterTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_inputParameterType;
    return this;
}

InputParameterTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InputParameterTypeContext.prototype.constructor = InputParameterTypeContext;

InputParameterTypeContext.prototype.scalarType = function() {
    return this.getTypedRuleContext(ScalarTypeContext,0);
};

InputParameterTypeContext.prototype.datasetType = function() {
    return this.getTypedRuleContext(DatasetTypeContext,0);
};

InputParameterTypeContext.prototype.componentType = function() {
    return this.getTypedRuleContext(ComponentTypeContext,0);
};

InputParameterTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterInputParameterType(this);
	}
};

InputParameterTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitInputParameterType(this);
	}
};




VtlParser.InputParameterTypeContext = InputParameterTypeContext;

VtlParser.prototype.inputParameterType = function() {

    var localctx = new InputParameterTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, VtlParser.RULE_inputParameterType);
    try {
        this.state = 1799;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.BOOLEAN:
        case VtlParser.DATE:
        case VtlParser.TIME_PERIOD:
        case VtlParser.NUMBER:
        case VtlParser.STRING:
        case VtlParser.INTEGER:
        case VtlParser.DURATION:
        case VtlParser.SCALAR:
        case VtlParser.IDENTIFIER:
        case VtlParser.TIME:
            this.enterOuterAlt(localctx, 1);
            this.state = 1796;
            this.scalarType();
            break;
        case VtlParser.DATASET:
            this.enterOuterAlt(localctx, 2);
            this.state = 1797;
            this.datasetType();
            break;
        case VtlParser.DIMENSION:
        case VtlParser.MEASURE:
        case VtlParser.ATTRIBUTE:
        case VtlParser.VIRAL:
        case VtlParser.COMPONENT:
            this.enterOuterAlt(localctx, 3);
            this.state = 1798;
            this.componentType();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OutputParameterTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_outputParameterType;
    return this;
}

OutputParameterTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OutputParameterTypeContext.prototype.constructor = OutputParameterTypeContext;

OutputParameterTypeContext.prototype.scalarType = function() {
    return this.getTypedRuleContext(ScalarTypeContext,0);
};

OutputParameterTypeContext.prototype.datasetType = function() {
    return this.getTypedRuleContext(DatasetTypeContext,0);
};

OutputParameterTypeContext.prototype.scalarSetType = function() {
    return this.getTypedRuleContext(ScalarSetTypeContext,0);
};

OutputParameterTypeContext.prototype.rulesetType = function() {
    return this.getTypedRuleContext(RulesetTypeContext,0);
};

OutputParameterTypeContext.prototype.componentType = function() {
    return this.getTypedRuleContext(ComponentTypeContext,0);
};

OutputParameterTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterOutputParameterType(this);
	}
};

OutputParameterTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitOutputParameterType(this);
	}
};




VtlParser.OutputParameterTypeContext = OutputParameterTypeContext;

VtlParser.prototype.outputParameterType = function() {

    var localctx = new OutputParameterTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, VtlParser.RULE_outputParameterType);
    try {
        this.state = 1806;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case VtlParser.BOOLEAN:
        case VtlParser.DATE:
        case VtlParser.TIME_PERIOD:
        case VtlParser.NUMBER:
        case VtlParser.STRING:
        case VtlParser.INTEGER:
        case VtlParser.DURATION:
        case VtlParser.SCALAR:
        case VtlParser.IDENTIFIER:
        case VtlParser.TIME:
            this.enterOuterAlt(localctx, 1);
            this.state = 1801;
            this.scalarType();
            break;
        case VtlParser.DATASET:
            this.enterOuterAlt(localctx, 2);
            this.state = 1802;
            this.datasetType();
            break;
        case VtlParser.SET:
            this.enterOuterAlt(localctx, 3);
            this.state = 1803;
            this.scalarSetType();
            break;
        case VtlParser.DATAPOINT:
        case VtlParser.HIERARCHICAL:
        case VtlParser.RULESET:
        case VtlParser.DATAPOINT_ON_VD:
        case VtlParser.DATAPOINT_ON_VAR:
        case VtlParser.HIERARCHICAL_ON_VD:
        case VtlParser.HIERARCHICAL_ON_VAR:
            this.enterOuterAlt(localctx, 4);
            this.state = 1804;
            this.rulesetType();
            break;
        case VtlParser.DIMENSION:
        case VtlParser.MEASURE:
        case VtlParser.ATTRIBUTE:
        case VtlParser.VIRAL:
        case VtlParser.COMPONENT:
            this.enterOuterAlt(localctx, 5);
            this.state = 1805;
            this.componentType();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ScalarSetTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_scalarSetType;
    return this;
}

ScalarSetTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ScalarSetTypeContext.prototype.constructor = ScalarSetTypeContext;

ScalarSetTypeContext.prototype.SET = function() {
    return this.getToken(VtlParser.SET, 0);
};

ScalarSetTypeContext.prototype.scalarType = function() {
    return this.getTypedRuleContext(ScalarTypeContext,0);
};

ScalarSetTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterScalarSetType(this);
	}
};

ScalarSetTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitScalarSetType(this);
	}
};




VtlParser.ScalarSetTypeContext = ScalarSetTypeContext;

VtlParser.prototype.scalarSetType = function() {

    var localctx = new ScalarSetTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, VtlParser.RULE_scalarSetType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1808;
        this.match(VtlParser.SET);
        this.state = 1813;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===VtlParser.T__7) {
            this.state = 1809;
            this.match(VtlParser.T__7);
            this.state = 1810;
            this.scalarType();
            this.state = 1811;
            this.match(VtlParser.T__6);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RetainTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_retainType;
    return this;
}

RetainTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RetainTypeContext.prototype.constructor = RetainTypeContext;

RetainTypeContext.prototype.BOOLEAN_CONSTANT = function() {
    return this.getToken(VtlParser.BOOLEAN_CONSTANT, 0);
};

RetainTypeContext.prototype.ALL = function() {
    return this.getToken(VtlParser.ALL, 0);
};

RetainTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterRetainType(this);
	}
};

RetainTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitRetainType(this);
	}
};




VtlParser.RetainTypeContext = RetainTypeContext;

VtlParser.prototype.retainType = function() {

    var localctx = new RetainTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, VtlParser.RULE_retainType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1815;
        _la = this._input.LA(1);
        if(!(_la===VtlParser.ALL || _la===VtlParser.BOOLEAN_CONSTANT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefineDatapointRulesetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_defineDatapointRuleset;
    return this;
}

DefineDatapointRulesetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefineDatapointRulesetContext.prototype.constructor = DefineDatapointRulesetContext;

DefineDatapointRulesetContext.prototype.DEFINE = function() {
    return this.getToken(VtlParser.DEFINE, 0);
};

DefineDatapointRulesetContext.prototype.DATAPOINT = function() {
    return this.getToken(VtlParser.DATAPOINT, 0);
};

DefineDatapointRulesetContext.prototype.RULESET = function() {
    return this.getToken(VtlParser.RULESET, 0);
};

DefineDatapointRulesetContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterDefineDatapointRuleset(this);
	}
};

DefineDatapointRulesetContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitDefineDatapointRuleset(this);
	}
};




VtlParser.DefineDatapointRulesetContext = DefineDatapointRulesetContext;

VtlParser.prototype.defineDatapointRuleset = function() {

    var localctx = new DefineDatapointRulesetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, VtlParser.RULE_defineDatapointRuleset);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1817;
        this.match(VtlParser.DEFINE);
        this.state = 1818;
        this.match(VtlParser.DATAPOINT);
        this.state = 1819;
        this.match(VtlParser.RULESET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefineHierarchicalRulesetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_defineHierarchicalRuleset;
    return this;
}

DefineHierarchicalRulesetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefineHierarchicalRulesetContext.prototype.constructor = DefineHierarchicalRulesetContext;

DefineHierarchicalRulesetContext.prototype.DEFINE = function() {
    return this.getToken(VtlParser.DEFINE, 0);
};

DefineHierarchicalRulesetContext.prototype.HIERARCHICAL = function() {
    return this.getToken(VtlParser.HIERARCHICAL, 0);
};

DefineHierarchicalRulesetContext.prototype.RULESET = function() {
    return this.getToken(VtlParser.RULESET, 0);
};

DefineHierarchicalRulesetContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterDefineHierarchicalRuleset(this);
	}
};

DefineHierarchicalRulesetContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitDefineHierarchicalRuleset(this);
	}
};




VtlParser.DefineHierarchicalRulesetContext = DefineHierarchicalRulesetContext;

VtlParser.prototype.defineHierarchicalRuleset = function() {

    var localctx = new DefineHierarchicalRulesetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, VtlParser.RULE_defineHierarchicalRuleset);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1821;
        this.match(VtlParser.DEFINE);
        this.state = 1822;
        this.match(VtlParser.HIERARCHICAL);
        this.state = 1823;
        this.match(VtlParser.RULESET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EndDatapointRulesetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_endDatapointRuleset;
    return this;
}

EndDatapointRulesetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EndDatapointRulesetContext.prototype.constructor = EndDatapointRulesetContext;

EndDatapointRulesetContext.prototype.END = function() {
    return this.getToken(VtlParser.END, 0);
};

EndDatapointRulesetContext.prototype.DATAPOINT = function() {
    return this.getToken(VtlParser.DATAPOINT, 0);
};

EndDatapointRulesetContext.prototype.RULESET = function() {
    return this.getToken(VtlParser.RULESET, 0);
};

EndDatapointRulesetContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterEndDatapointRuleset(this);
	}
};

EndDatapointRulesetContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitEndDatapointRuleset(this);
	}
};




VtlParser.EndDatapointRulesetContext = EndDatapointRulesetContext;

VtlParser.prototype.endDatapointRuleset = function() {

    var localctx = new EndDatapointRulesetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, VtlParser.RULE_endDatapointRuleset);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1825;
        this.match(VtlParser.END);
        this.state = 1826;
        this.match(VtlParser.DATAPOINT);
        this.state = 1827;
        this.match(VtlParser.RULESET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EndHierarchicalRulesetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_endHierarchicalRuleset;
    return this;
}

EndHierarchicalRulesetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EndHierarchicalRulesetContext.prototype.constructor = EndHierarchicalRulesetContext;

EndHierarchicalRulesetContext.prototype.END = function() {
    return this.getToken(VtlParser.END, 0);
};

EndHierarchicalRulesetContext.prototype.HIERARCHICAL = function() {
    return this.getToken(VtlParser.HIERARCHICAL, 0);
};

EndHierarchicalRulesetContext.prototype.RULESET = function() {
    return this.getToken(VtlParser.RULESET, 0);
};

EndHierarchicalRulesetContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterEndHierarchicalRuleset(this);
	}
};

EndHierarchicalRulesetContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitEndHierarchicalRuleset(this);
	}
};




VtlParser.EndHierarchicalRulesetContext = EndHierarchicalRulesetContext;

VtlParser.prototype.endHierarchicalRuleset = function() {

    var localctx = new EndHierarchicalRulesetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, VtlParser.RULE_endHierarchicalRuleset);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1829;
        this.match(VtlParser.END);
        this.state = 1830;
        this.match(VtlParser.HIERARCHICAL);
        this.state = 1831;
        this.match(VtlParser.RULESET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefineDataStructureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = VtlParser.RULE_defineDataStructure;
    return this;
}

DefineDataStructureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefineDataStructureContext.prototype.constructor = DefineDataStructureContext;

DefineDataStructureContext.prototype.DEFINE = function() {
    return this.getToken(VtlParser.DEFINE, 0);
};

DefineDataStructureContext.prototype.DATA = function() {
    return this.getToken(VtlParser.DATA, 0);
};

DefineDataStructureContext.prototype.STRUCTURE = function() {
    return this.getToken(VtlParser.STRUCTURE, 0);
};

DefineDataStructureContext.prototype.enterRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.enterDefineDataStructure(this);
	}
};

DefineDataStructureContext.prototype.exitRule = function(listener) {
    if(listener instanceof VtlListener ) {
        listener.exitDefineDataStructure(this);
	}
};




VtlParser.DefineDataStructureContext = DefineDataStructureContext;

VtlParser.prototype.defineDataStructure = function() {

    var localctx = new DefineDataStructureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, VtlParser.RULE_defineDataStructure);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1833;
        this.match(VtlParser.DEFINE);
        this.state = 1834;
        this.match(VtlParser.DATA);
        this.state = 1835;
        this.match(VtlParser.STRUCTURE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


VtlParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 4:
			return this.expr_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

VtlParser.prototype.expr_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 15);
		case 1:
			return this.precpred(this._ctx, 14);
		case 2:
			return this.precpred(this._ctx, 13);
		case 3:
			return this.precpred(this._ctx, 9);
		case 4:
			return this.precpred(this._ctx, 8);
		case 5:
			return this.precpred(this._ctx, 7);
		case 6:
			return this.precpred(this._ctx, 3);
		case 7:
			return this.precpred(this._ctx, 12);
		case 8:
			return this.precpred(this._ctx, 11);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.VtlParser = VtlParser;
